[
{	"repository": "https://github.com/apache/drill.git",
	"sha1": "8815eb7d947be6d2a0281c15a3a60d8ba040db95",
	"url": "https://github.com/apache/drill/commit/8815eb7d947be6d2a0281c15a3a60d8ba040db95",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.TestUserException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.client.PrintingResultsListener",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.DrillSqlWorker",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.SchemaUtilites",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.handlers.CreateTableHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.handlers.DescribeTableHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.handlers.ShowTablesHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.planner.sql.handlers.SqlHandlerUtil",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : org.slf4j.Logger from class org.apache.drill.common.exceptions.UserException to private logger : org.slf4j.Logger from class org.apache.drill.exec.store.parquet.ParquetReaderUtility",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/real-logic/Aeron.git",
	"sha1": "4b762c2c70f06b0c5d2cd85866424c46478c827b",
	"url": "https://github.com/real-logic/Aeron/commit/4b762c2c70f06b0c5d2cd85866424c46478c827b",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter nakMessage : NakFlyweight to nakMsg : NakFlyweight in method private onNakMessage(nakMsg NakFlyweight) : void in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type assembly : PublicationAssembly to publication : NetworkPublication in method private onStatusMessage(statusMsg StatusMessageFlyweight, srcAddress InetSocketAddress) : void in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable assembly : PublicationAssembly to publication : NetworkPublication in method private onStatusMessage(statusMsg StatusMessageFlyweight, srcAddress InetSocketAddress) : void in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type assembly : PublicationAssembly to publication : NetworkPublication in method private onNakMessage(nakMsg NakFlyweight) : void in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable assembly : PublicationAssembly to publication : NetworkPublication in method private onNakMessage(nakMsg NakFlyweight) : void in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute publicationByStreamAndSessionIdMap : BiInt2ObjectMap<NetworkPublication> to driversPublicationByStreamAndSessionId : BiInt2ObjectMap<NetworkPublication> in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute assemblyByStreamAndSessionIdMap : BiInt2ObjectMap<PublicationAssembly> to sendersPublicationByStreamAndSessionId : BiInt2ObjectMap<NetworkPublication> in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type assemblyByStreamAndSessionIdMap : BiInt2ObjectMap<PublicationAssembly> to sendersPublicationByStreamAndSessionId : BiInt2ObjectMap<NetworkPublication> in class uk.co.real_logic.aeron.driver.media.SendChannelEndpoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private flowControl : FlowControl from class uk.co.real_logic.aeron.driver.cmd.NewPublicationCmd to private flowControl : FlowControl from class uk.co.real_logic.aeron.driver.NetworkPublication",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/real-logic/Aeron.git",
	"sha1": "35893c115ba23bd62a7036a33390420f074ce660",
	"url": "https://github.com/real-logic/Aeron/commit/35893c115ba23bd62a7036a33390420f074ce660",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private processTimersUntil(condition BooleanSupplier) : long renamed to private doWorkUntil(condition BooleanSupplier) : long in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyReceiverRemovesSubscription(times VerificationMode) : void inlined to public shouldTimeoutSubscription() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyReceiverRemovesSubscription(times VerificationMode) : void inlined to public shouldNotTimeoutSubscriptionOnKeepAlive() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyReceiverSubscribes() : void inlined to public shouldTimeoutSubscription() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyReceiverSubscribes() : void inlined to public shouldNotTimeoutSubscriptionOnKeepAlive() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 
                "label": "IM: Improve readability",
                "status": "match1"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyPublicationClosed(times VerificationMode) : void inlined to public shouldErrorOnRemoveChannelOnUnknownStreamId() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 
                "label": "IM: Improve readability",
                "status": "match1"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyPublicationClosed(times VerificationMode) : void inlined to public shouldTimeoutPublication() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyPublicationClosed(times VerificationMode) : void inlined to public shouldNotTimeoutPublicationOnKeepAlive() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyExceptionLogged() : void inlined to public shouldErrorOnRemoveChannelOnUnknownSessionId() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyExceptionLogged() : void inlined to public shouldErrorOnRemoveChannelOnUnknownStreamId() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyExceptionLogged() : void inlined to public shouldErrorOnAddSubscriptionWithInvalidUri() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 
	                "label": "IM: Improve readability",
					"status": "match1"

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyNeverSucceeds() : void inlined to public shouldErrorOnRemoveChannelOnUnknownSessionId() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyNeverSucceeds() : void inlined to public shouldErrorOnRemoveChannelOnUnknownStreamId() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifyNeverSucceeds() : void inlined to public shouldErrorOnAddSubscriptionWithInvalidUri() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 
                "label": "IM: Improve readability",
                "status": "match1"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifySenderNotifiedOfNewPublication() : void inlined to public shouldBeAbleToAddSinglePublication() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 
                "label": "IM: Improve readability",
                "status": "match1"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifySenderNotifiedOfNewPublication() : void inlined to public shouldTimeoutPublication() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private verifySenderNotifiedOfNewPublication() : void inlined to public shouldNotTimeoutPublicationOnKeepAlive() : void in class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable receiveChannelEndpoint : ReceiveChannelEndpoint in method public shouldTimeoutSubscription() : void from class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable receiveChannelEndpoint : ReceiveChannelEndpoint in method public shouldNotTimeoutSubscriptionOnKeepAlive() : void from class uk.co.real_logic.aeron.driver.DriverConductorTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/CyanogenMod/android_frameworks_base.git",
	"sha1": "15fd4f9caea01e53725086e290d3b35ec4bd4cd9",
	"url": "https://github.com/CyanogenMod/android_frameworks_base/commit/15fd4f9caea01e53725086e290d3b35ec4bd4cd9",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected reset(animateTransition boolean) : void extracted from public reset() : void in class com.android.keyguard.KeyguardAbsKeyInputView",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/CyanogenMod/android_frameworks_base.git",
	"sha1": "4587c32ab8a1c8e2169e4f93491a8c927216a6ab",
	"url": "https://github.com/CyanogenMod/android_frameworks_base/commit/4587c32ab8a1c8e2169e4f93491a8c927216a6ab",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private startAsync() : void extracted from public start() : void in class com.android.systemui.usb.StorageNotification",
	"motivations": [ 
            {
                "label": "EM: Introduce async operation",
                "status": "match2"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/CyanogenMod/android_frameworks_base.git",
	"sha1": "153611deab149accd8aeaf03fd102c0b069bd322",
	"url": "https://github.com/CyanogenMod/android_frameworks_base/commit/153611deab149accd8aeaf03fd102c0b069bd322",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public stringToPattern(string String, size byte) : List<LockPatternView.Cell> extracted from public stringToPattern(string String) : List<LockPatternView.Cell> in class com.android.internal.widget.LockPatternUtils",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public of(cells Cell[][], row int, column int, size byte) : Cell extracted from public of(row int, column int, size byte) : Cell in class com.android.internal.widget.LockPatternView.Cell",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/CyanogenMod/android_frameworks_base.git",
	"sha1": "5d1a70a4d32ac4c96a32535c68c69b20288d8968",
	"url": "https://github.com/CyanogenMod/android_frameworks_base/commit/5d1a70a4d32ac4c96a32535c68c69b20288d8968",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public killProcessGroup(uid int, pid int) : void extracted from package removeLruProcessLocked(app ProcessRecord) : void in class com.android.server.am.ActivityManagerService",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public killProcessGroup(uid int, pid int) : void extracted from package startProcessLocked(processName String, info ApplicationInfo, knownToBeDead boolean, intentFlags int, hostingType String, hostingName ComponentName, allowWhileBooting boolean, isolated boolean, isolatedUid int, keepIfLarge boolean, abiOverride String, entryPoint String, entryPointArgs String[], crashHandler Runnable) : ProcessRecord in class com.android.server.am.ActivityManagerService",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public killProcessGroup(uid int, pid int) : void extracted from package appDiedLocked(app ProcessRecord, pid int, thread IApplicationThread, fromBinderDied boolean) : void in class com.android.server.am.ActivityManagerService",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public killProcessGroup(uid int, pid int) : void extracted from private crashApplication(r ProcessRecord, crashInfo ApplicationErrorReport.CrashInfo) : void in class com.android.server.am.ActivityManagerService",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/gradle/gradle.git",
	"sha1": "79c66ceab11dae0b9fd1dade7bb4120028738705",
	"url": "https://github.com/gradle/gradle/commit/79c66ceab11dae0b9fd1dade7bb4120028738705",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getInputs() : Set<LanguageSourceSet> extracted from public getAllSources() : Set<LanguageSourceSet> in class org.gradle.platform.base.binary.BaseBinarySpec",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getAllSources() : Set<LanguageSourceSet> renamed to public getInputs() : Set<LanguageSourceSet> in class org.gradle.nativeplatform.test.internal.DefaultNativeTestSuiteBinarySpec",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/gradle/gradle.git",
	"sha1": "44aab6242f8c93059612c953af950eb1870e0774",
	"url": "https://github.com/gradle/gradle/commit/44aab6242f8c93059612c953af950eb1870e0774",
	"refactorings": [{
	"type": "Rename Attribute",
	"description": "Rename Attribute relativeDirectoryPath : String to baseDirFileResolver : FileResolver in class org.gradle.api.internal.project.AbstractProject",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type relativeDirectoryPath : String to baseDirFileResolver : FileResolver in class org.gradle.api.internal.project.AbstractProject",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter relativeProjectPath : String to relativeFilePathResolver : RelativeFilePathResolver in method public TransformedModelDslBacking(modelRegistry ModelRegistry, schemaStore ModelSchemaStore, relativeFilePathResolver RelativeFilePathResolver) in class org.gradle.model.dsl.internal.TransformedModelDslBacking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type relativeProjectPath : String to relativeFilePathResolver : RelativeFilePathResolver in method public TransformedModelDslBacking(modelRegistry ModelRegistry, schemaStore ModelSchemaStore, relativeFilePathResolver RelativeFilePathResolver) in class org.gradle.model.dsl.internal.TransformedModelDslBacking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter path : String to relativeFilePathResolver : RelativeFilePathResolver in method public RelativePathSourceLocationTransformer(relativeFilePathResolver RelativeFilePathResolver) in class org.gradle.model.dsl.internal.TransformedModelDslBacking.RelativePathSourceLocationTransformer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type path : String to relativeFilePathResolver : RelativeFilePathResolver in method public RelativePathSourceLocationTransformer(relativeFilePathResolver RelativeFilePathResolver) in class org.gradle.model.dsl.internal.TransformedModelDslBacking.RelativePathSourceLocationTransformer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Interface",
	"description": "Extract Interface org.gradle.internal.file.RelativeFilePathResolver from classes [org.gradle.api.internal.file.FileResolver]",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-data-neo4j.git",
	"sha1": "ef2a0d63393484975854fc08ad0fd3abc7dd76b0",
	"url": "https://github.com/spring-projects/spring-data-neo4j/commit/ef2a0d63393484975854fc08ad0fd3abc7dd76b0",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.springframework.data.neo4j.examples.friends.FriendContext moved to org.springframework.data.neo4j.examples.friends.context.FriendContext",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.springframework.data.neo4j.examples.friends.Friendship moved to org.springframework.data.neo4j.examples.friends.domain.Friendship",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.springframework.data.neo4j.examples.friends.Person moved to org.springframework.data.neo4j.examples.friends.domain.Person",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable parameterValue : Object in method private resolveParams(parameters Object[]) : Map<String,Object> from class org.springframework.data.neo4j.repository.query.GraphRepositoryQuery",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/wildfly/wildfly.git",
	"sha1": "d7675fb0b19d3d22978e79954f441eeefd74a3b2",
	"url": "https://github.com/wildfly/wildfly/commit/d7675fb0b19d3d22978e79954f441eeefd74a3b2",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private handleMethodPermissions(componentDescription EJBComponentDescription, methodPermissions MethodPermissionsMetaData) : void extracted from protected handleDeploymentDescriptor(deploymentUnit DeploymentUnit, deploymentReflectionIndex DeploymentReflectionIndex, componentClass Class<?>, componentDescription EJBComponentDescription) : void in class org.jboss.as.ejb3.deployment.processors.merging.MethodPermissionsMergingProcessor",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private handleExcludeMethods(componentDescription EJBComponentDescription, excludeList ExcludeListMetaData) : void extracted from protected handleDeploymentDescriptor(deploymentUnit DeploymentUnit, deploymentReflectionIndex DeploymentReflectionIndex, componentClass Class<?>, componentDescription EJBComponentDescription) : void in class org.jboss.as.ejb3.deployment.processors.merging.MethodPermissionsMergingProcessor",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/wildfly/wildfly.git",
	"sha1": "37d842bfed9779e662321a5ee43c36b058386843",
	"url": "https://github.com/wildfly/wildfly/commit/37d842bfed9779e662321a5ee43c36b058386843",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public executeReloadAndWaitForCompletion(client ModelControllerClient, timeout int) : void extracted from public executeReloadAndWaitForCompletion(client ModelControllerClient) : void in class org.jboss.as.test.shared.ServerReload",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/fabric8io/fabric8.git",
	"sha1": "9e61a71540da58c3208fd2c7737f793c3f81e5ae",
	"url": "https://github.com/fabric8io/fabric8/commit/9e61a71540da58c3208fd2c7737f793c3f81e5ae",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public createGogsWebhook(kubernetes KubernetesClient, log Log, gogsUser String, gogsPwd String, repoName String, webhookUrl String, webhookSecret String) : boolean extracted from public execute() : void in class io.fabric8.maven.CreateGogsWebhook",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/fabric8io/fabric8.git",
	"sha1": "07807aed847e1d0589c094461544e54a2677cbf5",
	"url": "https://github.com/fabric8io/fabric8/commit/07807aed847e1d0589c094461544e54a2677cbf5",
	"refactorings": [{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private DEFAULT_CONFIG_FILE_NAME : String from class io.fabric8.maven.ApplyMojo to private DEFAULT_CONFIG_FILE_NAME : String from class io.fabric8.maven.AbstractFabric8Mojo",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private combineDependencies : boolean from class io.fabric8.maven.JsonMojo to protected combineDependencies : boolean from class io.fabric8.maven.AbstractFabric8Mojo",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private getDependencies() : Set<File> from class io.fabric8.maven.ApplyMojo to package getDependencies() : Set<File> from class io.fabric8.maven.AbstractFabric8Mojo",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected isKubernetesJsonArtifact(classifier String, type String) : boolean from class io.fabric8.maven.JsonMojo to package isKubernetesJsonArtifact(classifier String, type String) : boolean from class io.fabric8.maven.AbstractFabric8Mojo",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private hasKubernetesJson(f File) : boolean from class io.fabric8.maven.ApplyMojo to package hasKubernetesJson(f File) : boolean from class io.fabric8.maven.AbstractFabric8Mojo",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/joel-costigliola/assertj-core.git",
	"sha1": "b36ab386559d04db114db8edd87c8d4cbf850c12",
	"url": "https://github.com/joel-costigliola/assertj-core/commit/b36ab386559d04db114db8edd87c8d4cbf850c12",
	"refactorings": [{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.assertj.core.api.StrictAssertions from classes [org.assertj.core.api.Assertions]",
	"motivations": [ 
	{ 
                "label": "ES: Decompose class",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(optional Optional<T>) : OptionalAssert<T> from class org.assertj.core.api.Assertions to public assertThat(optional Optional<T>) : OptionalAssert<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(optionalDouble OptionalDouble) : OptionalDoubleAssert from class org.assertj.core.api.Assertions to public assertThat(optionalDouble OptionalDouble) : OptionalDoubleAssert from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(optionalInt OptionalInt) : OptionalIntAssert from class org.assertj.core.api.Assertions to public assertThat(optionalInt OptionalInt) : OptionalIntAssert from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(optionalLong OptionalLong) : OptionalLongAssert from class org.assertj.core.api.Assertions to public assertThat(optionalLong OptionalLong) : OptionalLongAssert from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual BigDecimal) : AbstractBigDecimalAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual BigDecimal) : AbstractBigDecimalAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual URI) : AbstractUriAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual URI) : AbstractUriAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual URL) : AbstractUrlAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual URL) : AbstractUrlAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual boolean) : AbstractBooleanAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual boolean) : AbstractBooleanAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Boolean) : AbstractBooleanAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Boolean) : AbstractBooleanAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual boolean[]) : AbstractBooleanArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual boolean[]) : AbstractBooleanArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual byte) : AbstractByteAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual byte) : AbstractByteAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Byte) : AbstractByteAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Byte) : AbstractByteAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual byte[]) : AbstractByteArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual byte[]) : AbstractByteArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual char) : AbstractCharacterAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual char) : AbstractCharacterAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual char[]) : AbstractCharArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual char[]) : AbstractCharArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Character) : AbstractCharacterAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Character) : AbstractCharacterAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Class<?>) : AbstractClassAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Class<?>) : AbstractClassAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual double) : AbstractDoubleAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual double) : AbstractDoubleAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Double) : AbstractDoubleAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Double) : AbstractDoubleAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual double[]) : AbstractDoubleArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual double[]) : AbstractDoubleArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual File) : AbstractFileAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual File) : AbstractFileAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual InputStream) : AbstractInputStreamAssert<?,? extends InputStream> from class org.assertj.core.api.Assertions to public assertThat(actual InputStream) : AbstractInputStreamAssert<?,? extends InputStream> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual float) : AbstractFloatAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual float) : AbstractFloatAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Float) : AbstractFloatAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Float) : AbstractFloatAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual float[]) : AbstractFloatArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual float[]) : AbstractFloatArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual int) : AbstractIntegerAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual int) : AbstractIntegerAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual int[]) : AbstractIntArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual int[]) : AbstractIntArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Integer) : AbstractIntegerAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Integer) : AbstractIntegerAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual long) : AbstractLongAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual long) : AbstractLongAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Long) : AbstractLongAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Long) : AbstractLongAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual long[]) : AbstractLongArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual long[]) : AbstractLongArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual T) : AbstractObjectAssert<?,T> from class org.assertj.core.api.Assertions to public assertThat(actual T) : AbstractObjectAssert<?,T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual T[]) : AbstractObjectArrayAssert<?,T> from class org.assertj.core.api.Assertions to public assertThat(actual T[]) : AbstractObjectArrayAssert<?,T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual short) : AbstractShortAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual short) : AbstractShortAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Short) : AbstractShortAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Short) : AbstractShortAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual short[]) : AbstractShortArrayAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual short[]) : AbstractShortArrayAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual String) : AbstractCharSequenceAssert<?,String> from class org.assertj.core.api.Assertions to public assertThat(actual String) : AbstractCharSequenceAssert<?,String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Date) : AbstractDateAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual Date) : AbstractDateAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(date ZonedDateTime) : AbstractZonedDateTimeAssert<?> from class org.assertj.core.api.Assertions to public assertThat(date ZonedDateTime) : AbstractZonedDateTimeAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(localDateTime LocalDateTime) : AbstractLocalDateTimeAssert<?> from class org.assertj.core.api.Assertions to public assertThat(localDateTime LocalDateTime) : AbstractLocalDateTimeAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual OffsetDateTime) : AbstractOffsetDateTimeAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual OffsetDateTime) : AbstractOffsetDateTimeAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(offsetTime OffsetTime) : AbstractOffsetTimeAssert<?> from class org.assertj.core.api.Assertions to public assertThat(offsetTime OffsetTime) : AbstractOffsetTimeAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual LocalTime) : AbstractLocalTimeAssert<?> from class org.assertj.core.api.Assertions to public assertThat(actual LocalTime) : AbstractLocalTimeAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(localDate LocalDate) : AbstractLocalDateAssert<?> from class org.assertj.core.api.Assertions to public assertThat(localDate LocalDate) : AbstractLocalDateAssert<?> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThat(actual Throwable) : AbstractThrowableAssert<?,? extends Throwable> from class org.assertj.core.api.Assertions to public assertThat(actual Throwable) : AbstractThrowableAssert<?,? extends Throwable> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public assertThatThrownBy(shouldRaiseThrowable ThrowingCallable) : AbstractThrowableAssert<?,? extends Throwable> from class org.assertj.core.api.Assertions to public assertThatThrownBy(shouldRaiseThrowable ThrowingCallable) : AbstractThrowableAssert<?,? extends Throwable> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public catchThrowable(shouldRaiseThrowable ThrowingCallable) : Throwable from class org.assertj.core.api.Assertions to public catchThrowable(shouldRaiseThrowable ThrowingCallable) : Throwable from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace boolean) : void from class org.assertj.core.api.Assertions to public setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace boolean) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public fail(failureMessage String) : void from class org.assertj.core.api.Assertions to public fail(failureMessage String) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public fail(failureMessage String, realCause Throwable) : void from class org.assertj.core.api.Assertions to public fail(failureMessage String, realCause Throwable) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public failBecauseExceptionWasNotThrown(exceptionClass Class<? extends Throwable>) : void from class org.assertj.core.api.Assertions to public failBecauseExceptionWasNotThrown(exceptionClass Class<? extends Throwable>) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public shouldHaveThrown(exceptionClass Class<? extends Throwable>) : void from class org.assertj.core.api.Assertions to public shouldHaveThrown(exceptionClass Class<? extends Throwable>) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription int) : void from class org.assertj.core.api.Assertions to public setMaxLengthForSingleLineDescription(maxLengthForSingleLineDescription int) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public extractProperty(propertyName String, propertyType Class<T>) : Properties<T> from class org.assertj.core.api.Assertions to public extractProperty(propertyName String, propertyType Class<T>) : Properties<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public extractProperty(propertyName String) : Properties<Object> from class org.assertj.core.api.Assertions to public extractProperty(propertyName String) : Properties<Object> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public tuple(values Object...) : Tuple from class org.assertj.core.api.Assertions to public tuple(values Object...) : Tuple from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setAllowExtractingPrivateFields(allowExtractingPrivateFields boolean) : void from class org.assertj.core.api.Assertions to public setAllowExtractingPrivateFields(allowExtractingPrivateFields boolean) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setAllowComparingPrivateFields(allowComparingPrivateFields boolean) : void from class org.assertj.core.api.Assertions to public setAllowComparingPrivateFields(allowComparingPrivateFields boolean) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public entry(key K, value V) : MapEntry<K,V> from class org.assertj.core.api.Assertions to public entry(key K, value V) : MapEntry<K,V> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public atIndex(index int) : Index from class org.assertj.core.api.Assertions to public atIndex(index int) : Index from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public offset(value Double) : Offset<Double> from class org.assertj.core.api.Assertions to public offset(value Double) : Offset<Double> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public offset(value Float) : Offset<Float> from class org.assertj.core.api.Assertions to public offset(value Float) : Offset<Float> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Double) : Offset<Double> from class org.assertj.core.api.Assertions to public within(value Double) : Offset<Double> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Float) : Offset<Float> from class org.assertj.core.api.Assertions to public within(value Float) : Offset<Float> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value BigDecimal) : Offset<BigDecimal> from class org.assertj.core.api.Assertions to public within(value BigDecimal) : Offset<BigDecimal> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Byte) : Offset<Byte> from class org.assertj.core.api.Assertions to public within(value Byte) : Offset<Byte> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Integer) : Offset<Integer> from class org.assertj.core.api.Assertions to public within(value Integer) : Offset<Integer> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Short) : Offset<Short> from class org.assertj.core.api.Assertions to public within(value Short) : Offset<Short> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public within(value Long) : Offset<Long> from class org.assertj.core.api.Assertions to public within(value Long) : Offset<Long> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public withinPercentage(value Double) : Percentage from class org.assertj.core.api.Assertions to public withinPercentage(value Double) : Percentage from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public withinPercentage(value Integer) : Percentage from class org.assertj.core.api.Assertions to public withinPercentage(value Integer) : Percentage from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public withinPercentage(value Long) : Percentage from class org.assertj.core.api.Assertions to public withinPercentage(value Long) : Percentage from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public allOf(conditions Condition<? super T>...) : Condition<T> from class org.assertj.core.api.Assertions to public allOf(conditions Condition<? super T>...) : Condition<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public allOf(conditions Iterable<? extends Condition<? super T>>) : Condition<T> from class org.assertj.core.api.Assertions to public allOf(conditions Iterable<? extends Condition<? super T>>) : Condition<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public anyOf(conditions Condition<? super T>...) : Condition<T> from class org.assertj.core.api.Assertions to public anyOf(conditions Condition<? super T>...) : Condition<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public anyOf(conditions Iterable<? extends Condition<? super T>>) : Condition<T> from class org.assertj.core.api.Assertions to public anyOf(conditions Iterable<? extends Condition<? super T>>) : Condition<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public doesNotHave(condition Condition<? super T>) : DoesNotHave<T> from class org.assertj.core.api.Assertions to public doesNotHave(condition Condition<? super T>) : DoesNotHave<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public not(condition Condition<? super T>) : Not<T> from class org.assertj.core.api.Assertions to public not(condition Condition<? super T>) : Not<T> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public filter(array E[]) : Filters<E> from class org.assertj.core.api.Assertions to public filter(array E[]) : Filters<E> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public filter(iterableToFilter Iterable<E>) : Filters<E> from class org.assertj.core.api.Assertions to public filter(iterableToFilter Iterable<E>) : Filters<E> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public in(values Object...) : InFilter from class org.assertj.core.api.Assertions to public in(values Object...) : InFilter from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public notIn(valuesNotToMatch Object...) : NotInFilter from class org.assertj.core.api.Assertions to public notIn(valuesNotToMatch Object...) : NotInFilter from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public not(valueNotToMatch Object) : NotFilter from class org.assertj.core.api.Assertions to public not(valueNotToMatch Object) : NotFilter from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(file File, charset Charset) : String from class org.assertj.core.api.Assertions to public contentOf(file File, charset Charset) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(file File, charsetName String) : String from class org.assertj.core.api.Assertions to public contentOf(file File, charsetName String) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(file File) : String from class org.assertj.core.api.Assertions to public contentOf(file File) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(file File) : List<String> from class org.assertj.core.api.Assertions to public linesOf(file File) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(file File, charset Charset) : List<String> from class org.assertj.core.api.Assertions to public linesOf(file File, charset Charset) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(file File, charsetName String) : List<String> from class org.assertj.core.api.Assertions to public linesOf(file File, charsetName String) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(url URL, charset Charset) : String from class org.assertj.core.api.Assertions to public contentOf(url URL, charset Charset) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(url URL, charsetName String) : String from class org.assertj.core.api.Assertions to public contentOf(url URL, charsetName String) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public contentOf(url URL) : String from class org.assertj.core.api.Assertions to public contentOf(url URL) : String from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(url URL) : List<String> from class org.assertj.core.api.Assertions to public linesOf(url URL) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(url URL, charset Charset) : List<String> from class org.assertj.core.api.Assertions to public linesOf(url URL, charset Charset) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public linesOf(url URL, charsetName String) : List<String> from class org.assertj.core.api.Assertions to public linesOf(url URL, charsetName String) : List<String> from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setLenientDateParsing(value boolean) : void from class org.assertj.core.api.Assertions to public setLenientDateParsing(value boolean) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public registerCustomDateFormat(userCustomDateFormat DateFormat) : void from class org.assertj.core.api.Assertions to public registerCustomDateFormat(userCustomDateFormat DateFormat) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public registerCustomDateFormat(userCustomDateFormatPattern String) : void from class org.assertj.core.api.Assertions to public registerCustomDateFormat(userCustomDateFormatPattern String) : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public useDefaultDateFormatsOnly() : void from class org.assertj.core.api.Assertions to public useDefaultDateFormatsOnly() : void from class org.assertj.core.api.StrictAssertions",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/structr/structr.git",
	"sha1": "15afd616cba5fb3d432d11a6de0d4f7805b202db",
	"url": "https://github.com/structr/structr/commit/15afd616cba5fb3d432d11a6de0d4f7805b202db",
	"refactorings": [{
	"type": "Inline Variable",
	"description": "Inline Variable graphDb : GraphDatabaseService in method public getNodeById(uuid String) : NodeInterface from class org.structr.core.app.StructrApp",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable graphDb : GraphDatabaseService in method public getRelationshipById(uuid String) : RelationshipInterface from class org.structr.core.app.StructrApp",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method package handleObject(nodeFactory NodeFactory, relFactory RelationshipFactory, key String, value Object, includeHiddenAndDeleted boolean, publicOnly boolean, level int) : Object extracted from public execute(query String, parameters Map<String,Object>, includeHiddenAndDeleted boolean, publicOnly boolean) : List<GraphObject> in class org.structr.core.graph.CypherQueryCommand",
	"motivations": [ 
            {
                "label": "EM: Enable recursion",
                "status": "match2"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            }]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable type : Class in method public instantiate(node Node) : T from class org.structr.core.graph.NodeFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable type : Class in method public instantiate(relationship Relationship) : T from class org.structr.core.graph.RelationshipFactory",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/structr/structr.git",
	"sha1": "6c59050b8b03adf6d8043f3fb7add0496f447edf",
	"url": "https://github.com/structr/structr/commit/6c59050b8b03adf6d8043f3fb7add0496f447edf",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getSchemaProperties(schemaNode SchemaNode) : List<SchemaProperty> extracted from private getPropertiesForView(type Class, view String, schemaNode SchemaNode) : Map<String,Object> in class org.structr.rest.resource.SchemaTypeResource",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/ignatov/intellij-erlang.git",
	"sha1": "3855f0ca82795f7481b34342c7d9e5644a1d42c3",
	"url": "https://github.com/ignatov/intellij-erlang/commit/3855f0ca82795f7481b34342c7d9e5644a1d42c3",
	"refactorings": [{
	"type": "Inline Variable",
	"description": "Inline Variable moduleName : String in method public visitFunctionCallExpression(o ErlangFunctionCallExpression) : void from class org.intellij.erlang.inspection.ErlangUnresolvedFunctionInspection.buildErlangVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private getModuleFileName() : String inlined to public resolve() : PsiElement in class org.intellij.erlang.psi.impl.ErlangFunctionReferenceImpl",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private getModuleFileName() : String inlined to public multiResolve(incompleteCode boolean) : ResolveResult[] in class org.intellij.erlang.psi.impl.ErlangFunctionReferenceImpl",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/geoserver/geoserver.git",
	"sha1": "182f4d1174036417aad9d6db908ceaf64234fd5f",
	"url": "https://github.com/geoserver/geoserver/commit/182f4d1174036417aad9d6db908ceaf64234fd5f",
	"refactorings": [{
	"type": "Rename Class",
	"description": "Rename Class org.geoserver.importer.transform.AbstractVectorTransform renamed to org.geoserver.importer.transform.AbstractTransform",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.geoserver.importer.transform.PostVectorTransform renamed to org.geoserver.importer.transform.PostTransform",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.geoserver.importer.transform.PreVectorTransform renamed to org.geoserver.importer.transform.PreTransform",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable fileList : File[] in method public prepare(m ProgressMonitor) : void from class org.geoserver.importer.Directory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public pre(item ImportTask, data ImportData) : void from class org.geoserver.importer.transform.VectorTransformChain to public pre(item ImportTask, data ImportData) : void from class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public post(task ImportTask, data ImportData) : void from class org.geoserver.importer.transform.VectorTransformChain to public post(task ImportTask, data ImportData) : void from class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type tx : VectorTransform to tx : ImportTransform in method protected error(tx ImportTransform, e Exception) : void in class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method package error(tx VectorTransform, e Exception) : void from class org.geoserver.importer.transform.VectorTransformChain to protected error(tx ImportTransform, e Exception) : void from class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type transforms : List<VectorTransform> to transforms : List<? extends ImportTransform> in method protected filter(transforms List<? extends ImportTransform>, type Class<T>) : List<T> in class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method package filter(transforms List<VectorTransform>, type Class<T>) : List<T> from class org.geoserver.importer.transform.VectorTransformChain to protected filter(transforms List<? extends ImportTransform>, type Class<T>) : List<T> from class org.geoserver.importer.transform.TransformChain",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/BuildCraft/BuildCraft.git",
	"sha1": "a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0",
	"url": "https://github.com/BuildCraft/BuildCraft/commit/a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type StackRequest to ItemStack in method public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter i : int to slot : int in method public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getAvailableRequest(i int) : StackRequest renamed to public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter i : int to slot : int in method public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type request : StackRequest to requestStack : ItemStack in method public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable request : StackRequest to requestStack : ItemStack in method public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getRequest(index int) : ItemStack renamed to public getRequestTemplate(index int) : ItemStack in class buildcraft.robotics.TileRequester",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.robotics.TileRequester",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(i int, stack ItemStack) : ItemStack in class buildcraft.robotics.TileRequester",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getAvailableRequests(station DockingStation) : Collection<StackRequest> extracted from private getOrderFromRequestingStation(station DockingStation, take boolean) : StackRequest in class buildcraft.robotics.ai.AIRobotSearchStackRequest",
	"motivations": [ 
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private releaseCurrentRequest() : void extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.boards.BoardRobotDelivery",
	"motivations": [ 
	{ 
		       "label": "EM: Facilitate extension",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private releaseCurrentRequest() : void extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.boards.BoardRobotDelivery",
	"motivations": [ 
	{ 
		       "label": "EM: Facilitate extension",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private releaseCurrentRequest() : void extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.boards.BoardRobotDelivery",
	"motivations": [ 
	{ 
		       "label": "EM: Facilitate extension",
                "status": "match1"
	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute public index : BlockIndex from class buildcraft.api.robots.ResourceId to public index : BlockIndex from class buildcraft.api.robots.ResourceIdBlock",
	"motivations": [ 
	{ 
                "label": "DA: Specialized implementation",
                "status": "match2"
	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute public side : ForgeDirection from class buildcraft.api.robots.ResourceId to public side : ForgeDirection from class buildcraft.api.robots.ResourceIdBlock",
	"motivations": [ 
	{ 
                "label": "DA: Specialized implementation",
                "status": "match2"
	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute public index : BlockIndex from class buildcraft.api.robots.ResourceId to private index : BlockIndex from class buildcraft.api.robots.ResourceIdRequest",
	"motivations": [ 
	{ 
                "label": "DA: Specialized implementation",
                "status": "match2"
	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute public side : ForgeDirection from class buildcraft.api.robots.ResourceId to private side : ForgeDirection from class buildcraft.api.robots.ResourceIdRequest",
	"motivations": [ 
	{ 
                "label": "DA: Specialized implementation",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public station : DockingStation from class buildcraft.api.robots.StackRequest to public station : DockingStation from class buildcraft.robotics.ai.AIRobotSearchStackRequest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceId to public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdBlock",
	"motivations": [ 
	{ 
                "label": "DM: Specialized implementation",
                "status": "match2"
	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceId to public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdRequest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method protected readFromNBT(nbt NBTTagCompound) : void from class buildcraft.api.robots.ResourceId to protected readFromNBT(nbt NBTTagCompound) : void from class buildcraft.api.robots.ResourceIdBlock",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getAvailableRequest(i int) : StackRequest renamed to public getRequest(slot int) : ItemStack in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type StackRequest to ItemStack in method public getRequest(slot int) : ItemStack in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter i : int to slot : int in method public getRequest(slot int) : ItemStack in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter i : int to slot : int in method public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.api.robots.IRequestProvider",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/FasterXML/jackson-databind.git",
	"sha1": "cfe88fe3fbcc6b02ca55cee7b1f4ab13e249edea",
	"url": "https://github.com/FasterXML/jackson-databind/commit/cfe88fe3fbcc6b02ca55cee7b1f4ab13e249edea",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected classForName(name String, initialize boolean, loader ClassLoader) : Class<?> extracted from public findClass(className String) : Class<?> in class com.fasterxml.jackson.databind.type.TypeFactory",
	"motivations": [ 
	{ 
                "label": "EM: Improve testability",
                "status": "match1"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter className : String to name : String in method protected classForName(name String, initialize boolean, loader ClassLoader) : Class<?> in class com.fasterxml.jackson.databind.type.TypeFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected classForName(name String) : Class<?> extracted from public findClass(className String) : Class<?> in class com.fasterxml.jackson.databind.type.TypeFactory",
	"motivations": [ 
	{ 
                "label": "EM: Improve testability",
                "status": "match1"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter className : String to name : String in method protected classForName(name String) : Class<?> in class com.fasterxml.jackson.databind.type.TypeFactory",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/linkedin/rest.li.git",
	"sha1": "54fa890a6af4ccf564fb481d3e1b6ad4d084de9e",
	"url": "https://github.com/linkedin/rest.li/commit/54fa890a6af4ccf564fb481d3e1b6ad4d084de9e",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private shouldCompressResponse(operation String) : boolean renamed to private shouldCompressResponseForOperation(operation String) : boolean in class com.linkedin.r2.filter.compression.ClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addResponseCompressionHeaders(responseCompressionOverride CompressionOption, req RestRequest) : RestRequest extracted from public onRestRequest(req RestRequest, requestContext RequestContext, wireAttrs Map<String,String>, nextFilter NextFilter<RestRequest,RestResponse>) : void in class com.linkedin.r2.filter.compression.ClientCompressionFilter",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable builder : RestRequestBuilder in method public addResponseCompressionHeaders(responseCompressionOverride CompressionOption, req RestRequest) : RestRequest from class com.linkedin.r2.filter.compression.ClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Attribute",
	"description": "Extract Attribute private EMPTY : String in class com.linkedin.r2.filter.compression.ServerCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable responseCompression : String to responseAcceptedEncodings : String in method public onRestRequest(req RestRequest, requestContext RequestContext, wireAttrs Map<String,String>, nextFilter NextFilter<RestRequest,RestResponse>) : void in class com.linkedin.r2.filter.compression.ServerCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable responseCompression : String to responseAcceptedEncodings : String in method public onRestResponse(res RestResponse, requestContext RequestContext, wireAttrs Map<String,String>, nextFilter NextFilter<RestRequest,RestResponse>) : void in class com.linkedin.r2.filter.compression.ServerCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private provideRequestData() : Object[][] renamed to private provideRequestCompressionData() : Object[][] in class com.linkedin.r2.filter.compression.TestClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type shouldBePresent : boolean to expectedValue : String in method public HeaderCaptureFilter(headerName String, expectedValue String) in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter shouldBePresent : boolean to expectedValue : String in method public HeaderCaptureFilter(headerName String, expectedValue String) in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type shouldBePresent : boolean to expectedValue : String in method public HeaderCaptureFilter(headerName String, expectedValue String, entityLength int) in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter shouldBePresent : boolean to expectedValue : String in method public HeaderCaptureFilter(headerName String, expectedValue String, entityLength int) in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute _shouldBePresent : boolean to _expectedValue : String in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type _shouldBePresent : boolean to _expectedValue : String in class com.linkedin.r2.filter.compression.TestClientCompressionFilter.HeaderCaptureFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method package getCompressionConfig(httpServiceName String, requestContentEncodingName String) : CompressionConfig renamed to package getRequestCompressionConfig(httpServiceName String, requestContentEncoding EncodingType) : CompressionConfig in class com.linkedin.r2.transport.http.client.HttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type String to EncodingType in method private getRequestContentEncoding(serverSupportedEncodings List<String>) : EncodingType in class com.linkedin.r2.transport.http.client.HttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private getRequestContentEncodingName(serverSupportedEncodings List<String>) : String renamed to private getRequestContentEncoding(serverSupportedEncodings List<String>) : EncodingType in class com.linkedin.r2.transport.http.client.HttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type requestContentEncodingName : String to requestContentEncoding : EncodingType in method private getClient(properties Map<String,? extends Object>, sslContext SSLContext, sslParameters SSLParameters) : TransportClient in class com.linkedin.r2.transport.http.client.HttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable requestContentEncodingName : String to requestContentEncoding : EncodingType in method private getClient(properties Map<String,? extends Object>, sslContext SSLContext, sslParameters SSLParameters) : TransportClient in class com.linkedin.r2.transport.http.client.HttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testGetCompressionConfig(serviceName String, requestCompressionThresholdDefault int, expectedConfig CompressionConfig) : void renamed to public testGetRequestCompressionConfig(serviceName String, requestCompressionThresholdDefault int, expectedConfig CompressionConfig) : void in class com.linkedin.r2.transport.http.client.TestHttpClientFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [contentType : ContentType, acceptTypes : List<AcceptType>, requestCompressionOverride : CompressionOption] to requestOptions : RestliRequestOptions in method private sendRequestImpl(requestContext RequestContext, uri URI, method ResourceMethod, dataMap DataMap, headers Map<String,String>, methodName String, protocolVersion ProtocolVersion, requestOptions RestliRequestOptions, callback Callback<RestResponse>) : void in class com.linkedin.restli.client.RestClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter obj : Object to o : Object in method public equals(o Object) : boolean in class com.linkedin.restli.client.RestliRequestOptions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable other : RestliRequestOptions to that : RestliRequestOptions in method public equals(o Object) : boolean in class com.linkedin.restli.client.RestliRequestOptions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public createServer(engine Engine, port int, supportedCompression String, useAsyncServletApi boolean, asyncTimeOut int, requestFilters List<? extends RequestFilter>, responseFilters List<? extends ResponseFilter>) : HttpServer inlined to public createServer(engine Engine, port int, supportedCompression String, useAsyncServletApi boolean, asyncTimeOut int) : HttpServer in class com.linkedin.restli.examples.RestLiIntTestServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void extracted from public testCompatibleDefault(acceptEncoding String, contentEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable get : HttpGet to getMessage : HttpGet in method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void extracted from public testCompressionBetter(compressor Compressor) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable get : HttpGet to getMessage : HttpGet in method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void extracted from public testCompressionWorse(compressor Compressor) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable get : HttpGet to getMessage : HttpGet in method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void extracted from public testAcceptEncoding(acceptedEncoding String, contentEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable get : HttpGet to getMessage : HttpGet in method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void extracted from public test406Error(acceptContent String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable get : HttpGet to getMessage : HttpGet in method public addCompressionHeaders(getMessage HttpGet, acceptEncoding String) : void in class com.linkedin.restli.examples.TestCompressionServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public shouldCompressRequest(entityLength int, requestCompressionOverride CompressionOption) : boolean from class com.linkedin.r2.filter.CompressionConfig to private shouldCompressRequest(entityLength int, requestCompressionOverride CompressionOption) : boolean from class com.linkedin.r2.filter.compression.ClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public contentEncodingGeneratorDataProvider() : Object[][] from class com.linkedin.restli.examples.TestCompressionServer to public contentEncodingGeneratorDataProvider() : Object[][] from class com.linkedin.r2.filter.compression.TestClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testEncodingGeneration(encoding EncodingType[], acceptEncoding String) : void from class com.linkedin.restli.examples.TestCompressionServer to public testEncodingGeneration(encoding EncodingType[], acceptEncoding String) : void from class com.linkedin.r2.filter.compression.TestClientCompressionFilter",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/open-keychain/open-keychain.git",
	"sha1": "c11fef6e7c80681ce69e5fdc7f4796b0b7a18e2b",
	"url": "https://github.com/open-keychain/open-keychain/commit/c11fef6e7c80681ce69e5fdc7f4796b0b7a18e2b",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public displayInputFragment(showOpenDialog boolean) : void extracted from private handleActions(savedInstanceState Bundle, intent Intent) : void in class org.sufficientlysecure.keychain.ui.DecryptFilesActivity",
	"motivations": [ 
	{ 
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected cryptoOperation(cryptoInput CryptoInputParcel, showProgress boolean) : void extracted from protected cryptoOperation(cryptoInput CryptoInputParcel) : void in class org.sufficientlysecure.keychain.ui.base.CryptoOperationFragment",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	},
	{
	            "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/baasbox/baasbox.git",
	"sha1": "d949fe9079a82ee31aa91244aa67baaf56b7e28f",
	"url": "https://github.com/baasbox/baasbox/commit/d949fe9079a82ee31aa91244aa67baaf56b7e28f",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public execMultiLineCommands(db ODatabaseRecordTx, log boolean, stopOnException boolean, commands String...) : void extracted from public execMultiLineCommands(db ODatabaseRecordTx, log boolean, commands String...) : void in class com.baasbox.db.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/phishman3579/java-algorithms-implementation.git",
	"sha1": "f2385a56e6aa040ea4ff18a23ce5b63a4eeacf29",
	"url": "https://github.com/phishman3579/java-algorithms-implementation/commit/f2385a56e6aa040ea4ff18a23ce5b63a4eeacf29",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putOutTheGarbage() : void extracted from public main(args String[]) : void in class com.jwetherell.algorithms.sorts.timing.SortsTiming",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/abarisain/dmix.git",
	"sha1": "885771d57c97bd2dd48951e8aeaaa87ceb87532b",
	"url": "https://github.com/abarisain/dmix/commit/885771d57c97bd2dd48951e8aeaaa87ceb87532b",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method package processIntent(action String, mpd MPD) : void inlined to protected onHandleIntent(intent Intent) : void in class com.namelessdev.mpdroid.widgets.WidgetHelperService",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type mpd : MPD to status : MPDStatus in method protected onHandleIntent(intent Intent) : void in class com.namelessdev.mpdroid.widgets.WidgetHelperService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable mpd : MPD to status : MPDStatus in method protected onHandleIntent(intent Intent) : void in class com.namelessdev.mpdroid.widgets.WidgetHelperService",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/grails/grails-core.git",
	"sha1": "480537e0f8aaf50a7648bf445b33230aa32a9b44",
	"url": "https://github.com/grails/grails-core/commit/480537e0f8aaf50a7648bf445b33230aa32a9b44",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public weaveTestMixins(classNode ClassNode, values ListExpression, applicationClassNode ClassNode) : void extracted from public weaveTestMixins(classNode ClassNode, values ListExpression) : void in class org.grails.compiler.injection.test.TestMixinTransformation",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public weaveMixinsIntoClass(classNode ClassNode, values ListExpression, applicationClassNode ClassNode) : void extracted from public weaveMixinsIntoClass(classNode ClassNode, values ListExpression) : void in class org.grails.compiler.injection.test.TestMixinTransformation",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/cwensel/cascading.git",
	"sha1": "f9d3171f5020da5c359cdda28ef05172e858c464",
	"url": "https://github.com/cwensel/cascading/commit/f9d3171f5020da5c359cdda28ef05172e858c464",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected logWarn(message String, arguments Object...) : void extracted from protected fireListeners(fromStatus CascadingStats.Status, toStatus CascadingStats.Status) : void in class cascading.stats.CascadingStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable sliceStats : HadoopSliceStats in method protected addTaskStats(taskReports TaskReport[], skipLast boolean) : void from class cascading.stats.hadoop.HadoopNodeStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable sliceStats : HadoopSliceStats in method protected addTaskStats(taskReports TaskReport[], skipLast boolean) : void from class cascading.stats.hadoop.HadoopNodeStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move And Rename Attribute",
	"description": "Move And Rename Attribute private allTasksAreFinished : boolean renamed to protected allChildrenFinished : boolean and moved from class cascading.stats.tez.TezNodeStats to class cascading.stats.hadoop.BaseHadoopNodeStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private prefixID : String from class cascading.stats.tez.TezNodeStats to private prefixID : String from class cascading.stats.CascadingStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method protected logInfo(message String, arguments Object...) : void from class cascading.stats.tez.TezNodeStats to protected logInfo(message String, arguments Object...) : void from class cascading.stats.CascadingStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method protected logDebug(message String, arguments Object...) : void from class cascading.stats.tez.TezNodeStats to protected logDebug(message String, arguments Object...) : void from class cascading.stats.CascadingStats",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method protected logWarn(message String, arguments Object...) : void from class cascading.stats.tez.TezNodeStats to protected logWarn(message String, arguments Object...) : void from class cascading.stats.CascadingStats",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-plugins.git",
	"sha1": "0df7cb00757fe0d4fac8d8b0d5fc46af95feb238",
	"url": "https://github.com/JetBrains/intellij-plugins/commit/0df7cb00757fe0d4fac8d8b0d5fc46af95feb238",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public findPsiFile(project Project, path String) : PsiFile extracted from private getElementForNavigationTarget(project Project, target PluginNavigationTarget) : PsiElement in class com.jetbrains.lang.dart.resolve.DartResolver",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable targetPath : String to path : String in method public findPsiFile(project Project, path String) : PsiFile in class com.jetbrains.lang.dart.resolve.DartResolver",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/giraph.git",
	"sha1": "03ade425dd5a65d3a713d5e7d85aa7605956fbd2",
	"url": "https://github.com/apache/giraph/commit/03ade425dd5a65d3a713d5e7d85aa7605956fbd2",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.apache.giraph.partition.DiskBackedPartitionStore moved to org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type partition : Partition<LongWritable,?,?> to partition : Partition in method private populateMap() : void in class org.apache.giraph.comm.messages.primitives.long_id.LongAbstractListMessageStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type void to boolean in method public abstract addPartition(partition Partition<I,V,E>) : boolean in class org.apache.giraph.partition.PartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type void to boolean in method public addPartition(partition Partition<I,V,E>) : boolean in class org.apache.giraph.partition.SimplePartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public getPartitionVertexCount(partitionId Integer) : long in class org.apache.giraph.partition.SimplePartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public getPartitionEdgeCount(partitionId Integer) : long in class org.apache.giraph.partition.SimplePartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type partitionId : int to partitionIds : List<Integer> in method private testMultiThreaded() : void in class org.apache.giraph.partition.TestPartitionStores",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable partitionId : int to partitionIds : List<Integer> in method private testMultiThreaded() : void in class org.apache.giraph.partition.TestPartitionStores",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute NUM_OF_VERTEXES_PER_THREAD : int to NUM_OF_VERTEXES_PER_PARTITION : int in class org.apache.giraph.partition.TestPartitionStores",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter partitionId : int to partitionIds : List<Integer> in method public Worker(vertexCounter AtomicInteger, partitionStore PartitionStore<IntWritable,IntWritable,NullWritable>, partitionIds List<Integer>, conf ImmutableClassesGiraphConfiguration<IntWritable,IntWritable,NullWritable>) in class org.apache.giraph.partition.TestPartitionStores.Worker",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionIds : List<Integer> in method public Worker(vertexCounter AtomicInteger, partitionStore PartitionStore<IntWritable,IntWritable,NullWritable>, partitionIds List<Integer>, conf ImmutableClassesGiraphConfiguration<IntWritable,IntWritable,NullWritable>) in class org.apache.giraph.partition.TestPartitionStores.Worker",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute partitionId : int to partitionIds : List<Integer> in class org.apache.giraph.partition.TestPartitionStores.Worker",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type partitionId : int to partitionIds : List<Integer> in class org.apache.giraph.partition.TestPartitionStores.Worker",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type maxPartitionsInMem : int to maxPartitionsInMem : AtomicInteger in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private putPartition(meta MetaPartition) : void inlined to public putPartition(partition Partition<I,V,E>) : void in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable numInputThreads : int to userMaxNumPartitions : int in method public DiskBackedPartitionStore(conf ImmutableClassesGiraphConfiguration<I,V,E>, context Mapper<?,?,?,?>, serviceWorker CentralizedServiceWorker<I,V,E>) in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public getPartitionVertexCount(partitionId Integer) : long in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public getPartitionEdgeCount(partitionId Integer) : long in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Integer to partitionId : Integer in method public removePartition(partitionId Integer) : Partition<I,V,E> in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type void to boolean in method public addPartition(partition Partition<I,V,E>) : boolean in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable e : MetaPartition to meta : MetaPartition in method public shutdown() : void in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable partitionId : int in method private offloadPartition(meta MetaPartition) : void from class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type numVertices : long to partitionId : int in method private getPartition(meta MetaPartition) : void in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable numVertices : long to partitionId : int in method private getPartition(meta MetaPartition) : void in class org.apache.giraph.ooc.DiskBackedPartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute isSticky : boolean to isProcessed : boolean in class org.apache.giraph.ooc.DiskBackedPartitionStore.MetaPartition",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private edgeStore : EdgeStore<I,V,E> from class org.apache.giraph.comm.ServerData to private edgeStore : EdgeStore<I,V,E> from class org.apache.giraph.partition.SimplePartitionStore",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public moveEdgesToVertices() : void extracted from public setup() : FinishedSuperstepStats in class org.apache.giraph.worker.BspServiceWorker & moved to class org.apache.giraph.partition.SimplePartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public abstract getPartitionVertexCount(partitionId Integer) : long in class org.apache.giraph.partition.PartitionStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type partitionId : int to partitionId : Integer in method public abstract getPartitionEdgeCount(partitionId Integer) : long in class org.apache.giraph.partition.PartitionStore",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/siacs/Conversations.git",
	"sha1": "e6cb12dfe414497b4317820497985c110cb81864",
	"url": "https://github.com/siacs/Conversations/commit/e6cb12dfe414497b4317820497985c110cb81864",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getItemViewType(message Message) : int extracted from public getItemViewType(position int) : int in class eu.siacs.conversations.ui.adapter.MessageAdapter",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable layoutParams : LinearLayout.LayoutParams in method private displayImageMessage(viewHolder ViewHolder, message Message) : void from class eu.siacs.conversations.ui.adapter.MessageAdapter",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Netflix/eureka.git",
	"sha1": "f6212a7e474f812f31ddbce6d4f7a7a0d498b751",
	"url": "https://github.com/Netflix/eureka/commit/f6212a7e474f812f31ddbce6d4f7a7a0d498b751",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected onRemoteStatusChanged(oldStatus InstanceInfo.InstanceStatus, newStatus InstanceInfo.InstanceStatus) : void extracted from private updateInstanceRemoteStatus() : void in class com.netflix.discovery.DiscoveryClient",
	"motivations": [ 
	{ 
                "label": "EM: Enable overriding",
                "status": "match1"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable currentRemoteInstanceStatus : InstanceInfo.InstanceStatus to newStatus : InstanceInfo.InstanceStatus in method protected onRemoteStatusChanged(oldStatus InstanceInfo.InstanceStatus, newStatus InstanceInfo.InstanceStatus) : void in class com.netflix.discovery.DiscoveryClient",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Netflix/eureka.git",
	"sha1": "5103ace802b2819438318dd53b5b07512aae0d25",
	"url": "https://github.com/Netflix/eureka/commit/5103ace802b2819438318dd53b5b07512aae0d25",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public fillUpRegistryOfServer(serverIdx int, count int, instanceTemplate InstanceInfo) : void extracted from public fillUpRegistry(count int, instanceTemplate InstanceInfo) : void in class com.netflix.eureka2.integration.EurekaDeploymentClients",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testRegistrationAndDiscoveryServices() : void renamed to public testRegistrationAndInterestServices() : void in class com.netflix.eureka2.testkit.embedded.server.EmbeddedWriteServerTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/scobal/seyren.git",
	"sha1": "5fb36a321af7df470d4c845cb18da8f85be31c38",
	"url": "https://github.com/scobal/seyren/commit/5fb36a321af7df470d4c845cb18da8f85be31c38",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private evaluateTemplate(check Check, subscription Subscription, alerts List<Alert>, templateContent String) : String extracted from public createBody(check Check, subscription Subscription, alerts List<Alert>) : String in class com.seyren.core.util.velocity.VelocityEmailHelper",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/wicketstuff/core.git",
	"sha1": "8ea46f48063c38473c12ca7c114106ca910b6e74",
	"url": "https://github.com/wicketstuff/core/commit/8ea46f48063c38473c12ca7c114106ca910b6e74",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private testRenderedTab() : void extracted from public renderSimpleTab() : void in class org.wicketstuff.foundation.tab.FoundationTabTest",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-integration.git",
	"sha1": "4cca684f368d3ff719c62d3fa4cac3cdb7828bff",
	"url": "https://github.com/spring-projects/spring-integration/commit/4cca684f368d3ff719c62d3fa4cac3cdb7828bff",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.springframework.integration.codec.CompositeCodecTests moved to org.springframework.integration.codec.kryo.CompositeCodecTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.springframework.integration.mail.config.ImapIdelIntegrationTests renamed to org.springframework.integration.mail.config.ImapIdleIntegrationTests",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-integration.git",
	"sha1": "ec5230abc7500734d7b78a176c291378e100a927",
	"url": "https://github.com/spring-projects/spring-integration/commit/ec5230abc7500734d7b78a176c291378e100a927",
	"refactorings": [{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type connectionFactory : AbstractConnectionFactory to connectionFactory : AbstractClientConnectionFactory in method public setConnectionFactory(connectionFactory AbstractClientConnectionFactory) : void in class org.springframework.integration.ip.tcp.TcpOutboundGateway",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute singleUseConnection : boolean to isSingleUse : boolean in method protected handleRequestMessage(requestMessage Message<?>) : Object in class org.springframework.integration.ip.tcp.TcpOutboundGateway",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type void to TcpConnection in method protected doWrite(message Message<?>) : TcpConnection in class org.springframework.integration.ip.tcp.TcpSendingMessageHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type connections : List<TcpConnectionSupport> to connections : Map<String,TcpConnectionSupport> in class org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type iterator : Iterator<TcpConnectionSupport> to iterator : Iterator<Entry<String,TcpConnectionSupport>> in method public stop() : void in class org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type iterator : Iterator<TcpConnectionSupport> to iterator : Iterator<Entry<String,TcpConnectionSupport>> in method private removeClosedConnectionsAndReturnOpenConnectionIds() : List<String> in class org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private doClose() : void inlined to public close() : void in class org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory.CachedConnection",
	"motivations": [ 
	{ 
                "label": "IM: Caller becomes trivial",
                "status": "add"
	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ccf : AbstractConnectionFactory to ccf : AbstractClientConnectionFactory in method private testGoodNetGWTimeoutGuts(port int, ccf AbstractClientConnectionFactory) : void in class org.springframework.integration.ip.tcp.TcpOutboundGatewayTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type ccf : AbstractConnectionFactory to ccf : AbstractClientConnectionFactory in method public testGoodNetSingle() : void in class org.springframework.integration.ip.tcp.TcpOutboundGatewayTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type ccf : AbstractConnectionFactory to ccf : AbstractClientConnectionFactory in method public testGoodNetMultiplex() : void in class org.springframework.integration.ip.tcp.TcpOutboundGatewayTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type ccf : AbstractConnectionFactory to ccf : AbstractClientConnectionFactory in method public testGoodNetTimeout() : void in class org.springframework.integration.ip.tcp.TcpOutboundGatewayTests",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/orfjackal/retrolambda.git",
	"sha1": "46b0d84de9c309bca48a99e572e6611693ed5236",
	"url": "https://github.com/orfjackal/retrolambda/commit/46b0d84de9c309bca48a99e572e6611693ed5236",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter inputFile : Path to file : Path in method public visitFile(file Path, attrs BasicFileAttributes) : FileVisitResult in class net.orfjackal.retrolambda.files.BytecodeFileVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public save(bytecode byte[]) : void renamed to public saveClass(bytecode byte[]) : void in class net.orfjackal.retrolambda.files.ClassSaver",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public saveResource(relativePath Path, content byte[]) : void extracted from public save(bytecode byte[]) : void in class net.orfjackal.retrolambda.files.ClassSaver",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/raphw/byte-buddy.git",
	"sha1": "f1dfb66a368760e77094ac1e3860b332cf0e4eb5",
	"url": "https://github.com/raphw/byte-buddy/commit/f1dfb66a368760e77094ac1e3860b332cf0e4eb5",
	"refactorings": [{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.ForLoadedExecutable to protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.AbstractBase",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.ForLoadedExecutable.OfLegacyVmMethod to protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.AbstractBase",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.ForLoadedExecutable.OfLegacyVmConstructor to protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.AbstractBase",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.Explicit to protected wrap(values List<ParameterDescription>) : ParameterList from class net.bytebuddy.description.method.ParameterList.AbstractBase",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/liferay/liferay-plugins.git",
	"sha1": "7c7ecf4cffda166938efd0ae34830e2979c25c73",
	"url": "https://github.com/liferay/liferay-plugins/commit/7c7ecf4cffda166938efd0ae34830e2979c25c73",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected updateSyncDLObject(syncDLObject SyncDLObject) : void extracted from public onAfterUpdate(resourcePermission ResourcePermission) : void in class com.liferay.sync.hook.listeners.ResourcePermissionModelListener",
	"motivations": [ 
	{ 
                "label": "EM: Enable recursion",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/jenkinsci/workflow-plugin.git",
	"sha1": "d0e374ce8ecb687b4dc046d1edea9e52da17706f",
	"url": "https://github.com/jenkinsci/workflow-plugin/commit/d0e374ce8ecb687b4dc046d1edea9e52da17706f",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method private setBranch(property BranchJobProperty, branch Branch, project WorkflowJob) : void inlined to public setBranch(project WorkflowJob, branch Branch) : WorkflowJob in class org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable sa : ScriptApproval in method public evaluate() : void from class org.jenkinsci.plugins.workflow.multibranch.SCMBinderTest.exactRevision.addStep",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute package SCRIPT : String from class org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory to package SCRIPT : String from class org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/gwtproject/gwt.git",
	"sha1": "22fb2c9c6974bd1fe0f6ff684f52e6cfbed1a387",
	"url": "https://github.com/gwtproject/gwt/commit/22fb2c9c6974bd1fe0f6ff684f52e6cfbed1a387",
	"refactorings": [{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type type : JType to type : JDeclaredType in method private isTypeInstantiatedOrJso(type JDeclaredType) : boolean in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to void in method private rescueArgumentsIfParametersCanBeRead(call JMethodCall) : void in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private rescueMembersIfInstantiable(type JDeclaredType) : void renamed to private rescueMembers(type JDeclaredType) : void in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private rescueAndInstantiate(type JClassType) : void inlined to public visit(x JNewInstance, ctx Context) : boolean in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private rescueAndInstantiate(type JClassType) : void inlined to public visit(x JsniMethodRef, ctx Context) : boolean in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private rescueMembersAndInstantiateSuperInterfaces(type JDeclaredType) : void extracted from public visit(type JClassType, ctx Context) : boolean in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private rescueMembersAndInstantiateSuperInterfaces(type JDeclaredType) : void extracted from public visit(type JInterfaceType, ctx Context) : boolean in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable enclosingType : JDeclaredType in method private rescue(method JMethod) : void from class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable dtype : JDeclaredType to declaredType : JDeclaredType in method private rescue(type JReferenceType, isInstantiated boolean) : void in class com.google.gwt.dev.jjs.impl.ControlFlowAnalyzer.RescueVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public _disabled_testJsTypeArray_returnFromNativeWithACall() : void renamed to public testJsTypeArray_returnFromNativeWithACall() : void in class com.google.gwt.core.client.interop.JsTypeArrayTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public _disabled_testJsTypeArray_asAField() : void renamed to public __disabled__testJsTypeArray_asAField() : void in class com.google.gwt.core.client.interop.JsTypeArrayTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public _disabled_testJsType3DimArray_castedFromNativeWithACall() : void renamed to public __disabled__testJsType3DimArray_castedFromNativeWithACall() : void in class com.google.gwt.core.client.interop.JsTypeArrayTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/truth.git",
	"sha1": "200f1577d238a6d3fbcf99cb2a2585b2071214a6",
	"url": "https://github.com/google/truth/commit/200f1577d238a6d3fbcf99cb2a2585b2071214a6",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public isOrdered(comparator Comparator<? super T>) : void extracted from public isPartiallyOrdered(comparator Comparator<? super T>) : void in class com.google.common.truth.IterableSubject",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public listIsPartiallyOrdered() : void renamed to public listIsOrdered() : void in class com.google.common.truth.ListTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public isPartiallyOrderedFailure() : void renamed to public isOrderedFailure() : void in class com.google.common.truth.ListTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public isPartiallyOrderedWithNonComparableElementsFailure() : void renamed to public isOrderedWithNonComparableElementsFailure() : void in class com.google.common.truth.ListTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public listIsPartiallyOrderedWithComparator() : void renamed to public listIsOrderedWithComparator() : void in class com.google.common.truth.ListTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public listIsPartiallyOrderedWithComparatorFailure() : void renamed to public listIsOrderedWithComparatorFailure() : void in class com.google.common.truth.ListTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/truth.git",
	"sha1": "1768840bf1e69892fd2a23776817f620edfed536",
	"url": "https://github.com/google/truth/commit/1768840bf1e69892fd2a23776817f620edfed536",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.google.common.truth.ListTest.Foo moved to com.google.common.truth.IterableTest.Foo",
	"motivations": [ 
	{ 
                "label": "MC: Remove inner classes from deprecated container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.google.common.truth.ListTest.Bar moved to com.google.common.truth.IterableTest.Bar",
	"motivations": [ 
	{ 
                "label": "MC: Remove inner classes from deprecated container",
                "status": "match1"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public listContainsExactlyArray() : void renamed to public iterableContainsExactlyArray() : void in class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private COMPARE_AS_DECIMAL : Comparator<String> from class com.google.common.truth.ListTest to private COMPARE_AS_DECIMAL : Comparator<String> from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private FOO_COMPARATOR : Comparator<Foo> from class com.google.common.truth.ListTest to private FOO_COMPARATOR : Comparator<Foo> from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public isStrictlyOrderedFailure() : void from class com.google.common.truth.ListTest to public isStrictlyOrderedFailure() : void from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public isStrictlyOrderedWithNonComparableElementsFailure() : void from class com.google.common.truth.ListTest to public isStrictlyOrderedWithNonComparableElementsFailure() : void from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public isOrderedFailure() : void from class com.google.common.truth.ListTest to public isOrderedFailure() : void from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public isOrderedWithNonComparableElementsFailure() : void from class com.google.common.truth.ListTest to public isOrderedWithNonComparableElementsFailure() : void from class com.google.common.truth.IterableTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/antlr/antlr4.git",
	"sha1": "b395127e733b33c27f344695ebf155ecf5edeeab",
	"url": "https://github.com/antlr/antlr4/commit/b395127e733b33c27f344695ebf155ecf5edeeab",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.BasicFontMetrics moved to org.antlr.v4.gui.BasicFontMetrics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.PostScriptDocument moved to org.antlr.v4.gui.PostScriptDocument",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.SystemFontMetrics moved to org.antlr.v4.gui.SystemFontMetrics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.TreeLayoutAdaptor moved to org.antlr.v4.gui.TreeLayoutAdaptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.TreePostScriptGenerator moved to org.antlr.v4.gui.TreePostScriptGenerator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.TreeTextProvider moved to org.antlr.v4.gui.TreeTextProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.tree.gui.TreeViewer moved to org.antlr.v4.gui.TreeViewer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.misc.GraphicsSupport moved to org.antlr.v4.gui.GraphicsSupport",
	"motivations": [ 
	{ 
                "label": "MC: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.misc.JFileChooserConfirmOverwrite moved to org.antlr.v4.gui.JFileChooserConfirmOverwrite",
	"motivations": [ 
	{ 
                "label": "MC: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.antlr.v4.runtime.misc.TestRig moved to org.antlr.v4.gui.TestRig",
	"motivations": [ 
	{ 
                "label": "MC: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public toStringTree(t Tree, nodeTextProvider TreeTextProvider) : String inlined to public toStringTree(t Tree, ruleNames List<String>) : String in class org.antlr.v4.runtime.tree.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Class",
	"description": "Extract Class org.antlr.v4.gui.Trees from class org.antlr.v4.runtime.tree.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public getPS(t Tree, ruleNames List<String>, fontName String, fontSize int) : String from class org.antlr.v4.runtime.tree.Trees to public getPS(t Tree, ruleNames List<String>, fontName String, fontSize int) : String from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public getPS(t Tree, ruleNames List<String>) : String from class org.antlr.v4.runtime.tree.Trees to public getPS(t Tree, ruleNames List<String>) : String from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public writePS(t Tree, ruleNames List<String>, fileName String, fontName String, fontSize int) : void from class org.antlr.v4.runtime.tree.Trees to public writePS(t Tree, ruleNames List<String>, fileName String, fontName String, fontSize int) : void from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public writePS(t Tree, ruleNames List<String>, fileName String) : void from class org.antlr.v4.runtime.tree.Trees to public writePS(t Tree, ruleNames List<String>, fileName String) : void from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public inspect(parser Parser) : Future<JDialog> from class org.antlr.v4.runtime.RuleContext to public inspect(t Tree, parser Parser) : Future<JDialog> from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public inspect(ruleNames List<String>) : Future<JDialog> from class org.antlr.v4.runtime.RuleContext to public inspect(t Tree, ruleNames List<String>) : Future<JDialog> from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public save(parser Parser, fileName String) : void from class org.antlr.v4.runtime.RuleContext to public save(t Tree, parser Parser, fileName String) : void from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public save(parser Parser, fileName String, fontName String, fontSize int) : void from class org.antlr.v4.runtime.RuleContext to public save(t Tree, parser Parser, fileName String, fontName String, fontSize int) : void from class org.antlr.v4.gui.Trees",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/antlr/antlr4.git",
	"sha1": "a9ca2efae56815dc464189b055ffe9da23766f7f",
	"url": "https://github.com/antlr/antlr4/commit/a9ca2efae56815dc464189b055ffe9da23766f7f",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getDescendants(t ParseTree) : List<ParseTree> extracted from public descendants(t ParseTree) : List<ParseTree> in class org.antlr.v4.runtime.tree.Trees",
	"motivations": [ 
            {
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
            } ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public getAmbuityParserInterpreter(g Grammar, originalParser Parser, tokens TokenStream) : ParserInterpreter extracted from public getAllPossibleParseTrees(g Grammar, originalParser Parser, tokens TokenStream, decision int, alts BitSet, startIndex int, stopIndex int, startRuleIndex int) : List<ParserRuleContext> in class org.antlr.v4.tool.GrammarParserInterpreter",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "match2"
            }
	 ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testInterp(lg LexerGrammar, g Grammar, startRule String, input String, decision int, expectedAmbigAlts String, overallTree String, expectedParseTrees String[]) : void renamed to public testAmbiguousTrees(lg LexerGrammar, g Grammar, startRule String, input String, decision int, expectedAmbigAlts String, overallTree String, expectedParseTrees String[]) : void in class org.antlr.v4.test.tool.TestAmbigParseTrees",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-boot.git",
	"sha1": "becced5f0b7bac8200df7a5706b568687b517b90",
	"url": "https://github.com/spring-projects/spring-boot/commit/becced5f0b7bac8200df7a5706b568687b517b90",
	"refactorings": [{
	"type": "Extract Variable",
	"description": "Extract Variable message : String in method public onApplicationEvent(event SpringApplicationEvent) : void from class org.springframework.boot.actuate.system.ApplicationPidFileWriter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createEnvironment(propName String, propValue String) : ConfigurableEnvironment extracted from public differentEventTypes() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private mockPropertySource(name String, value String) : MockPropertySource extracted from public differentEventTypes() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createEnvironmentPreparedEvent(propName String, propValue String) : SpringApplicationEvent extracted from public differentEventTypes() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createEnvironment(propName String, propValue String) : ConfigurableEnvironment extracted from public overridePidFileWithSpring() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private mockPropertySource(name String, value String) : MockPropertySource extracted from public overridePidFileWithSpring() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createPreparedEvent(propName String, propValue String) : SpringApplicationEvent extracted from public overridePidFileWithSpring() : void in class org.springframework.boot.actuate.system.ApplicationPidFileWriterTests",
	"motivations": [ 
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
            },
            {
                "label": "EM: Extract reusable method",
                "status": "match2"
            } ]
},
{
	"type": "Move Method",
	"description": "Move Method private getEnvironment(event SpringApplicationEvent) : Environment from class org.springframework.boot.actuate.system.ApplicationPidFileWriter to private getEnvironment(event SpringApplicationEvent) : Environment from class org.springframework.boot.actuate.system.ApplicationPidFileWriter.SpringProperty",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-boot.git",
	"sha1": "20d39f7af2165c67d5221f556f58820c992d2cc6",
	"url": "https://github.com/spring-projects/spring-boot/commit/20d39f7af2165c67d5221f556f58820c992d2cc6",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getFullKey(path String, key String) : String extracted from private flatten(properties Properties, input Map<String,Object>, path String) : void in class org.springframework.boot.cloudfoundry.VcapApplicationListener",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable itemKey : String in method private flatten(properties Properties, input Map<String,Object>, path String) : void from class org.springframework.boot.cloudfoundry.VcapApplicationListener",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable map : Map<String,Object> in method private flatten(properties Properties, input Map<String,Object>, path String) : void from class org.springframework.boot.cloudfoundry.VcapApplicationListener",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable object : Object to item : Object in method private flatten(properties Properties, input Map<String,Object>, path String) : void in class org.springframework.boot.cloudfoundry.VcapApplicationListener",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-boot.git",
	"sha1": "1e464da2480568014a87dd0bac6febe63a76c889",
	"url": "https://github.com/spring-projects/spring-boot/commit/1e464da2480568014a87dd0bac6febe63a76c889",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter endpointPaths : String[] to permitAllMatcher : RequestMatcher in method private configureAuthorizeRequests(permitAllMatcher RequestMatcher, requests ExpressionUrlAuthorizationConfigurer<HttpSecurity>) : void in class org.springframework.boot.actuate.autoconfigure.ManagementSecurityAutoConfiguration.ManagementWebSecurityConfigurerAdapter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type endpointPaths : String[] to permitAllMatcher : RequestMatcher in method private configureAuthorizeRequests(permitAllMatcher RequestMatcher, requests ExpressionUrlAuthorizationConfigurer<HttpSecurity>) : void in class org.springframework.boot.actuate.autoconfigure.ManagementSecurityAutoConfiguration.ManagementWebSecurityConfigurerAdapter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private addStaticIndexHtmlViewControllers(registry ViewControllerRegistry) : void inlined to public addViewControllers(registry ViewControllerRegistry) : void in class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Class",
	"description": "Extract Class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private SERVLET_RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration to private SERVLET_RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private CLASSPATH_RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration to private CLASSPATH_RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration to private RESOURCE_LOCATIONS : String[] from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private STATIC_INDEX_HTML_RESOURCES : String[] from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration to private STATIC_INDEX_HTML_RESOURCES : String[] from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private resourceLoader : ResourceLoader from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration to private resourceLoader : ResourceLoader from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private mappingCustomizers : List<EndpointHandlerMappingCustomizer> from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.EndpointHandlerMappingConfiguration to private mappingCustomizers : List<EndpointHandlerMappingCustomizer> from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public endpointHandlerMapping() : EndpointHandlerMapping from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public endpointHandlerMapping() : EndpointHandlerMapping from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getCorsConfiguration(properties EndpointCorsProperties) : CorsConfiguration from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to private getCorsConfiguration(properties EndpointCorsProperties) : CorsConfiguration from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public mvcEndpoints() : MvcEndpoints from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public mvcEndpoints() : MvcEndpoints from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public environmentMvcEndpoint(delegate EnvironmentEndpoint) : EnvironmentMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public environmentMvcEndpoint(delegate EnvironmentEndpoint) : EnvironmentMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public healthMvcEndpoint(delegate HealthEndpoint) : HealthMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public healthMvcEndpoint(delegate HealthEndpoint) : HealthMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public metricsMvcEndpoint(delegate MetricsEndpoint) : MetricsMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public metricsMvcEndpoint(delegate MetricsEndpoint) : MetricsMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public logfileMvcEndpoint() : LogFileMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public logfileMvcEndpoint() : LogFileMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public shutdownMvcEndpoint(delegate ShutdownEndpoint) : ShutdownMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to public shutdownMvcEndpoint(delegate ShutdownEndpoint) : ShutdownMvcEndpoint from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private healthMvcEndpointProperties : HealthMvcEndpointProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to private healthMvcEndpointProperties : HealthMvcEndpointProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private managementServerProperties : ManagementServerProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to private managementServerProperties : ManagementServerProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private corsProperties : EndpointCorsProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to private corsProperties : EndpointCorsProperties from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private mappingCustomizers : List<EndpointHandlerMappingCustomizer> from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration to private mappingCustomizers : List<EndpointHandlerMappingCustomizer> from class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public setResourceLoader(resourceLoader ResourceLoader) : void from class org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration to public setResourceLoader(resourceLoader ResourceLoader) : void from class org.springframework.boot.autoconfigure.web.ResourceProperties",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-boot.git",
	"sha1": "1cfc6f64f64353bc5530a8ce8cdacfc3eba3e7b2",
	"url": "https://github.com/spring-projects/spring-boot/commit/1cfc6f64f64353bc5530a8ce8cdacfc3eba3e7b2",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type String[] to Set<String> in method private getPackagesToScan(metadata AnnotationMetadata) : Set<String> in class org.springframework.boot.orm.jpa.EntityScanRegistrar",
	"motivations": [ 
	]
},
{
	"type": "Extract Method",
	"description": "Extract Method private addEntityScanBeanPostProcessor(registry BeanDefinitionRegistry, packagesToScan Set<String>) : void extracted from public registerBeanDefinitions(importingClassMetadata AnnotationMetadata, registry BeanDefinitionRegistry) : void in class org.springframework.boot.orm.jpa.EntityScanRegistrar",
	"motivations": [ 
			{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
			},
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/spring-projects/spring-boot.git",
	"sha1": "b47634176fa48ad925f79886c6aaca225cb9af64",
	"url": "https://github.com/spring-projects/spring-boot/commit/b47634176fa48ad925f79886c6aaca225cb9af64",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private findAll(predicate Predicate<String>) : Iterable<Metric<?>> extracted from public findAll(prefix String) : Iterable<Metric<?>> in class org.springframework.boot.actuate.metrics.buffer.BufferMetricReader",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private findAll(predicate Predicate<String>) : Iterable<Metric<?>> extracted from public findAll() : Iterable<Metric<?>> in class org.springframework.boot.actuate.metrics.buffer.BufferMetricReader",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/brettwooldridge/HikariCP.git",
	"sha1": "cd8c4d578a609bdd6395d3a8c49bfd19ed700dea",
	"url": "https://github.com/brettwooldridge/HikariCP/commit/cd8c4d578a609bdd6395d3a8c49bfd19ed700dea",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.zaxxer.hikari.util.MillisecondClockSource moved to com.zaxxer.hikari.util.ClockSource.MillisecondClockSource",
	"motivations": [ 
	{ 
                "label": "MC: Convert to inner class",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.zaxxer.hikari.util.NanosecondClockSource moved to com.zaxxer.hikari.util.ClockSource.NanosecondClockSource",
	"motivations": [ 
	{ 
                "label": "MC: Convert to inner class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "77fab3caea4495798a248035f0e928f745c7c2db",
	"url": "https://github.com/neo4j/neo4j/commit/77fab3caea4495798a248035f0e928f745c7c2db",
	"refactorings": [{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public acquireExclusive(state KernelStatement, resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public acquireShared(state KernelStatement, resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public releaseExclusive(state KernelStatement, type Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public releaseShared(state KernelStatement, type Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public acquireExclusive(type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public acquireShared(type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public releaseExclusive(type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public releaseShared(type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.NoOpClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.NoOpClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.NoOpClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.NoOpClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public releaseAllShared() : void inlined to public releaseAll() : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public releaseAllExclusive() : void inlined to public releaseAll() : void in class org.neo4j.kernel.impl.locking.community.CommunityLockClient",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long[] to resourceId : long in method public LocalDeadlockDetectedException(lockClient Locks.Client, lockManager Locks, resourceType Locks.ResourceType, resourceId long, type LockType) in class org.neo4j.kernel.ha.lock.LocalDeadlockDetectedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long[] to resourceId : long in method public LocalDeadlockDetectedException(lockClient Locks.Client, lockManager Locks, resourceType Locks.ResourceType, resourceId long, type LockType) in class org.neo4j.kernel.ha.lock.LocalDeadlockDetectedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long[] to resourceId : long in method private constructHelpfulDiagnosticsMessage(client Locks.Client, lockManager Locks, resourceType Locks.ResourceType, resourceId long, type LockType) : String in class org.neo4j.kernel.ha.lock.LocalDeadlockDetectedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long[] to resourceId : long in method private constructHelpfulDiagnosticsMessage(client Locks.Client, lockManager Locks, resourceType Locks.ResourceType, resourceId long, type LockType) : String in class org.neo4j.kernel.ha.lock.LocalDeadlockDetectedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long... to resourceId : long in method private getReadLockOnMaster(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long... to resourceId : long in method private acquireExclusiveOnMaster(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.SlaveLocksClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireShared(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public trySharedLock(resourceType Locks.ResourceType, resourceId long) : boolean in class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable message : String in method private markAsWaitingFor(lock ForsetiLockManager.Lock, type Locks.ResourceType, resourceId long) : void from class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable next : int in method public describeWaitList() : String from class org.neo4j.kernel.ha.lock.forseti.ForsetiClient",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public acquireExclusive(type ResourceType, id long) : void in class org.neo4j.kernel.api.Locking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public acquireShared(type ResourceType, id long) : void in class org.neo4j.kernel.api.Locking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public releaseExclusive(type ResourceType, id long) : void in class org.neo4j.kernel.api.Locking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long... to id : long in method public releaseShared(type ResourceType, id long) : void in class org.neo4j.kernel.api.Locking",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public acquireExclusive(state KernelStatement, resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.operations.LockOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceId : long[] to resourceId : long in method public acquireShared(state KernelStatement, resourceType Locks.ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.api.operations.LockOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long[] to id : long in method public releaseExclusive(statement KernelStatement, type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.operations.LockOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : long[] to id : long in method public releaseShared(statement KernelStatement, type Locks.ResourceType, id long) : void in class org.neo4j.kernel.impl.api.operations.LockOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireShared(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireShared(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public acquireExclusive(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public tryExclusiveLock(resourceType ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public trySharedLock(resourceType ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public trySharedLock(resourceType ResourceType, resourceId long) : boolean in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseShared(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseShared(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type resourceIds : long... to resourceId : long in method public releaseExclusive(resourceType ResourceType, resourceId long) : void in class org.neo4j.kernel.impl.locking.Locks.Client",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "a26b61201cd86c9a8773b418d9c84b446e95a601",
	"url": "https://github.com/neo4j/neo4j/commit/a26b61201cd86c9a8773b418d9c84b446e95a601",
	"refactorings": [{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type instanceCache : InstanceCache<StoreNodeRelationshipCursor> to instanceCache : Consumer<StoreNodeRelationshipCursor> in class org.neo4j.kernel.impl.api.store.StoreNodeRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type instanceCache : InstanceCache<StoreNodeRelationshipCursor> to instanceCache : Consumer<StoreNodeRelationshipCursor> in method public StoreNodeRelationshipCursor(relationshipRecord RelationshipRecord, relationshipStore RelationshipStore, groupRecord RelationshipGroupRecord, groupStore RelationshipGroupStore, storeStatement StoreStatement, instanceCache Consumer<StoreNodeRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreNodeRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type indexKey : org.neo4j.kernel.impl.store.counts.keys.IndexKey to indexKey : IndexKey in method public equals(other Object) : boolean in class org.neo4j.kernel.impl.store.counts.keys.IndexKey",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type that : org.neo4j.kernel.impl.store.counts.keys.IndexSampleKey to that : IndexSampleKey in method public compareTo(other CountsKey) : int in class org.neo4j.kernel.impl.store.counts.keys.IndexSampleKey",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type that : org.neo4j.kernel.impl.store.counts.keys.RelationshipKey to that : RelationshipKey in method public equals(o Object) : boolean in class org.neo4j.kernel.impl.store.counts.keys.RelationshipKey",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type that : org.neo4j.kernel.impl.store.counts.keys.RelationshipKey to that : RelationshipKey in method public compareTo(other CountsKey) : int in class org.neo4j.kernel.impl.store.counts.keys.RelationshipKey",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable relationshipId : long to relId : long in method public getRelationshipIds(nodeId long) : Iterable<Long> in class org.neo4j.unsafe.batchinsert.BatchInserterImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public arrayAsCollection(arrayValue Object) : Collection<Object> from class org.neo4j.kernel.impl.util.IoPrimitiveUtils to public arrayAsCollection(arrayValue Object) : Collection<Object> from class org.neo4j.graphdb.Neo4jMatchers",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "021d17c8234904dcb1d54596662352395927fe7b",
	"url": "https://github.com/neo4j/neo4j/commit/021d17c8234904dcb1d54596662352395927fe7b",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.api.store.DiskLayer.AllStoreIdIterator moved to org.neo4j.kernel.impl.api.store.StoreStatement.AllStoreIdIterator",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type startNodeId : long to startNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.ConstraintEnforcingEntityOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type endNodeId : long to endNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.ConstraintEnforcingEntityOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type startNodeId : long to startNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.GuardingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type endNodeId : long to endNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.GuardingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type outgoing : int to outgoing : long in method private updateRelationshipsCountsFromDegrees(type int, label int, outgoing long, incoming long) : void in class org.neo4j.kernel.impl.api.KernelTransactionImplementation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type incoming : int to incoming : long in method private updateRelationshipsCountsFromDegrees(type int, label int, outgoing long, incoming long) : void in class org.neo4j.kernel.impl.api.KernelTransactionImplementation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type startNodeId : long to startNode : NodeItem in method public relationshipCreate(state KernelStatement, relationshipTypeId int, startNode NodeItem, endNode NodeItem) : long in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type endNodeId : long to endNode : NodeItem in method public relationshipCreate(state KernelStatement, relationshipTypeId int, startNode NodeItem, endNode NodeItem) : long in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter startNodeId : long to startNode : NodeItem in method public relationshipCreate(state KernelStatement, relationshipTypeId int, startNode NodeItem, endNode NodeItem) : long in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter endNodeId : long to endNode : NodeItem in method public relationshipCreate(state KernelStatement, relationshipTypeId int, startNode NodeItem, endNode NodeItem) : long in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nodeStore : NodeStore to neoStore : NeoStore in method public StoreAbstractNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement) in class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type nodeStore : NodeStore to neoStore : NeoStore in method public StoreAbstractNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement) in class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute nodeStore : NodeStore to neoStore : NeoStore in class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type nodeStore : NodeStore to neoStore : NeoStore in class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreAbstractRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement) in class org.neo4j.kernel.impl.api.store.StoreAbstractRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreAbstractRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement) in class org.neo4j.kernel.impl.api.store.StoreAbstractRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nodeStore : NodeStore to neoStore : NeoStore in method public StoreIteratorNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache Consumer<StoreIteratorNodeCursor>) in class org.neo4j.kernel.impl.api.store.StoreIteratorNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type nodeStore : NodeStore to neoStore : NeoStore in method public StoreIteratorNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache Consumer<StoreIteratorNodeCursor>) in class org.neo4j.kernel.impl.api.store.StoreIteratorNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreIteratorRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache InstanceCache<StoreIteratorRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreIteratorRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreIteratorRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache InstanceCache<StoreIteratorRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreIteratorRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreNodeRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, groupRecord RelationshipGroupRecord, storeStatement StoreStatement, instanceCache Consumer<StoreNodeRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreNodeRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreNodeRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, groupRecord RelationshipGroupRecord, storeStatement StoreStatement, instanceCache Consumer<StoreNodeRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreNodeRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nodeStore : NodeStore to neoStore : NeoStore in method public StoreSingleNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache Consumer<StoreSingleNodeCursor>) in class org.neo4j.kernel.impl.api.store.StoreSingleNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type nodeStore : NodeStore to neoStore : NeoStore in method public StoreSingleNodeCursor(nodeRecord NodeRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache Consumer<StoreSingleNodeCursor>) in class org.neo4j.kernel.impl.api.store.StoreSingleNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreSingleRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache InstanceCache<StoreSingleRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreSingleRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type relationshipStore : RelationshipStore to neoStore : NeoStore in method public StoreSingleRelationshipCursor(relationshipRecord RelationshipRecord, neoStore NeoStore, storeStatement StoreStatement, instanceCache InstanceCache<StoreSingleRelationshipCursor>) in class org.neo4j.kernel.impl.api.store.StoreSingleRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private assertHasRelationships(node long) : void extracted from private deleteNode1(node long, prop1 DefinedProperty, prop2 DefinedProperty, prop3 DefinedProperty) : void in class org.neo4j.kernel.impl.store.TestNeoStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private assertHasRelationships(node long) : void extracted from private deleteNode2(node long, prop1 DefinedProperty, prop2 DefinedProperty, prop3 DefinedProperty) : void in class org.neo4j.kernel.impl.store.TestNeoStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.kernel.api.cursor.EntityItem.EntityItemHelper from classes [org.neo4j.kernel.impl.api.cursor.TxAbstractRelationshipCursor, org.neo4j.kernel.impl.api.store.StoreAbstractRelationshipCursor]",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.kernel.api.cursor.NodeItem.NodeItemHelper from classes [org.neo4j.kernel.impl.api.cursor.TxAbstractNodeCursor, org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor]",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public GET_LABEL : ToIntFunction<LabelItem> from class org.neo4j.kernel.api.cursor.LabelItem to public GET_LABEL : ToIntFunction<LabelItem> from class org.neo4j.kernel.api.cursor.NodeItem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private singlePropertyCursor : InstanceCache<StoreSinglePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private singlePropertyCursor : InstanceCache<StoreSinglePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private singlePropertyCursor : InstanceCache<StoreSinglePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private singlePropertyCursor : InstanceCache<StoreSinglePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private allPropertyCursor : InstanceCache<StorePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private allPropertyCursor : InstanceCache<StorePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private allPropertyCursor : InstanceCache<StorePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private allPropertyCursor : InstanceCache<StorePropertyCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractRelationshipCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private labelCursor : InstanceCache<StoreLabelCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private labelCursor : InstanceCache<StoreLabelCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private singleLabelCursor : InstanceCache<StoreSingleLabelCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private singleLabelCursor : InstanceCache<StoreSingleLabelCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private nodeRelationshipCursor : InstanceCache<StoreNodeRelationshipCursor> from class org.neo4j.kernel.impl.api.store.StoreStatement to private nodeRelationshipCursor : InstanceCache<StoreNodeRelationshipCursor> from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private nodeDegreeByDirection(nodeId long, group RelationshipGroupRecord, direction Direction) : long from class org.neo4j.kernel.impl.api.store.DiskLayer to private nodeDegreeByDirection(group RelationshipGroupRecord, direction Direction) : long from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private countByFirstPrevPointer(nodeId long, relationshipId long) : long from class org.neo4j.kernel.impl.api.store.DiskLayer to private countByFirstPrevPointer(relationshipId long) : long from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private directionOf(nodeId long, relationshipId long, startNode long, endNode long) : Direction from class org.neo4j.kernel.impl.api.store.DiskLayer to private directionOf(nodeId long, relationshipId long, startNode long, endNode long) : Direction from class org.neo4j.kernel.impl.api.store.StoreAbstractNodeCursor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public nodesGetAllCursor(statement StoreStatement) : Cursor<NodeItem> from class org.neo4j.kernel.impl.api.store.DiskLayer to public nodesGetAllCursor() : Cursor<NodeItem> from class org.neo4j.kernel.impl.api.store.StoreStatement",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public relationshipsGetAllCursor(storeStatement StoreStatement) : Cursor<RelationshipItem> from class org.neo4j.kernel.impl.api.store.DiskLayer to public relationshipsGetAllCursor() : Cursor<RelationshipItem> from class org.neo4j.kernel.impl.api.store.StoreStatement",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type startNodeId : long to startNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.operations.EntityWriteOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type endNodeId : long to endNodeId : NodeItem in method public relationshipCreate(statement KernelStatement, relationshipTypeId int, startNodeId NodeItem, endNodeId NodeItem) : long in class org.neo4j.kernel.impl.api.operations.EntityWriteOperations",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "dc199688d69416da58b370ca2aa728e935fc8e0d",
	"url": "https://github.com/neo4j/neo4j/commit/dc199688d69416da58b370ca2aa728e935fc8e0d",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private filterIndexStateChanges(state KernelStatement, index IndexDescriptor, value Object, nodeIds PrimitiveLongIterator) : PrimitiveLongIterator renamed to private filterIndexStateChangesForScanOrSeek(state KernelStatement, index IndexDescriptor, value Object, nodeIds PrimitiveLongIterator) : PrimitiveLongIterator in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private filterIndexStateChangesForPrefix(state KernelStatement, index IndexDescriptor, prefix String, nodeIds PrimitiveLongIterator) : PrimitiveLongIterator renamed to private filterIndexStateChangesForRangeSeekByPrefix(state KernelStatement, index IndexDescriptor, prefix String, nodeIds PrimitiveLongIterator) : PrimitiveLongIterator in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private filterIndexStateChangesForRangeSeekByNumber(state KernelStatement, index IndexDescriptor, lower Number, includeLower boolean, upper Number, includeUpper boolean, nodeIds PrimitiveLongIterator) : PrimitiveLongIterator extracted from public nodesGetFromIndexRangeSeekByNumber(state KernelStatement, index IndexDescriptor, lower Number, includeLower boolean, upper Number, includeUpper boolean) : PrimitiveLongIterator in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public indexUpdates(descriptor IndexDescriptor, value Object) : ReadableDiffSets<Long> renamed to public indexUpdatesForScanOrSeek(descriptor IndexDescriptor, value Object) : ReadableDiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public indexUpdatesForPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> renamed to public indexUpdatesForRangeSeekByPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private getIndexUpdatesForPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> renamed to private getIndexUpdatesForRangeSeekByPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private getIndexUpdates(label int, create boolean, property DefinedProperty) : DiffSets<Long> renamed to private getIndexUpdatesForScanOrSeek(label int, create boolean, property DefinedProperty) : DiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private getIndexUpdates(label int, propertyKeyId int) : DiffSets<Long> renamed to private getIndexUpdatesForScanOrSeek(label int, propertyKeyId int) : DiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getSortedIndexUpdates(descriptor IndexDescriptor) : TreeMap<DefinedProperty,DiffSets<Long>> extracted from private getIndexUpdatesForPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 
               "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable propertyKeyId : int in method private getIndexUpdatesForRangeSeekByPrefix(descriptor IndexDescriptor, prefix String) : ReadableDiffSets<Long> from class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldComputeIndexUpdatesOnAnEmptyTxState() : void renamed to public shouldComputeIndexUpdatesForScanOrSeekOnAnEmptyTxState() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private addToIndex(labelId int, propertyKeyId int, nodeIds long[]) : void renamed to public withStringProperties(nodesWithValues Collection<Pair<Long,String>>) : void in class org.neo4j.kernel.impl.api.state.TxStateTest.addNodesToIndex",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute rule : IndexDescriptor to indexOn_1_1 : IndexDescriptor in method public shouldAddAndGetByLabel() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute rule : IndexDescriptor to indexOn_1_1 : IndexDescriptor in method public shouldAddAndGetByRuleId() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute rule : IndexDescriptor to indexOn_1_1 : IndexDescriptor in method public shouldComputeIndexUpdatesForScanOrSeekOnAnEmptyTxState() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute labelId : int to labelId1 : int in method public shouldAddAndGetByLabel() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public indexUpdates(index IndexDescriptor, value Object) : ReadableDiffSets<Long> renamed to public indexUpdatesForScanOrSeek(index IndexDescriptor, value Object) : ReadableDiffSets<Long> in class org.neo4j.kernel.api.txstate.ReadableTxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public indexUpdatesForPrefix(index IndexDescriptor, prefix String) : ReadableDiffSets<Long> renamed to public indexUpdatesForRangeSeekByPrefix(index IndexDescriptor, prefix String) : ReadableDiffSets<Long> in class org.neo4j.kernel.api.txstate.ReadableTxState",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "8d9bedbf96b14beb027ebc1338bc6d5750e1feb5",
	"url": "https://github.com/neo4j/neo4j/commit/8d9bedbf96b14beb027ebc1338bc6d5750e1feb5",
	"refactorings": [{
	"type": "Rename Class",
	"description": "Rename Class org.neo4j.kernel.impl.coreapi.schema.PropertyUniqueConstraintDefinition renamed to org.neo4j.kernel.impl.coreapi.schema.PropertyConstraintDefinition",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.neo4j.kernel.impl.store.UniquenessConstraintRule renamed to org.neo4j.kernel.impl.store.UniquePropertyConstraintRule",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method private checkUniquenessConstraintRule(rule UniquePropertyConstraintRule, engine CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport>, record DynamicRecord, records RecordAccess) : void in class org.neo4j.consistency.checking.SchemaRecordCheck",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type lhs : UniquenessConstraintRule to lhs : UniquePropertyConstraintRule in method private uniquenessConstraintEquals(lhs UniquePropertyConstraintRule, rhs UniquePropertyConstraintRule) : boolean in class org.neo4j.consistency.checking.SchemaRuleContent",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type rhs : UniquenessConstraintRule to rhs : UniquePropertyConstraintRule in method private uniquenessConstraintEquals(lhs UniquePropertyConstraintRule, rhs UniquePropertyConstraintRule) : boolean in class org.neo4j.consistency.checking.SchemaRuleContent",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldReportInvalidPropertyReferenceFromUniquenessConstraintRule() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule2 : UniquenessConstraintRule to rule2 : UniquePropertyConstraintRule in method public shouldReportUniquenessConstraintNotReferencingBack() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule1 : UniquenessConstraintRule to rule1 : UniquePropertyConstraintRule in method public shouldReportTwoUniquenessConstraintsReferencingSameIndex() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule2 : UniquenessConstraintRule to rule2 : UniquePropertyConstraintRule in method public shouldReportTwoUniquenessConstraintsReferencingSameIndex() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldReportUnreferencedUniquenessConstraint() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule2 : UniquenessConstraintRule to rule2 : UniquePropertyConstraintRule in method public shouldReportConstraintIndexNotReferencingBack() : void in class org.neo4j.consistency.checking.SchemaRecordCheckTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule2 : UniquenessConstraintRule to rule2 : UniquePropertyConstraintRule in method public shouldReportInvalidConstraintBackReferences() : void in class org.neo4j.consistency.checking.full.FullCheckIntegrationTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.api.SchemaRead",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.api.SchemaRead",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll() : Iterator<PropertyConstraint> in class org.neo4j.kernel.api.SchemaRead",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraint : UniquenessConstraint to constraint : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.AlreadyConstrainedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public AlreadyConstrainedException(constraint PropertyConstraint, context OperationContext) in class org.neo4j.kernel.api.exceptions.schema.AlreadyConstrainedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private constructUserMessage(context OperationContext, tokenNameLookup TokenNameLookup, constraint PropertyConstraint) : String in class org.neo4j.kernel.api.exceptions.schema.AlreadyConstrainedException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraint : UniquenessConstraint to constraint : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.ConstraintVerificationFailedKernelException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public ConstraintVerificationFailedKernelException(constraint PropertyConstraint, evidence Set<Evidence>) in class org.neo4j.kernel.api.exceptions.schema.ConstraintVerificationFailedKernelException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public ConstraintVerificationFailedKernelException(constraint PropertyConstraint, failure Throwable) in class org.neo4j.kernel.api.exceptions.schema.ConstraintVerificationFailedKernelException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraint to PropertyConstraint in method public constraint() : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.CreateConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraint : UniquenessConstraint to constraint : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.CreateConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public CreateConstraintFailureException(constraint PropertyConstraint, cause Throwable) in class org.neo4j.kernel.api.exceptions.schema.CreateConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraint to PropertyConstraint in method public constraint() : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.DropConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraint : UniquenessConstraint to constraint : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.DropConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public DropConstraintFailureException(constraint PropertyConstraint, cause Throwable) in class org.neo4j.kernel.api.exceptions.schema.DropConstraintFailureException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraint : UniquenessConstraint to constraint : PropertyConstraint in class org.neo4j.kernel.api.exceptions.schema.NoSuchConstraintException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public NoSuchConstraintException(constraint PropertyConstraint) in class org.neo4j.kernel.api.exceptions.schema.NoSuchConstraintException",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChanges() : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.api.txstate.ReadableTxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChangesForLabel(labelId int) : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.api.txstate.ReadableTxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChangesForLabelAndProperty(labelId int, propertyKey int) : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.api.txstate.ReadableTxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public nodeAddLabel(state KernelStatement, nodeId long, labelId int) : boolean in class org.neo4j.kernel.impl.api.ConstraintEnforcingEntityOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public nodeAddLabel(state KernelStatement, nodeId long, labelId int) : boolean in class org.neo4j.kernel.impl.api.ConstraintEnforcingEntityOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraintIterator : Iterator<UniquenessConstraint> to constraintIterator : Iterator<PropertyConstraint> in method public nodeSetProperty(state KernelStatement, nodeId long, property DefinedProperty) : Property in class org.neo4j.kernel.impl.api.ConstraintEnforcingEntityOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(state KernelStatement, labelId int, propertyKey int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKey int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(state KernelStatement, constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private assertConstraintExists(constraint PropertyConstraint, constraints Iterator<PropertyConstraint>) : void in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private assertConstraintExists(constraint PropertyConstraint, constraints Iterator<PropertyConstraint>) : void in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable constraint : PropertyConstraint in method public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKey int) : UniquenessConstraint from class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKey int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type existing : UniquenessConstraint to existing : PropertyConstraint in method private assertConstraintExists(constraint PropertyConstraint, constraints Iterator<PropertyConstraint>) : void in class org.neo4j.kernel.impl.api.DataIntegrityValidatingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public visitAddedConstraint(element UniquenessConstraint) : void renamed to public visitAddedUniquePropertyConstraint(element UniquenessConstraint) : void in class org.neo4j.kernel.impl.api.KernelTransactionImplementation.TransactionToRecordStateVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public visitRemovedConstraint(element UniquenessConstraint) : void renamed to public visitRemovedUniquePropertyConstraint(element UniquenessConstraint) : void in class org.neo4j.kernel.impl.api.KernelTransactionImplementation.TransactionToRecordStateVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public visitRemovedUniquePropertyConstraint(element UniquenessConstraint) : void in class org.neo4j.kernel.impl.api.KernelTransactionImplementation.TransactionToRecordStateVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(state KernelStatement, labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(state KernelStatement, labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll(state KernelStatement) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(state KernelStatement, constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.LockingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll() : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(labelId int, propertyKeyId int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.OperationsFacade",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(state KernelStatement, labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(state KernelStatement, labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll(state KernelStatement) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>, labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>, labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>, labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>, labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private applyConstraintsDiff(state KernelStatement, constraints Iterator<PropertyConstraint>) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(state KernelStatement, constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type it : Iterator<UniquenessConstraint> to it : Iterator<PropertyConstraint> in method public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.StateHandlingStatementOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(state KernelStatement, labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.operations.SchemaReadOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(state KernelStatement, labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.operations.SchemaReadOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll(state KernelStatement) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.operations.SchemaReadOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private awaitIndexPopulation(constraint PropertyConstraint, indexId long) : void in class org.neo4j.kernel.impl.api.state.ConstraintIndexCreator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public createUniquenessConstraintIndex(state KernelStatement, schema SchemaReadOperations, labelId int, propertyKeyId int) : long in class org.neo4j.kernel.impl.api.state.ConstraintIndexCreator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public abstract constraintsChanges() : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.LabelState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChanges() : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.LabelState.Mutable",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type DiffSets<UniquenessConstraint> to DiffSets<PropertyConstraint> in method public getOrCreateConstraintsChanges() : DiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.LabelState.Mutable",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraintsChanges : DiffSets<UniquenessConstraint> to constraintsChanges : DiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.LabelState.Mutable",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type DiffSetsVisitor<UniquenessConstraint> to DiffSetsVisitor<PropertyConstraint> in method private constraintsVisitor(visitor TxStateVisitor) : DiffSetsVisitor<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChangesForLabelAndProperty(labelId int, propertyKey int) : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChangesForLabel(labelId int) : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ReadableDiffSets<UniquenessConstraint> to ReadableDiffSets<PropertyConstraint> in method public constraintsChanges() : ReadableDiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type DiffSets<UniquenessConstraint> to DiffSets<PropertyConstraint> in method private constraintsChangesDiffSets() : DiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraintsChanges : DiffSets<UniquenessConstraint> to constraintsChanges : DiffSets<PropertyConstraint> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDoDrop(constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDoUnRemove(constraint PropertyConstraint) : boolean in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintIndexesCreatedInTx() : Iterable<IndexDescriptor> in class org.neo4j.kernel.impl.api.state.TxState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.CacheLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.CacheLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll() : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.CacheLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll() : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : PropertyConstraintRule in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute UNIQUENESS_CONSTRAINT_TO_RULE : Function<UniquenessConstraintRule,UniquenessConstraint> to RULE_TO_CONSTRAINT : Function<PropertyConstraintRule,PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type UNIQUENESS_CONSTRAINT_TO_RULE : Function<UniquenessConstraintRule,UniquenessConstraint> to RULE_TO_CONSTRAINT : Function<PropertyConstraintRule,PropertyConstraint> in class org.neo4j.kernel.impl.api.store.DiskLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraints() : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsForLabel(label int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsForLabelAndProperty(label int, property int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type constraints : Collection<UniquenessConstraint> to constraints : Collection<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type item : UniquenessConstraint to item : PropertyConstraint in method public constraintsForLabel(label int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type item : UniquenessConstraint to item : PropertyConstraint in method public constraintsForLabelAndProperty(label int, property int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.SchemaCache",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabelAndPropertyKey(labelId int, propertyKeyId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.StoreReadLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetForLabel(labelId int) : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.StoreReadLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Iterator<UniquenessConstraint> to Iterator<PropertyConstraint> in method public constraintsGetAll() : Iterator<PropertyConstraint> in class org.neo4j.kernel.impl.api.store.StoreReadLayer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private asConstraintDefinitions(readOperations ReadOperations, constraints Iterator<PropertyConstraint>) : Iterable<ConstraintDefinition> in class org.neo4j.kernel.impl.coreapi.schema.SchemaImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public getConstraints() : Iterable<ConstraintDefinition> in class org.neo4j.kernel.impl.coreapi.schema.SchemaImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public getConstraints(label Label) : Iterable<ConstraintDefinition> in class org.neo4j.kernel.impl.coreapi.schema.SchemaImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private asConstraintDefinitions(readOperations ReadOperations, constraints Iterator<PropertyConstraint>) : Iterable<ConstraintDefinition> in class org.neo4j.kernel.impl.coreapi.schema.SchemaImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public dropPropertyUniquenessConstraint(label Label, propertyKey String) : void in class org.neo4j.kernel.impl.coreapi.schema.SchemaImpl.GDBSchemaActions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraintRule to UniquePropertyConstraintRule in method public uniquenessConstraint(labelId int, propertyKeyId int) : UniquePropertyConstraintRule in class org.neo4j.kernel.impl.store.SchemaStorage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private propertyConstraint(type Class<Rule>, labelId int, propertyKeyId int) : Rule extracted from public uniquenessConstraint(labelId int, propertyKeyId int) : UniquenessConstraintRule in class org.neo4j.kernel.impl.store.SchemaStorage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rules : Iterator<UniquenessConstraintRule> to rules : Iterator<Rule> in method private propertyConstraint(type Class<Rule>, labelId int, propertyKeyId int) : Rule in class org.neo4j.kernel.impl.store.SchemaStorage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type item : UniquenessConstraintRule to item : Rule in method private propertyConstraint(type Class<Rule>, labelId int, propertyKeyId int) : Rule in class org.neo4j.kernel.impl.store.SchemaStorage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : Rule in method private propertyConstraint(type Class<Rule>, labelId int, propertyKeyId int) : Rule in class org.neo4j.kernel.impl.store.SchemaStorage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type uniquenessConstraint : Set<UniquenessConstraint> to uniquenessConstraint : Set<PropertyConstraint> in class org.neo4j.kernel.impl.util.dbstructure.DbStructureCollector",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public visitUniqueConstraint(constraint PropertyConstraint, userDescription String) : void in class org.neo4j.kernel.impl.util.dbstructure.DbStructureCollector",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type uniquenessConstraint : UniquenessConstraint to uniquenessConstraint : PropertyConstraint in method public lookup() : DbStructureLookup in class org.neo4j.kernel.impl.util.dbstructure.DbStructureCollector",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method private showUniqueConstraints(visitor DbStructureVisitor, read ReadOperations, nameLookup TokenNameLookup) : void in class org.neo4j.kernel.impl.util.dbstructure.GraphDbStructureGuide",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private showUniqueConstraints(visitor DbStructureVisitor, read ReadOperations, nameLookup TokenNameLookup) : void in class org.neo4j.kernel.impl.util.dbstructure.GraphDbStructureGuide",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method private createConstraintRule(constraint PropertyConstraint) : void in class org.neo4j.unsafe.batchinsert.BatchInserterImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraintRule : UniquenessConstraintRule to constraintRule : UniquePropertyConstraintRule in method private createConstraintRule(constraint PropertyConstraint) : void in class org.neo4j.unsafe.batchinsert.BatchInserterImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraint to PropertyConstraint in method private createConstraint() : PropertyConstraint in class org.neo4j.kernel.impl.api.KernelSchemaStateFlushingTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type descriptor : UniquenessConstraint to descriptor : PropertyConstraint in method private dropConstraint(descriptor PropertyConstraint) : void in class org.neo4j.kernel.impl.api.KernelSchemaStateFlushingTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type descriptor : UniquenessConstraint to descriptor : PropertyConstraint in method public shouldInvalidateSchemaStateOnDropConstraint() : void in class org.neo4j.kernel.impl.api.KernelSchemaStateFlushingTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type descriptor : UniquenessConstraint to descriptor : PropertyConstraint in method private createConstraint() : PropertyConstraint in class org.neo4j.kernel.impl.api.KernelSchemaStateFlushingTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : UniquenessConstraint to result : PropertyConstraint in method public shouldAcquireSchemaWriteLockBeforeCreatingUniquenessConstraint() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldAcquireSchemaWriteLockBeforeDroppingConstraint() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingConstraintsByLabelAndProperty() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Iterator<UniquenessConstraint> to result : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingConstraintsByLabelAndProperty() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingConstraintsByLabel() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Iterator<UniquenessConstraint> to result : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingConstraintsByLabel() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingAllConstraints() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Iterator<UniquenessConstraint> to result : Iterator<PropertyConstraint> in method public shouldAcquireSchemaReadLockBeforeGettingAllConstraints() : void in class org.neo4j.kernel.impl.api.LockingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldBeAbleToStoreAndRetrieveUniquenessConstraintRule() : void renamed to public shouldBeAbleToStoreAndRetrieveUniquePropertyConstraintRule() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldNotPersistUniquenessConstraintsCreatedInAbortedTransaction() : void renamed to public shouldNotPersistUniquePropertyConstraintsCreatedInAbortedTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldNotStoreUniquenessConstraintThatIsRemovedInTheSameTransaction() : void renamed to public shouldNotStoreUniquePropertyConstraintThatIsRemovedInTheSameTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldNotCreateUniquenessConstraintThatAlreadyExists() : void renamed to public shouldNotCreateUniquePropertyConstraintThatAlreadyExists() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldNotRemoveConstraintThatGetsReAdded() : void renamed to public shouldNotRemoveUniquePropertyConstraintThatGetsReAdded() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldCreateAnIndexToGoAlongWithAUniquenessConstraint() : void renamed to public shouldCreateAnIndexToGoAlongWithAUniquePropertyConstraint() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldNotLeaveAnyStateBehindAfterFailingToCreateConstraint() : void renamed to public shouldNotLeaveAnyStateBehindAfterFailingToCreateUniquePropertyConstraint() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shouldBeAbleToResolveConflictsAndRecreateConstraintAfterFailingToCreateConstraintDueToConflict() : void renamed to public shouldBeAbleToResolveConflictsAndRecreateConstraintAfterFailingToCreateUniquePropertyConstraintDueToConflict() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldClearSchemaStateWhenConstraintIsDropped() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldDropCreatedConstraintIndexWhenRollingBackConstraintCreation() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldDropConstraintIndexWhenDroppingConstraint() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldDropConstraintIndexWhenDroppingConstraint() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldNotDropConstraintThatDoesNotExist() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraintRule : UniquenessConstraintRule to constraintRule : UniquePropertyConstraintRule in method public committedConstraintRuleShouldCrossReferenceTheCorrespondingIndexRule() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldBeAbleToStoreAndRetrieveUniquePropertyConstraintRule() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldBeAbleToStoreAndRetrieveUniquePropertyConstraintRule() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public shouldBeAbleToStoreAndRetrieveUniquePropertyConstraintRule() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldNotPersistUniquePropertyConstraintsCreatedInAbortedTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Iterator<UniquenessConstraint> to constraints : Iterator<PropertyConstraint> in method public shouldNotPersistUniquePropertyConstraintsCreatedInAbortedTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldNotStoreUniquePropertyConstraintThatIsRemovedInTheSameTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldNotStoreUniquePropertyConstraintThatIsRemovedInTheSameTransaction() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldNotRemoveUniquePropertyConstraintThatGetsReAdded() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldNotRemoveUniquePropertyConstraintThatGetsReAdded() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type statement : SchemaWriteOperations to statement : ReadOperations in method public shouldCreateAnIndexToGoAlongWithAUniquePropertyConstraint() : void in class org.neo4j.kernel.impl.api.integrationtest.ConstraintsCreationIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldNotAddConstraintAlreadyExistsInTheStore() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public shouldGetConstraintsByLabelAndProperty() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Set<UniquenessConstraint> to result : Set<PropertyConstraint> in method public shouldGetConstraintsByLabelAndProperty() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint1 : UniquenessConstraint to constraint1 : PropertyConstraint in method public shouldGetConstraintsByLabel() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint2 : UniquenessConstraint to constraint2 : PropertyConstraint in method public shouldGetConstraintsByLabel() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Set<UniquenessConstraint> to result : Set<PropertyConstraint> in method public shouldGetConstraintsByLabel() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint1 : UniquenessConstraint to constraint1 : PropertyConstraint in method public shouldGetAllConstraints() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint2 : UniquenessConstraint to constraint2 : PropertyConstraint in method public shouldGetAllConstraints() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type result : Set<UniquenessConstraint> to result : Set<PropertyConstraint> in method public shouldGetAllConstraints() : void in class org.neo4j.kernel.impl.api.state.StateHandlingStatementOperationsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type diff : ReadableDiffSets<UniquenessConstraint> to diff : ReadableDiffSets<PropertyConstraint> in method public shouldAddUniquenessConstraint() : void in class org.neo4j.kernel.impl.api.state.TxStateTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Set<UniquenessConstraint> to constraints : Set<PropertyConstraint> in method public shouldLoadAllConstraintsFromCache() : void in class org.neo4j.kernel.impl.api.store.CacheLayerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Set<UniquenessConstraint> to constraints : Set<PropertyConstraint> in method public shouldLoadConstraintsByLabelFromCache() : void in class org.neo4j.kernel.impl.api.store.CacheLayerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraints : Set<UniquenessConstraint> to constraints : Set<PropertyConstraint> in method public shouldLoadConstraintsByLabelAndPropertyFromCache() : void in class org.neo4j.kernel.impl.api.store.CacheLayerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyCreateUniquenessConstraintRuleSchemaRuleCommandToTheStore() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyCreateUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyUpdateUniquenessConstraintRuleSchemaRuleCommandToTheStore() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyUpdateUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyDeleteUniquenessConstraintRuleSchemaRuleCommandToTheStore() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rule : UniquenessConstraintRule to rule : UniquePropertyConstraintRule in method public shouldApplyDeleteUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() : void in class org.neo4j.kernel.impl.transaction.command.NeoTransactionStoreApplierTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type record : UniquenessConstraintRule to record : UniquePropertyConstraintRule in method public shouldValidateUniquenessIndexes() : void in class org.neo4j.kernel.impl.transaction.state.IntegrityValidatorTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraint to PropertyConstraint in method private createUniqueConstraint(labelId int, pkId int) : PropertyConstraint in class org.neo4j.kernel.impl.util.dbstructure.GraphDbStructureGuideTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public visitsUniqueConstraintsAndIndices() : void in class org.neo4j.kernel.impl.util.dbstructure.GraphDbStructureGuideTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraintRule : UniquenessConstraintRule to constraintRule : UniquePropertyConstraintRule in method public shouldCreateConsistentUniquenessConstraint() : void in class org.neo4j.unsafe.batchinsert.BatchInsertTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public canListConstraints() : void renamed to public canListUniquePropertyConstraints() : void in class org.neo4j.shell.TestApps",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public canListConstraintsByLabel() : void renamed to public canListUniquePropertyConstraintsByLabel() : void in class org.neo4j.shell.TestApps",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public canListConstraintsByLabelAndProperty() : void renamed to public canListUniquePropertyConstraintsByLabelAndProperty() : void in class org.neo4j.shell.TestApps",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type constraint : PropertyUniqueConstraintDefinition to constraint : PropertyConstraintDefinition in method public newSlaveJoiningClusterShouldNotAcceptOperationsUntilConstraintIsOnline() : void in class org.neo4j.kernel.api.UniqueConstraintHaIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type that : PropertyUniqueConstraintDefinition to that : PropertyConstraintDefinition in method public equals(o Object) : boolean in class org.neo4j.kernel.impl.coreapi.schema.PropertyConstraintDefinition",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraintRule to UniquePropertyConstraintRule in method public uniquenessConstraintRule(id long, labelId int, propertyKeyId int, ownedIndexRule long) : UniquePropertyConstraintRule in class org.neo4j.kernel.impl.store.UniquePropertyConstraintRule",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type UniquenessConstraintRule to UniquePropertyConstraintRule in method public readUniquenessConstraintRule(id long, labelId int, buffer ByteBuffer) : UniquePropertyConstraintRule in class org.neo4j.kernel.impl.store.UniquePropertyConstraintRule",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.kernel.api.constraints.PropertyConstraint from classes [org.neo4j.kernel.api.constraints.UniquenessConstraint]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match1"
	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.kernel.impl.store.PropertyConstraintRule from classes [org.neo4j.kernel.impl.store.UniquePropertyConstraintRule]",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public equals(obj Object) : boolean from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public equals(obj Object) : boolean from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public hashCode() : int from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public hashCode() : int from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public label() : int from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public label() : int from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public propertyKeyId() : int from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public propertyKeyId() : int from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public toString() : String from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public toString() : String from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public userDescription(tokenNameLookup TokenNameLookup) : String from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public userDescription(tokenNameLookup TokenNameLookup) : String from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private labelId : int from class org.neo4j.kernel.api.constraints.UniquenessConstraint to private labelId : int from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private propertyKeyId : int from class org.neo4j.kernel.api.constraints.UniquenessConstraint to private propertyKeyId : int from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public equals(labelId int, propertyKeyId int) : boolean from class org.neo4j.kernel.api.constraints.UniquenessConstraint to public equals(type ConstraintType, labelId int, propertyKeyId int) : boolean from class org.neo4j.kernel.api.constraints.PropertyConstraint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(labelId int, propertyKeyId int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.api.SchemaWrite",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(constraint PropertyConstraint) : void in class org.neo4j.kernel.api.SchemaWrite",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDoDrop(constraint PropertyConstraint) : void in class org.neo4j.kernel.api.txstate.TransactionState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDoUnRemove(constraint PropertyConstraint) : boolean in class org.neo4j.kernel.api.txstate.TransactionState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public visitAddedConstraint(element UniquenessConstraint) : void renamed to public visitAddedUniquePropertyConstraint(element UniquenessConstraint) : void in class org.neo4j.kernel.api.txstate.TxStateVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public visitRemovedConstraint(element UniquenessConstraint) : void renamed to public visitRemovedUniquePropertyConstraint(element UniquenessConstraint) : void in class org.neo4j.kernel.api.txstate.TxStateVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public uniquenessConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint renamed to public uniquePropertyConstraintCreate(state KernelStatement, labelId int, propertyKeyId int) : UniquenessConstraint in class org.neo4j.kernel.impl.api.operations.SchemaWriteOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public constraintDrop(state KernelStatement, constraint PropertyConstraint) : void in class org.neo4j.kernel.impl.api.operations.SchemaWriteOperations",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type constraint : UniquenessConstraint to constraint : PropertyConstraint in method public visitUniqueConstraint(constraint PropertyConstraint, userDescription String) : void in class org.neo4j.kernel.impl.util.dbstructure.DbStructureVisitor",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "03ece4f24163204d8a3948eb53576f1feaa86a61",
	"url": "https://github.com/neo4j/neo4j/commit/03ece4f24163204d8a3948eb53576f1feaa86a61",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method protected releaseFileLockAndCloseFileChannel() : void renamed to protected closeFileChannel() : void in class org.neo4j.kernel.impl.store.CommonAbstractStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable resolver : DependencyResolver in method public shouldContainTransactionsThatHappenDuringBackupProcess() : void from class org.neo4j.backup.BackupServiceIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable resolver : DependencyResolver in method public run() : void from class org.neo4j.backup.BackupServiceIT.shouldContainTransactionsThatHappenDuringBackupProcess.execute",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "b83e6a535cbca21d5ea764b0c49bfca8a9ff9db4",
	"url": "https://github.com/neo4j/neo4j/commit/b83e6a535cbca21d5ea764b0c49bfca8a9ff9db4",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method protected getAllNodes(propertyValue String) : List<Long> renamed to protected getAllNodesWithProperty(propertyValue String) : List<Long> in class org.neo4j.kernel.api.index.IndexAccessorCompatibility",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public newMatchAllQuery() : Query renamed to public newAllQuery() : Query in class org.neo4j.kernel.api.impl.index.LuceneDocumentStructure",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public newQuery(value Object) : Query renamed to public newValueQuery(value Object) : Query in class org.neo4j.kernel.api.impl.index.LuceneDocumentStructure",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public newQueryForChangeOrRemove(nodeId long) : Term renamed to public newTermForChangeOrRemove(nodeId long) : Term in class org.neo4j.kernel.api.impl.index.LuceneDocumentStructure",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected query(query Query) : PrimitiveLongIterator extracted from public lookup(value Object) : PrimitiveLongIterator in class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReader",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected query(query Query) : PrimitiveLongIterator extracted from public scan() : PrimitiveLongIterator in class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReader",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest from classes [org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest, org.neo4j.kernel.api.impl.index.LuceneUniqueIndexAccessorReaderTest]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private BUFFER_SIZE_LIMIT : int from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected BUFFER_SIZE_LIMIT : int from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private closeable : Closeable from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected closeable : Closeable from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private documentLogic : LuceneDocumentStructure from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected documentLogic : LuceneDocumentStructure from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private searcher : IndexSearcher from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected searcher : IndexSearcher from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private reader : IndexReader from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected reader : IndexReader from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private terms : TermEnum from class org.neo4j.kernel.api.impl.index.LuceneIndexAccessorReaderTest to protected terms : TermEnum from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private closeable : Closeable from class org.neo4j.kernel.api.impl.index.LuceneUniqueIndexAccessorReaderTest to protected closeable : Closeable from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private documentLogic : LuceneDocumentStructure from class org.neo4j.kernel.api.impl.index.LuceneUniqueIndexAccessorReaderTest to protected documentLogic : LuceneDocumentStructure from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private searcher : IndexSearcher from class org.neo4j.kernel.api.impl.index.LuceneUniqueIndexAccessorReaderTest to protected searcher : IndexSearcher from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private reader : IndexReader from class org.neo4j.kernel.api.impl.index.LuceneUniqueIndexAccessorReaderTest to protected reader : IndexReader from class org.neo4j.kernel.api.impl.index.AbstractLuceneIndexAccessorReaderTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "d3533c1a0716ca114d294b3ea183504c9725698f",
	"url": "https://github.com/neo4j/neo4j/commit/d3533c1a0716ca114d294b3ea183504c9725698f",
	"refactorings": [{
	"type": "Rename Class",
	"description": "Rename Class org.neo4j.ndp.transport.socket.client.WebSocketConnection renamed to org.neo4j.ndp.transport.socket.client.SecureWebSocketConnection",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.ndp.transport.socket.client.NaiveTrustManager",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.ndp.transport.socket.client.SecureSocketConnection",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.server.configuration.ServerConfigurationMigrator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.server.security.ssl.Certificates",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.server.security.ssl.InsecureRandom",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.1 was converted to org.neo4j.server.configuration.ServerSettingsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.ndp.transport.socket.client.NaiveTrustManager",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.ndp.transport.socket.client.SecureSocketConnection",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.server.configuration.ServerConfigurationMigrator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.server.security.ssl.Certificates",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.server.security.ssl.InsecureRandom",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Convert Anonymous Class to Type",
	"description": "Convert Anonymous Class to Type org.neo4j.server.web.TestJetty9WebServer.2 was converted to org.neo4j.server.configuration.ServerSettingsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createNewThread(group Group, job Runnable, metadata Map<String,String>) : Thread extracted from public schedule(group Group, job Runnable, metadata Map<String,String>) : JobHandle in class org.neo4j.kernel.impl.util.Neo4jJobScheduler",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable scheduler : JobScheduler in method public newKernelExtension(dependencies Dependencies) : Lifecycle from class org.neo4j.ext.NDPKernelExtension",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type socket : Socket to conn : SecureSocketConnection in method private serverResponds(host String, port int) : boolean in class org.neo4j.ext.NDPExtensionIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable socket : Socket to conn : SecureSocketConnection in method private serverResponds(host String, port int) : boolean in class org.neo4j.ext.NDPExtensionIT",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute workerGroup : EventLoopGroup to selectorGroup : EventLoopGroup in class org.neo4j.ndp.transport.socket.NettyServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type certFactory : SslCertificateFactory to certFactory : Certificates in method protected initHttpsKeyStore() : KeyStoreInformation in class org.neo4j.server.AbstractNeoServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute sslCertificateFactory : SslCertificateFactory to certFactory : Certificates in class org.neo4j.server.security.ssl.KeyStoreFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type sslCertificateFactory : SslCertificateFactory to certFactory : Certificates in class org.neo4j.server.security.ssl.KeyStoreFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter keyStorePath : String to keyStore : KeyStore in method public KeyStoreInformation(keyStore KeyStore, keyStorePassword char[], keyPassword char[]) in class org.neo4j.server.security.ssl.KeyStoreInformation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type keyStorePath : String to keyStore : KeyStore in method public KeyStoreInformation(keyStore KeyStore, keyStorePassword char[], keyPassword char[]) in class org.neo4j.server.security.ssl.KeyStoreInformation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute keyStorePath : String to keyStore : KeyStore in class org.neo4j.server.security.ssl.KeyStoreInformation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type keyStorePath : String to keyStore : KeyStore in class org.neo4j.server.security.ssl.KeyStoreInformation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter config : KeyStoreInformation to ksInfo : KeyStoreInformation in method private createSslConnectionFactory(ksInfo KeyStoreInformation) : SslConnectionFactory in class org.neo4j.server.security.ssl.SslSocketConnectorFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type sslFactory : SslCertificateFactory to sslFactory : Certificates in method public shouldCreateASelfSignedCertificate() : void in class org.neo4j.server.security.ssl.TestSslCertificateFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute server : Jetty9WebServer to webServer : Jetty9WebServer in method public shouldBeAbleToRestart() : void in class org.neo4j.server.web.TestJetty9WebServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute testBootstrapper : WrappingNeoServerBootstrapper to server : CommunityNeoServer in method public shouldDisallowDirectoryListings() : void in class org.neo4j.server.web.TestJetty9WebServer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type testBootstrapper : WrappingNeoServerBootstrapper to server : CommunityNeoServer in method public shouldDisallowDirectoryListings() : void in class org.neo4j.server.web.TestJetty9WebServer",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "4beba7bbdf927486a5cbf298a0fb2be50905a590",
	"url": "https://github.com/neo4j/neo4j/commit/4beba7bbdf927486a5cbf298a0fb2be50905a590",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.MandatoryNodePropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.MandatoryNodePropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.MandatoryRelationshipPropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.MandatoryRelationshipPropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.NodePropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.NodePropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.PropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.PropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.RelationshipPropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.RelationshipPropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.neo4j.kernel.impl.store.UniquePropertyConstraintRule moved to org.neo4j.kernel.impl.store.record.UniquePropertyConstraintRule",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/neo4j/neo4j.git",
	"sha1": "4712de476aabe69cd762233c9641dd3cf9f8361b",
	"url": "https://github.com/neo4j/neo4j/commit/4712de476aabe69cd762233c9641dd3cf9f8361b",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method protected runInternalArnoldi(iterations int) : int renamed to protected runInternalIteration() : int in class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase from classes [org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi, org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getCentrality(node Node) : Double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public getCentrality(node Node) : Double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public reset() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public reset() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public calculate() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public calculate() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public runIterations(maxNrIterations int) : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public runIterations(maxNrIterations int) : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected changeSignBasedOnFirstNoneZeroValue() : void extracted from public runIterations(maxNrIterations int) : int in class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected processRelationship(newValues Map<Node,Double>, relationship Relationship, backwards boolean) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected processRelationship(newValues Map<Node,Double>, relationship Relationship, backwards boolean) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected normalize(vector Map<Node,Double>) : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected normalize(vector Map<Node,Double>) : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private timeToStop(oldValues Map<Node,Double>, newValues Map<Node,Double>) : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to private timeToStop(oldValues Map<Node,Double>, newValues Map<Node,Double>) : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getTotalIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public getTotalIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getMaxIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public getMaxIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setMaxIterations(maxIterations int) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to public setMaxIterations(maxIterations int) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected relationDirection : Direction from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected relationDirection : Direction from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected costEvaluator : CostEvaluator<Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected costEvaluator : CostEvaluator<Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected relationshipSet : Set<Relationship> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected relationshipSet : Set<Relationship> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected precision : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected precision : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected nodeSet : Set<Node> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected nodeSet : Set<Node> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected doneCalculation : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected doneCalculation : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected values : Map<Node,Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected values : Map<Node,Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected totalIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected totalIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private maxIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityArnoldi to protected maxIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getCentrality(node Node) : Double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public getCentrality(node Node) : Double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public reset() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public reset() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public calculate() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public calculate() : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public runIterations(maxNrIterations int) : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public runIterations(maxNrIterations int) : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected changeSignBasedOnFirstNoneZeroValue() : void extracted from public runIterations(maxNrIterations int) : int in class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected processRelationship(newValues Map<Node,Double>, relationship Relationship, backwards boolean) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected processRelationship(newValues Map<Node,Double>, relationship Relationship, backwards boolean) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private timeToStop(oldValues Map<Node,Double>, newValues Map<Node,Double>) : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to private timeToStop(oldValues Map<Node,Double>, newValues Map<Node,Double>) : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getTotalIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public getTotalIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getMaxIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public getMaxIterations() : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setMaxIterations(maxIterations int) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to public setMaxIterations(maxIterations int) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected relationDirection : Direction from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected relationDirection : Direction from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected costEvaluator : CostEvaluator<Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected costEvaluator : CostEvaluator<Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected relationshipSet : Set<Relationship> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected relationshipSet : Set<Relationship> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected precision : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected precision : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected nodeSet : Set<Node> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected nodeSet : Set<Node> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected doneCalculation : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected doneCalculation : boolean from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected values : Map<Node,Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected values : Map<Node,Double> from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected totalIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected totalIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private maxIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected maxIterations : int from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type void to double in method protected normalize(vector Map<Node,Double>) : double in class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected normalize(vector Map<Node,Double>) : void from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityPower to protected normalize(vector Map<Node,Double>) : double from class org.neo4j.graphalgo.impl.centrality.EigenvectorCentralityBase",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/WhisperSystems/TextSecure.git",
	"sha1": "f0b2cc559026871c1b4d8e008666afb590553004",
	"url": "https://github.com/WhisperSystems/TextSecure/commit/f0b2cc559026871c1b4d8e008666afb590553004",
	"refactorings": [{
	"type": "Extract Variable",
	"description": "Extract Variable replyAction : Action in method private sendSingleThreadNotification(context Context, masterSecret MasterSecret, notificationState NotificationState, signal boolean) : void from class org.thoughtcrime.securesms.notifications.MessageNotifier",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private craftIntent(context Context, intentAction String, extras Bundle) : PendingIntent extracted from public getMarkAsReadIntent(context Context, masterSecret MasterSecret) : PendingIntent in class org.thoughtcrime.securesms.notifications.NotificationState",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/redsolution/xabber-android.git",
	"sha1": "faaf826e901f43d1b46105b18e655eb120f3ffef",
	"url": "https://github.com/redsolution/xabber-android/commit/faaf826e901f43d1b46105b18e655eb120f3ffef",
	"refactorings": [{
	"type": "Extract Interface",
	"description": "Extract Interface com.xabber.android.ui.ContactAdder from classes [com.xabber.android.ui.ContactAddFragment]",
	"motivations": [ 
	{ 
                "label": "EI: Facilitate extension",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/restlet/restlet-framework-java.git",
	"sha1": "7ffe37983e2f09637b0c84d526a2f824de652de4",
	"url": "https://github.com/restlet/restlet-framework-java/commit/7ffe37983e2f09637b0c84d526a2f824de652de4",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private fillRepresentation(model Model, name String, contract Contract) : void extracted from private fillRepresentations(swagger Swagger, contract Contract) : void in class org.restlet.ext.apispark.internal.conversion.swagger.v2_0.Swagger2Reader",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "match2"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type key : String to definition : Entry<String,Model> in method private fillRepresentations(swagger Swagger, contract Contract) : void in class org.restlet.ext.apispark.internal.conversion.swagger.v2_0.Swagger2Reader",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable key : String to definition : Entry<String,Model> in method private fillRepresentations(swagger Swagger, contract Contract) : void in class org.restlet.ext.apispark.internal.conversion.swagger.v2_0.Swagger2Reader",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/loopj/android-async-http.git",
	"sha1": "af7e9e4bcd90504d6a665dbb21635eb1733fe025",
	"url": "https://github.com/loopj/android-async-http/commit/af7e9e4bcd90504d6a665dbb21635eb1733fe025",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private TAG : WeakReference<Object> from class com.loopj.android.http.RequestHandle to private TAG : WeakReference<Object> from class com.loopj.android.http.AsyncHttpResponseHandler",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/datastax/java-driver.git",
	"sha1": "1edac0e92080e7c5e971b2d56c8753bf44ea8a6c",
	"url": "https://github.com/datastax/java-driver/commit/1edac0e92080e7c5e971b2d56c8753bf44ea8a6c",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getNewConnectionThreshold(distance HostDistance) : int extracted from public getMaxSimultaneousRequestsPerConnectionThreshold(distance HostDistance) : int in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public setNewConnectionThreshold(distance HostDistance, newValue int) : PoolingOptions extracted from public setMaxSimultaneousRequestsPerConnectionThreshold(distance HostDistance, newMaxSimultaneousRequests int) : PoolingOptions in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter newMaxSimultaneousRequests : int to newValue : int in method public setNewConnectionThreshold(distance HostDistance, newValue int) : PoolingOptions in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public getMaxRequestsPerConnection(distance HostDistance) : int extracted from public getMaxSimultaneousRequestsPerHostThreshold(distance HostDistance) : int in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public setMaxRequestsPerConnection(distance HostDistance, newMaxRequests int) : PoolingOptions extracted from public setMaxSimultaneousRequestsPerHostThreshold(distance HostDistance, newMaxRequests int) : PoolingOptions in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute maxSimultaneousRequestsPerConnection : int[] to newConnectionThreshold : int[] in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute maxSimultaneousRequestsPerHostLocal : int to maxRequestsPerConnectionLocal : int in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute maxSimultaneousRequestsPerHostRemote : int to maxRequestsPerConnectionRemote : int in class com.datastax.driver.core.PoolingOptions",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/datastax/java-driver.git",
	"sha1": "3a0603f8f778be3219a5a0f3a7845cda65f1e172",
	"url": "https://github.com/datastax/java-driver/commit/3a0603f8f778be3219a5a0f3a7845cda65f1e172",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public values(names List<String>, values List<Object>) : Insert extracted from public values(names String[], values Object[]) : Insert in class com.datastax.driver.core.querybuilder.Insert",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/jfinal/jfinal.git",
	"sha1": "881baed894540031bd55e402933bcad28b74ca88",
	"url": "https://github.com/jfinal/jfinal/commit/881baed894540031bd55e402933bcad28b74ca88",
	"refactorings": [{
	"type": "Rename Class",
	"description": "Rename Class com.jfinal.plugin.activerecord.tx.TxByActionMethods renamed to com.jfinal.plugin.activerecord.tx.TxByMethods",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class com.jfinal.aop.ActionInvocationWrapper renamed to com.jfinal.aop.InvocationWrapper",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move And Rename Class",
	"description": "Move And Rename Class com.jfinal.core.ActionInvocation moved and renamed to com.jfinal.aop.Invocation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.InterceptorStack",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.InterceptorStack",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.PrototypeInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.PrototypeInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Integer to int in method public getMaxPostSize() : int in class com.jfinal.config.Constants",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type maxPostSize : Integer to maxPostSize : int in class com.jfinal.config.Constants",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type maxPostSize : Integer to maxPostSize : int in method public setMaxPostSize(maxPostSize int) : void in class com.jfinal.config.Constants",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter globalInterceptor : Interceptor to globalActionInterceptor : Interceptor in method public add(globalActionInterceptor Interceptor) : Interceptors in class com.jfinal.config.Interceptors",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute interceptorList : List<Interceptor> to globalActionInterceptor : List<Interceptor> in class com.jfinal.config.Interceptors",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable defaultInters : Interceptor[] to globalInters : Interceptor[] in method package buildActionMapping() : void in class com.jfinal.core.ActionMapping",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type interceptorBuilder : InterceptorBuilder to interceptorBuilder : ActionInterceptorBuilder in method package buildActionMapping() : void in class com.jfinal.core.ActionMapping",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable ct : Constants in method private initOreillyCos() : void from class com.jfinal.core.JFinal",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable uploadedFileSaveDirectory : String in method private initOreillyCos() : void from class com.jfinal.core.JFinal",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.GET",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.GET",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.LogInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.LogInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter invocation : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.NoUrlPara",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type invocation : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.NoUrlPara",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.NotAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.NotAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.POST",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.POST",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.Restful",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.Restful",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.SessionInViewInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.ext.interceptor.SessionInViewInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object in method public deleteById(tableName String, idValue Object) : boolean in class com.jfinal.plugin.activerecord.Db",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type idValue : Number to idValue : Object... in method public findById(tableName String, primaryKey String, idValue Object...) : Record in class com.jfinal.plugin.activerecord.Db",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object... in method public deleteById(tableName String, primaryKey String, idValue Object...) : boolean in class com.jfinal.plugin.activerecord.Db",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to idValue : Object... in method public deleteById(tableName String, primaryKey String, idValue Object...) : boolean in class com.jfinal.plugin.activerecord.Db",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object in method public deleteById(tableName String, idValue Object) : boolean in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type idValue : Object to idValue : Object... in method public findById(tableName String, primaryKey String, idValue Object...) : Record in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object... in method public deleteById(tableName String, primaryKey String, idValue Object...) : boolean in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to idValue : Object... in method public deleteById(tableName String, primaryKey String, idValue Object...) : boolean in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type id : Object to ids : Object[] in method package update(config Config, conn Connection, tableName String, primaryKey String, record Record) : boolean in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable id : Object to ids : Object[] in method package update(config Config, conn Connection, tableName String, primaryKey String, record Record) : boolean in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Variable",
	"description": "Merge Variable [primaryKey : String, columns : String] to pKeys : String[] in method public findById(tableName String, primaryKey String, idValue Object...) : Record in class com.jfinal.plugin.activerecord.DbPro",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object in method public deleteById(idValue Object) : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValue : Object in method public findById(idValue Object) : M in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValues : Object... in method private deleteById(table Table, idValues Object...) : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to idValues : Object... in method private deleteById(table Table, idValues Object...) : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to idValues : Object[] in method public findByIdLoadColumns(idValues Object[], columns String) : M in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to idValues : Object[] in method public findByIdLoadColumns(idValues Object[], columns String) : M in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public findById(id Object, columns String) : M renamed to public findByIdLoadColumns(idValues Object[], columns String) : M in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getUsefulClass() : Class<? extends Model> extracted from private find(conn Connection, sql String, paras Object...) : List<M> in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type modelClass : Class<? extends Model> to c : Class in method private getUsefulClass() : Class<? extends Model> in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable modelClass : Class<? extends Model> to c : Class in method private getUsefulClass() : Class<? extends Model> in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type id : Object to ids : Object[] in method public delete() : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable id : Object to ids : Object[] in method public delete() : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method public update() : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method public update() : boolean in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method private getGeneratedKey(pst PreparedStatement, table Table, config Config) : void in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method private getGeneratedKey(pst PreparedStatement, table Table, config Config) : void in class com.jfinal.plugin.activerecord.Model",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type String to String[] in method public getPrimaryKey() : String[] in class com.jfinal.plugin.activerecord.Table",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type primaryKey : String to primaryKey : String[] in class com.jfinal.plugin.activerecord.Table",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable keyArr : String[] to arr : String[] in method package setPrimaryKey(primaryKey String) : void in class com.jfinal.plugin.activerecord.Table",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to void in method package build(tableList List<Table>, config Config) : void in class com.jfinal.plugin.activerecord.TableBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable columnsArray : String[] to pKeys : String[] in method public forModelFindById(table Table, columns String) : String in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.AnsiSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type primaryKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable primaryKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable columnsArray : String[] to arr : String[] in method public forModelFindById(table Table, columns String) : String in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.MysqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method public forModelSave(table Table, attrs Map<String,Object>, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method public forModelSave(table Table, attrs Map<String,Object>, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable columnsArray : String[] to pKeys : String[] in method public forModelFindById(table Table, columns String) : String in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable colName : String in method public forDbSave(sql StringBuilder, paras List<Object>, tableName String, pKeys String[], record Record) : void from class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.OracleDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type primaryKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable primaryKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable columnsArray : String[] to arr : String[] in method public forModelFindById(table Table, columns String) : String in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.PostgreSqlDialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable pKey : String to pKeys : String[] in method public forModelDeleteById(table Table) : String in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable columnsArray : String[] to pKeys : String[] in method public forModelFindById(table Table, columns String) : String in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Sqlite3Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public getConfigWithTxConfig(inv Invocation) : Config in class com.jfinal.plugin.activerecord.tx.Tx",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public getConfigWithTxConfig(inv Invocation) : Config in class com.jfinal.plugin.activerecord.tx.Tx",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.Tx",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.Tx",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByActionKeys",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByActionKeys",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByRegex",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByRegex",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method private buildCacheName(inv Invocation, controller Controller) : String in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method private buildCacheName(inv Invocation, controller Controller) : String in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method private buildCacheKey(inv Invocation, controller Controller) : String in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method private buildCacheKey(inv Invocation, controller Controller) : String in class com.jfinal.plugin.ehcache.CacheInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.ehcache.EvictInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.ehcache.EvictInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method private buildCacheName(inv Invocation) : String in class com.jfinal.plugin.ehcache.EvictInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method private buildCacheName(inv Invocation) : String in class com.jfinal.plugin.ehcache.EvictInterceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type fileRenamePolicy : DefaultFileRenamePolicy to fileRenamePolicy : FileRenamePolicy in class com.jfinal.upload.MultipartRequest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type invocation : ActionInvocation to invocation : Invocation in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type invocation : ActionInvocation to invocation : Invocation in method public intercept(invocation Invocation) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter field : String to value : String in method private validateStringValue(value String, minLen int, maxLen int, errorKey String, errorMessage String) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method protected validateString(field String, notBlank boolean, minLen int, maxLen int, errorKey String, errorMessage String) : void renamed to private validateStringValue(value String, minLen int, maxLen int, errorKey String, errorMessage String) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private validateIntegerValue(value String, min int, max int, errorKey String, errorMessage String) : void extracted from protected validateInteger(field String, min int, max int, errorKey String, errorMessage String) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private validateLongValue(value String, min long, max long, errorKey String, errorMessage String) : void extracted from protected validateLong(field String, min long, max long, errorKey String, errorMessage String) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private validateLongValue(value String, errorKey String, errorMessage String) : void extracted from protected validateLong(field String, errorKey String, errorMessage String) : void in class com.jfinal.validate.Validator",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByMethods",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.plugin.activerecord.tx.TxByMethods",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter actionInvocation : ActionInvocation to invocation : Invocation in method package InvocationWrapper(invocation Invocation, inters Interceptor[]) in class com.jfinal.aop.InvocationWrapper",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type actionInvocation : ActionInvocation to invocation : Invocation in method package InvocationWrapper(invocation Invocation, inters Interceptor[]) in class com.jfinal.aop.InvocationWrapper",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute actionInvocation : ActionInvocation to invocation : Invocation in class com.jfinal.aop.InvocationWrapper",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type actionInvocation : ActionInvocation to invocation : Invocation in class com.jfinal.aop.InvocationWrapper",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable cause : Throwable to t : Throwable in method public invoke() : void in class com.jfinal.aop.Invocation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute controller : Controller to target : Object in class com.jfinal.aop.Invocation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type controller : Controller to target : Object in class com.jfinal.aop.Invocation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.Interceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type ai : ActionInvocation to inv : Invocation in method public intercept(inv Invocation) : void in class com.jfinal.aop.Interceptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type primaryKey : String to pKeys : String[] in method public abstract forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type id : Object to ids : Object[] in method public abstract forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter primaryKey : String to pKeys : String[] in method public abstract forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Dialect",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter id : Object to ids : Object[] in method public abstract forDbUpdate(tableName String, pKeys String[], ids Object[], record Record, sql StringBuilder, paras List<Object>) : void in class com.jfinal.plugin.activerecord.dialect.Dialect",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/oblac/jodd.git",
	"sha1": "722ef9156896248ef3fbe83adde0f6ff8f46856a",
	"url": "https://github.com/oblac/jodd/commit/722ef9156896248ef3fbe83adde0f6ff8f46856a",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected resolveFormEncoding() : String extracted from protected formBuffer() : Buffer in class jodd.http.HttpBase",
	"motivations": [ 
	{ 
			"label": "EM: Extract reusable method",
			"status": "match2"
	} ]
}
]},{	"repository": "https://github.com/realm/realm-java.git",
	"sha1": "6cf596df183b3c3a38ed5dd9bb3b0100c6548ebb",
	"url": "https://github.com/realm/realm-java/commit/6cf596df183b3c3a38ed5dd9bb3b0100c6548ebb",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private showStatus(txt String) : void extracted from private showStatus(realm Realm) : void in class io.realm.examples.realmmigrationexample.MigrationExampleActivity",
	"motivations": [ 
	{ 
		"label": "EM: Introduce alternative method signature",
		"status": "match2"
	} ]
}
]},{	"repository": "https://github.com/bennidi/mbassador.git",
	"sha1": "40e41d11d7847d660bba6691859b0506514bd0ac",
	"url": "https://github.com/bennidi/mbassador/commit/40e41d11d7847d660bba6691859b0506514bd0ac",
	"refactorings": [{
	"type": "Rename Class",
	"description": "Rename Class net.engio.mbassy.ConditionalHandlers renamed to net.engio.mbassy.ConditionalHandlerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable publishAndCheck : Runnable to asynchronousPublication : Runnable in method public testExceptionInHandlerInvocation() : void in class net.engio.mbassy.SyncAsyncTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type message : StandardMessage to message : Object in method public handle(message Object) : void in class net.engio.mbassy.listeners.ExceptionThrowingListener",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute PublicationError : String to PublicationErrorHandlers : String in class net.engio.mbassy.bus.common.Properties.Handler",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/hazelcast/hazelcast.git",
	"sha1": "679d38d4316c16ccba4982d7f3ba13c147a451cb",
	"url": "https://github.com/hazelcast/hazelcast/commit/679d38d4316c16ccba4982d7f3ba13c147a451cb",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected getFromNearCache(keyData Data, async boolean) : Object extracted from protected getInternal(key K, expiryPolicy ExpiryPolicy, async boolean) : Object in class com.hazelcast.client.cache.impl.AbstractClientCacheProxy",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected getFromNearCache(keyData Data, async boolean) : Object extracted from protected getInternal(key K, expiryPolicy ExpiryPolicy, async boolean) : Object in class com.hazelcast.client.cache.impl.AbstractClientCacheProxy",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type newPut : boolean to oldRecord : R in method public put(key K, value V) : void in class com.hazelcast.cache.impl.nearcache.impl.store.AbstractNearCacheRecordStore",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable newPut : boolean to oldRecord : R in method public put(key K, value V) : void in class com.hazelcast.cache.impl.nearcache.impl.store.AbstractNearCacheRecordStore",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/hazelcast/hazelcast.git",
	"sha1": "69dd55c93fc99c5f7a1e2c21f10e671e311be49e",
	"url": "https://github.com/hazelcast/hazelcast/commit/69dd55c93fc99c5f7a1e2c21f10e671e311be49e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.client.impl.protocol.util.Int2ObjectHashMap.Supplier moved to com.hazelcast.util.function.Supplier",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.client.impl.protocol.util.Int2ObjectHashMap moved to com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.client.protocol.Int2ObjectHashMapTest moved to com.hazelcast.util.collection.Int2ObjectHashMapTest",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type valueCollection : ValueCollection<V> to valueCollection : ValueCollection in class com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type entrySet : EntrySet<V> to entrySet : EntrySet in class com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter supplier : Supplier<V> to mappingFunction : IntFunction<? extends V> in method public computeIfAbsent(key int, mappingFunction IntFunction<? extends V>) : V in class com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type supplier : Supplier<V> to mappingFunction : IntFunction<? extends V> in method public computeIfAbsent(key int, mappingFunction IntFunction<? extends V>) : V in class com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getOrDefault(key int, supplier Supplier<V>) : V renamed to public computeIfAbsent(key int, mappingFunction IntFunction<? extends V>) : V in class com.hazelcast.util.collection.Int2ObjectHashMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public UTF_8 : Charset from class com.hazelcast.client.impl.protocol.util.SafeBuffer to public UTF_8 : Charset from class com.hazelcast.nio.Bits",
	"motivations": [ 
	{ 
                "label": "MA: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public UTF_8 : Charset from class com.hazelcast.client.impl.protocol.util.UnsafeBuffer to public UTF_8 : Charset from class com.hazelcast.nio.Bits",
	"motivations": [ 
	{ 
                "label": "MA: Remove duplication",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/hazelcast/hazelcast.git",
	"sha1": "f1e26fa73074a89680a2e1756d85eb80ad87c3bf",
	"url": "https://github.com/hazelcast/hazelcast/commit/f1e26fa73074a89680a2e1756d85eb80ad87c3bf",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.BetweenPredicate moved to com.hazelcast.query.impl.predicates.BetweenPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.NotPredicate moved to com.hazelcast.query.impl.predicates.NotPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.InPredicate moved to com.hazelcast.query.impl.predicates.InPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.RegexPredicate moved to com.hazelcast.query.impl.predicates.RegexPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.LikePredicate moved to com.hazelcast.query.impl.predicates.LikePredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.ILikePredicate moved to com.hazelcast.query.impl.predicates.ILikePredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.AndPredicate moved to com.hazelcast.query.impl.predicates.AndPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.OrPredicate moved to com.hazelcast.query.impl.predicates.OrPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.GreaterLessPredicate moved to com.hazelcast.query.impl.predicates.GreaterLessPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.NotEqualPredicate moved to com.hazelcast.query.impl.predicates.NotEqualPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.EqualPredicate moved to com.hazelcast.query.impl.predicates.EqualPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.AbstractPredicate moved to com.hazelcast.query.impl.predicates.AbstractPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.query.Predicates.InstanceOfPredicate moved to com.hazelcast.query.impl.predicates.InstanceOfPredicate",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private readAttribute(entry Map.Entry, attribute String) : Comparable from class com.hazelcast.query.Predicates to package readAttribute(entry Map.Entry, attribute String) : Comparable from class com.hazelcast.query.impl.predicates.AttributeUtils",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/hazelcast/hazelcast.git",
	"sha1": "e66e49cd4a9dd8027204f712f780170a5c129f5b",
	"url": "https://github.com/hazelcast/hazelcast/commit/e66e49cd4a9dd8027204f712f780170a5c129f5b",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.hazelcast.spi.ServiceInfo moved to com.hazelcast.spi.impl.servicemanager.ServiceInfo",
	"motivations": [ 
	{ 
                "label": "MC: Remove from public API",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/querydsl/querydsl.git",
	"sha1": "09b9d989658ef5bf9333c081c92b57a7611ad207",
	"url": "https://github.com/querydsl/querydsl/commit/09b9d989658ef5bf9333c081c92b57a7611ad207",
	"refactorings": [{
	"type": "Extract Superclass",
	"description": "Extract Superclass com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest from classes [com.querydsl.sql.types.JSR310InstantTypeTest, com.querydsl.sql.types.JSR310LocalDateTimeTypeTest, com.querydsl.sql.types.JSR310LocalDateTypeTest, com.querydsl.sql.types.JSR310LocalTimeTypeTest, com.querydsl.sql.types.JSR310OffsetDateTimeTypeTest, com.querydsl.sql.types.JSR310OffsetTimeTypeTest, com.querydsl.sql.types.JSR310ZonedDateTimeTypeTest]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310InstantTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310LocalDateTimeTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310LocalDateTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310LocalTimeTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310OffsetDateTimeTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310OffsetTimeTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTC : Calendar from class com.querydsl.sql.types.JSR310ZonedDateTimeTypeTest to protected UTC : Calendar from class com.querydsl.sql.types.AbstractJSR310DateTimeTypeTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/mockito/mockito.git",
	"sha1": "2d036ecf1d7170b4ec7346579a1ef8904109530a",
	"url": "https://github.com/mockito/mockito/commit/2d036ecf1d7170b4ec7346579a1ef8904109530a",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private allMockedTypes(features MockFeatures<T>) : Class<?>[] extracted from public generateMockClass(features MockFeatures<T>) : Class<? extends T> in class org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/mrniko/redisson.git",
	"sha1": "186357ac6c2da1a5a12c0287a08408ac5ec6683b",
	"url": "https://github.com/mrniko/redisson/commit/186357ac6c2da1a5a12c0287a08408ac5ec6683b",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public createClient(host String, port int, timeout int) : RedisClient extracted from public createClient(host String, port int) : RedisClient in class org.redisson.connection.MasterSlaveConnectionManager",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/belaban/JGroups.git",
	"sha1": "f1533756133dec84ce8218202585ac85904da7c9",
	"url": "https://github.com/belaban/JGroups/commit/f1533756133dec84ce8218202585ac85904da7c9",
	"refactorings": [{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type memberList : List<String> to memberList : List<InetSocketAddress> in class org.jgroups.auth.FixedMembershipToken",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public match(sender IpAddress, addr InetSocketAddress) : boolean extracted from public authenticate(token AuthToken, msg Message) : boolean in class org.jgroups.auth.FixedMembershipToken",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public isInMembersList(sender IpAddress) : boolean extracted from public authenticate(token AuthToken, msg Message) : boolean in class org.jgroups.auth.FixedMembershipToken",
	"motivations": [ 
	{ 
                "label": "EM: Improve testability",
                "status": "match2"
	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type member : String to addr : InetSocketAddress in method public isInMembersList(sender IpAddress) : boolean in class org.jgroups.auth.FixedMembershipToken",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable member : String to addr : InetSocketAddress in method public isInMembersList(sender IpAddress) : boolean in class org.jgroups.auth.FixedMembershipToken",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Activiti/Activiti.git",
	"sha1": "53036cece662f9c796d2a187b0077059c3d9088a",
	"url": "https://github.com/Activiti/Activiti/commit/53036cece662f9c796d2a187b0077059c3d9088a",
	"refactorings": [{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected asynchronous : boolean from class org.activiti.bpmn.model.Activity to protected asynchronous : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected asynchronous : boolean from class org.activiti.bpmn.model.Gateway to protected asynchronous : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected notExclusive : boolean from class org.activiti.bpmn.model.Activity to protected notExclusive : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected notExclusive : boolean from class org.activiti.bpmn.model.Gateway to protected notExclusive : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public isAsynchronous() : boolean from class org.activiti.bpmn.model.Activity to public isAsynchronous() : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public isAsynchronous() : boolean from class org.activiti.bpmn.model.Gateway to public isAsynchronous() : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setAsynchronous(asynchronous boolean) : void from class org.activiti.bpmn.model.Activity to public setAsynchronous(asynchronous boolean) : void from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setAsynchronous(asynchronous boolean) : void from class org.activiti.bpmn.model.Gateway to public setAsynchronous(asynchronous boolean) : void from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public isNotExclusive() : boolean from class org.activiti.bpmn.model.Activity to public isNotExclusive() : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public isNotExclusive() : boolean from class org.activiti.bpmn.model.Gateway to public isNotExclusive() : boolean from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setNotExclusive(notExclusive boolean) : void from class org.activiti.bpmn.model.Activity to public setNotExclusive(notExclusive boolean) : void from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setNotExclusive(notExclusive boolean) : void from class org.activiti.bpmn.model.Gateway to public setNotExclusive(notExclusive boolean) : void from class org.activiti.bpmn.model.FlowNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/Activiti/Activiti.git",
	"sha1": "a70ca1d9ad2ea07b19c5e1f9540c809d7a12d3fb",
	"url": "https://github.com/Activiti/Activiti/commit/a70ca1d9ad2ea07b19c5e1f9540c809d7a12d3fb",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected flushPersistentObjects(persistentObjectClass Class<? extends PersistentObject>, persistentObjectsToInsert List<PersistentObject>) : void extracted from protected flushInserts() : void in class org.activiti.engine.impl.db.DbSqlSession",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected flushPersistentObjects(persistentObjectClass Class<? extends PersistentObject>, persistentObjectsToInsert List<PersistentObject>) : void extracted from protected flushInserts() : void in class org.activiti.engine.impl.db.DbSqlSession",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable clazz : Class<? extends PersistentObject> to persistentObjectClass : Class<? extends PersistentObject> in method protected flushPersistentObjects(persistentObjectClass Class<? extends PersistentObject>, persistentObjectsToInsert List<PersistentObject>) : void in class org.activiti.engine.impl.db.DbSqlSession",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable clazz : Class<? extends PersistentObject> to persistentObjectClass : Class<? extends PersistentObject> in method protected flushInserts() : void in class org.activiti.engine.impl.db.DbSqlSession",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Activiti/Activiti.git",
	"sha1": "ca7d0c3b33a0863bed04c77932b9ef6b1317f34e",
	"url": "https://github.com/Activiti/Activiti/commit/ca7d0c3b33a0863bed04c77932b9ef6b1317f34e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.activiti.engine.impl.persistence.entity.UserEntityTest moved to org.activiti.engine.test.api.identity.UserEntityTest",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/kuujo/copycat.git",
	"sha1": "19a49f8f36b2f6d82534dc13504d672e41a3a8d1",
	"url": "https://github.com/kuujo/copycat/commit/19a49f8f36b2f6d82534dc13504d672e41a3a8d1",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type CompletableFuture<RaftState> to void in method protected transition(state RaftState) : void in class net.kuujo.copycat.raft.state.ActiveState",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected transition : boolean from class net.kuujo.copycat.raft.state.ActiveState to protected transition : boolean from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private handleAppend(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.ActiveState to private handleAppend(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private doCheckPreviousEntry(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.ActiveState to private doCheckPreviousEntry(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private doAppendEntries(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.ActiveState to private doAppendEntries(request AppendRequest) : AppendResponse from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private applyCommits(commitIndex long) : CompletableFuture<Void> from class net.kuujo.copycat.raft.state.ActiveState to private applyCommits(commitIndex long) : CompletableFuture<Void> from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private applyIndex(globalIndex long) : void from class net.kuujo.copycat.raft.state.ActiveState to private applyIndex(globalIndex long) : void from class net.kuujo.copycat.raft.state.PassiveState",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "8d14e557e01cc607dd2db66c29d106ef01aa81f7",
	"url": "https://github.com/facebook/buck/commit/8d14e557e01cc607dd2db66c29d106ef01aa81f7",
	"refactorings": [{
	"type": "Extract Variable",
	"description": "Extract Variable numRules : int in method protected getAllRulesInternal(buildFile Path) : List<Map<String,Object>> from class com.facebook.buck.json.ProjectBuildFileParser",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public get(buildTarget BuildTarget, eventBus Optional<BuckEventBus>) : TargetNode<?> extracted from public get(buildTarget BuildTarget) : TargetNode<?> in class com.facebook.buck.parser.Parser.CachedState",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "84b7b3974ae8171a4de2f804eb94fcd1d6cd6647",
	"url": "https://github.com/facebook/buck/commit/84b7b3974ae8171a4de2f804eb94fcd1d6cd6647",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.facebook.buck.java.ReportGenerator moved to com.facebook.buck.java.coverage.ReportGenerator",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "f26d234e8d3458f34454583c22e3bd5f4b2a5da8",
	"url": "https://github.com/facebook/buck/commit/f26d234e8d3458f34454583c22e3bd5f4b2a5da8",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getDevices() : List<IDevice> extracted from public adbCall(adbCallable AdbCallable) : boolean in class com.facebook.buck.android.AdbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Improve testability",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "89973a5e4f188040c5fcf87fb5a3e9167329d175",
	"url": "https://github.com/facebook/buck/commit/89973a5e4f188040c5fcf87fb5a3e9167329d175",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private installAppleBundleForSimulator(params CommandRunnerParams, appleBundle AppleBundle, projectFilesystem ProjectFilesystem, processExecutor ProcessExecutor) : InstallResult extracted from private installAppleBundle(params CommandRunnerParams, appleBundle AppleBundle, projectFilesystem ProjectFilesystem, processExecutor ProcessExecutor) : InstallResult in class com.facebook.buck.cli.InstallCommand",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "6c93f15f502f39dff99ecb01b56dcad7dddb0f0d",
	"url": "https://github.com/facebook/buck/commit/6c93f15f502f39dff99ecb01b56dcad7dddb0f0d",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method package getEnumerator(rType RType) : ResourceIdEnumerator extracted from public addIntResourceIfNotPresent(rType RType, name String) : void in class com.facebook.buck.android.aapt.AaptResourceCollector",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "6ed4cf9e83fe24fc6ab6fc9ebede016c777c9725",
	"url": "https://github.com/facebook/buck/commit/6ed4cf9e83fe24fc6ab6fc9ebede016c777c9725",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method public sanitize(workingDir Optional<Path>, contents String, expandPaths boolean) : String inlined to public sanitize(workingDir Optional<Path>, contents String) : String in class com.facebook.buck.cxx.DebugPathSanitizer",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public sanitizeWithoutAnyMatchesWithExpandPaths() : void renamed to public sanitizeWithoutAnyMatches() : void in class com.facebook.buck.cxx.DebugPathSanitizerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public sanitizeProjectRootWithoutExpandPaths() : void renamed to public sanitizeProjectRoot() : void in class com.facebook.buck.cxx.DebugPathSanitizerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public sanitizeOtherDirectoriesWithoutExpandPaths() : void renamed to public sanitizeOtherDirectories() : void in class com.facebook.buck.cxx.DebugPathSanitizerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public sanitizeDirectoriesThatArePrefixOfOtherDirectoriesWithoutExpandPaths() : void renamed to public sanitizeDirectoriesThatArePrefixOfOtherDirectories() : void in class com.facebook.buck.cxx.DebugPathSanitizerTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/facebook/buck.git",
	"sha1": "52cfd39ecba349c4d8e2c46eac76ed4d75b7ebae",
	"url": "https://github.com/facebook/buck/commit/52cfd39ecba349c4d8e2c46eac76ed4d75b7ebae",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method public appleSdkPathsBuiltFromDirectory() : void renamed to public iphoneOSSdkPathsBuiltFromDirectory() : void in class com.facebook.buck.apple.AppleCxxPlatformsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public simulatorPlatformSetsLinkerFlags() : void renamed to public iphoneOSSimulatorPlatformSetsLinkerFlags() : void in class com.facebook.buck.apple.AppleCxxPlatformsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createSymLinkSdks(sdks Iterable<String>, root Path, version String) : void extracted from private createSymLinkIosSdks(root Path, version String) : void in class com.facebook.buck.apple.AppleSdkDiscoveryTest",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/jayway/rest-assured.git",
	"sha1": "7cac88b9a28efc05bdc60e585e3291862ffc9da1",
	"url": "https://github.com/jayway/rest-assured/commit/7cac88b9a28efc05bdc60e585e3291862ffc9da1",
	"refactorings": [{
	"type": "Move Method",
	"description": "Move Method public supportsSpecifyingKeystore() : void from class com.jayway.restassured.itest.java.SpecificationBuilderITest to public supportsSpecifyingKeystore() : void from class com.jayway.restassured.itest.java.SSLITest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public supportsOverridingKeystore() : void from class com.jayway.restassured.itest.java.SpecificationBuilderITest to public supportsOverridingKeystore() : void from class com.jayway.restassured.itest.java.SSLITest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/xetorthio/jedis.git",
	"sha1": "d4b4aecbc69bbd04ba87c4e32a52cff3d129906a",
	"url": "https://github.com/xetorthio/jedis/commit/d4b4aecbc69bbd04ba87c4e32a52cff3d129906a",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private poolInactive() : boolean extracted from public getNumActive() : int in class redis.clients.util.Pool",
	"motivations": [ 
            {
                "label": "EM: Remove duplication",
                "status": "match2"
            },
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private poolInactive() : boolean extracted from public getNumIdle() : int in class redis.clients.util.Pool",
	"motivations": [ 
            {
                "label": "EM: Remove duplication",
                "status": "match2"
            },
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private poolInactive() : boolean extracted from public getNumWaiters() : int in class redis.clients.util.Pool",
	"motivations": [ 
            {
                "label": "EM: Remove duplication",
                "status": "match2"
            },
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/droolsjbpm/jbpm.git",
	"sha1": "83cfa21578e63956bca0715eefee2860c3b6d39a",
	"url": "https://github.com/droolsjbpm/jbpm/commit/83cfa21578e63956bca0715eefee2860c3b6d39a",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private prepareWorkItemWithTaskVariables(taskDescriptionParam String) : WorkItemImpl extracted from public testTaskWithVariables() : void in class org.jbpm.services.task.wih.HTWorkItemHandlerBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private testTaskWithExpectedDescription(task Task, expectedDescription String) : void extracted from public testTaskWithVariables() : void in class org.jbpm.services.task.wih.HTWorkItemHandlerBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/droolsjbpm/jbpm.git",
	"sha1": "a739d16d301f0e89ab0b9dfa56b4585bbad6b793",
	"url": "https://github.com/droolsjbpm/jbpm/commit/a739d16d301f0e89ab0b9dfa56b4585bbad6b793",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter name : String to connectionRef : ConnectionRef in method public getConstraint(connectionRef ConnectionRef) : Constraint in class org.jbpm.workflow.core.node.StateNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type name : String to connectionRef : ConnectionRef in method public getConstraint(connectionRef ConnectionRef) : Constraint in class org.jbpm.workflow.core.node.StateNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReady() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReady() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReserved() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReserved() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReservedWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testDelegateFromReservedWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testForwardFromReserved() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testForwardFromReserved() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testForwardFromReservedWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testForwardFromReservedWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testRemoveNotInRecipientList() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2" 	
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testRemoveNotInRecipientList() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateOnOtherThanCreated() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateOnOtherThanCreated() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateOnOtherThanCreated() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateWithIncorrectUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testNominateToUser() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testActivateFromIncorrectStatus() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createUser(id String) : User extracted from public testCompleteWithComments() : void in class org.jbpm.services.task.LifeCycleBaseTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type sessionId : Integer to sessionId : Long in method public getTimerJobInstances(sessionId Long) : Collection<TimerJobInstance> in class org.jbpm.persistence.timer.GlobalJPATimerJobFactoryManager",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/droolsjbpm/jbpm.git",
	"sha1": "3815f293ba9338f423315d93a373608c95002b15",
	"url": "https://github.com/droolsjbpm/jbpm/commit/3815f293ba9338f423315d93a373608c95002b15",
	"refactorings": [{
	"type": "Move Source Folder",
	"description": "Move Source Folder jbpm-human-task/jbpm-human-task-core to jbpm-human-task/jbpm-human-task-jpa",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.jbpm.services.task.commands.TaskQueryDataCommand renamed to org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditNodeInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditNodeInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditProcessInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditProcessInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditVariableInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditVariableInstanceLogQueryCommand(queryWhere QueryWhere) in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<DeadlineSummaryImpl> to List<DeadlineSummary> in method private getAlldeadlines(persistenceContext TaskPersistenceContext, taskData TaskData) : List<DeadlineSummary> in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method private executedeadLine(ctx TaskContext, persistenceContext TaskPersistenceContext, task Task, deadlineSummary DeadlineSummary, taskData TaskData) : Void in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method private executedeadLine(ctx TaskContext, persistenceContext TaskPersistenceContext, task Task, deadlineSummary DeadlineSummary, taskData TaskData) : Void in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method public execute(context Context) : Void in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method public execute(context Context) : Void in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public execute(context Context) : Void in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method private getAlldeadlines(persistenceContext TaskPersistenceContext, taskData TaskData) : List<DeadlineSummary> in class org.jbpm.services.task.commands.ExecuteReminderCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public execute(context Context) : Void in class org.jbpm.services.task.commands.InitDeadlinesCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public execute(context Context) : Void in class org.jbpm.services.task.commands.InitDeadlinesCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public execute(context Context) : Void in class org.jbpm.services.task.commands.InitDeadlinesCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public unschedule(taskId long, type DeadlineType) : void in class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public unschedule(taskId long, type DeadlineType) : void in class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public unschedule(taskId long, type DeadlineType) : void in class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public unschedule(taskId long, type DeadlineType) : void in class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public initiator(createdById String...) : TaskQueryBuilder renamed to public createdBy(createdById String...) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public taskOwner(taskOwnerId String...) : TaskQueryBuilder renamed to public actualOwner(taskOwnerId String...) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type TaskQueryBuilder to String in method private getOrderByListId(field OrderBy) : String in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter orderBy : OrderBy to field : OrderBy in method private getOrderByListId(field OrderBy) : String in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public orderBy(orderBy OrderBy) : TaskQueryBuilder renamed to private getOrderByListId(field OrderBy) : String in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public buildQuery() : ParametrizedQuery<TaskSummary> renamed to public build() : ParametrizedQuery<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type queryData : QueryData to queryWhere : QueryWhere in method public build() : ParametrizedQuery<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable queryData : QueryData to queryWhere : QueryWhere in method public build() : ParametrizedQuery<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type cmd : TaskQueryDataCommand to cmd : TaskQueryWhereCommand in method public build() : ParametrizedQuery<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type QueryData to QueryWhere in method public getQueryWhere() : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getQueryData() : QueryData renamed to public getQueryWhere() : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Boolean to boolean in method public isUnion() : boolean in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ParameterType to QueryCriteriaType in method public getType() : QueryCriteriaType in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type union : Boolean to union : boolean in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type type : ParameterType to type : QueryCriteriaType in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method private QueryCriteria(listId String, type QueryCriteriaType) in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method public QueryCriteria(listId String, union boolean, type QueryCriteriaType, valueListSize int) in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type union : Boolean to union : boolean in method public setUnion(union boolean) : void in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method public setType(type QueryCriteriaType) : void in class org.jbpm.query.jpa.data.QueryCriteria",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter queryParameters : QueryWhere to queryWhere : QueryWhere in method public QueryWhere(queryWhere QueryWhere) in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type type : ParameterType to type : QueryCriteriaType in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public addAppropriateParam(listId String, param T...) : QueryCriteria renamed to public addParameter(listId String, param T...) : QueryCriteria in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private getAppropriateQueryCriteria(listId String, valueListSize int) : QueryCriteria inlined to public addRangeParameter(listId String, param T, start boolean) : void in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private getAppropriateQueryCriteria(listId String, valueListSize int) : QueryCriteria inlined to public addParameter(listId String, param T...) : QueryCriteria in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private resetGroup() : void inlined to public clear() : void in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type origType : ParameterType to origType : QueryCriteriaType in method public addRangeParameter(listId String, param T, start boolean) : void in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable newCriteriaGroupParent : Object to grandparent : Object in method public endGroup() : void in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute currentGroupParents : Stack<Object> to ancestry : Stack<Object> in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute currentGroupCriteria : List<QueryCriteria> to currentCriteria : List<QueryCriteria> in class org.jbpm.query.jpa.data.QueryWhere",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type ErrorInfoLogDeleteBuilder to ErrorInfoDeleteBuilder in method public errorInfoLogDeleteBuilder() : ErrorInfoDeleteBuilder in class org.jbpm.executor.impl.jpa.ExecutorJPAAuditService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter data : QueryData to queryWhere : QueryWhere in method public TaskQueryWhereCommand(queryWhere QueryWhere) in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type data : QueryData to queryWhere : QueryWhere in method public TaskQueryWhereCommand(queryWhere QueryWhere) in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type QueryData to QueryWhere in method public getQueryWhere() : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getQueryData() : QueryData renamed to public getQueryWhere() : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public setQueryWhere(queryWhere QueryWhere) : void in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public setQueryWhere(queryWhere QueryWhere) : void in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public setQueryData(queryData QueryData) : void renamed to public setQueryWhere(queryWhere QueryWhere) : void in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.jbpm.process.audit.JPAService from classes [org.jbpm.process.audit.JPAAuditLogService]",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setPersistenceUnitName(persistenceUnitName String) : void from class org.jbpm.process.audit.JPAAuditLogService to public setPersistenceUnitName(persistenceUnitName String) : void from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getPersistenceUnitName() : String from class org.jbpm.process.audit.JPAAuditLogService to public getPersistenceUnitName() : String from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public dispose() : void from class org.jbpm.process.audit.JPAAuditLogService to public dispose() : void from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private getEntityManager() : EntityManager from class org.jbpm.process.audit.JPAAuditLogService to protected getEntityManager() : EntityManager from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private joinTransaction(em EntityManager) : Object from class org.jbpm.process.audit.JPAAuditLogService to protected joinTransaction(em EntityManager) : Object from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private closeEntityManager(em EntityManager, transaction Object) : void from class org.jbpm.process.audit.JPAAuditLogService to protected closeEntityManager(em EntityManager, transaction Object) : void from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private executeQuery(query Query, em EntityManager, type Class<T>) : List<T> from class org.jbpm.process.audit.JPAAuditLogService to public executeQuery(query Query, em EntityManager, type Class<T>) : List<T> from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected persistenceStrategy : PersistenceStrategy from class org.jbpm.process.audit.JPAAuditLogService to protected persistenceStrategy : PersistenceStrategy from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private persistenceUnitName : String from class org.jbpm.process.audit.JPAAuditLogService to protected persistenceUnitName : String from class org.jbpm.process.audit.JPAService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method public ascending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl to public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method public descending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl to public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method protected convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.process.audit.JPAAuditLogService to public convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.query.jpa.impl.QueryCriteriaUtil",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/jOOQ/jOOQ.git",
	"sha1": "58a4e74d28073e7c6f15d1f225ac1c2fd9aa4357",
	"url": "https://github.com/jOOQ/jOOQ/commit/58a4e74d28073e7c6f15d1f225ac1c2fd9aa4357",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private millis(temporal Temporal) : long extracted from public from(from Object) : U in class org.jooq.tools.Convert.ConvertAll",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private millis(temporal Temporal) : long extracted from public from(from Object) : U in class org.jooq.tools.Convert.ConvertAll",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/jOOQ/jOOQ.git",
	"sha1": "227254cf769f3e821ed1b2ef2d88c4ec6b20adea",
	"url": "https://github.com/jOOQ/jOOQ/commit/227254cf769f3e821ed1b2ef2d88c4ec6b20adea",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(header boolean) : String extracted from public formatCSV() : String in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(stream OutputStream, header boolean) : void extracted from public formatCSV(stream OutputStream) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(writer Writer, header boolean) : void extracted from public formatCSV(writer Writer) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(header boolean, delimiter char) : String extracted from public formatCSV(delimiter char) : String in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(stream OutputStream, header boolean, delimiter char) : void extracted from public formatCSV(stream OutputStream, delimiter char) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(writer Writer, header boolean, delimiter char) : void extracted from public formatCSV(writer Writer, delimiter char) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(header boolean, delimiter char, nullString String) : String extracted from public formatCSV(delimiter char, nullString String) : String in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(stream OutputStream, header boolean, delimiter char, nullString String) : void extracted from public formatCSV(stream OutputStream, delimiter char, nullString String) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public formatCSV(writer Writer, header boolean, delimiter char, nullString String) : void extracted from public formatCSV(writer Writer, delimiter char, nullString String) : void in class org.jooq.impl.ResultImpl",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/eclipse/jetty.project.git",
	"sha1": "837d1a74bb7d694220644a2539c4440ce55462cf",
	"url": "https://github.com/eclipse/jetty.project/commit/837d1a74bb7d694220644a2539c4440ce55462cf",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private testTransparentProxyWithQuery(proxyToContext String, prefix String, target String) : void extracted from public testTransparentProxyWithQuery() : void in class org.eclipse.jetty.proxy.ProxyServletTest",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/MPS.git",
	"sha1": "797fb7fc1415ac0ebe9a8262677dfa4462ed6cb4",
	"url": "https://github.com/JetBrains/MPS/commit/797fb7fc1415ac0ebe9a8262677dfa4462ed6cb4",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private doAppendNode(node SNode) : void extracted from public appendNode(node SNode) : void in class jetbrains.mps.text.impl.TextGenSupport",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute stringSwitchCases_1htk8d_a0a0jb : String[] to stringSwitchCases_1htk8d_a0a0kb : String[] in class jetbrains.mps.lang.textGen.structure.StructureAspectDescriptor",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/MPS.git",
	"sha1": "61b5decd4a4e5e6bbdea99eb76f136ca10915b73",
	"url": "https://github.com/JetBrains/MPS/commit/61b5decd4a4e5e6bbdea99eb76f136ca10915b73",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public startInsertMode(editorContext EditorContext, anchorCell EditorCell, insertBefore boolean) : void extracted from public insertNewChild(editorContext EditorContext, anchorCell EditorCell, insertBefore boolean) : void in class jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/infinispan/infinispan.git",
	"sha1": "4184c577f4bbc57f3ac13639557cfd99cdaca3e7",
	"url": "https://github.com/infinispan/infinispan/commit/4184c577f4bbc57f3ac13639557cfd99cdaca3e7",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute package stopped : boolean from class org.infinispan.persistence.async.State to private stopped : boolean from class org.infinispan.persistence.async.AsyncCacheWriter",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/glyptodon/guacamole-client.git",
	"sha1": "ebb483320d971ff4d9e947309668f5da1fcd3d23",
	"url": "https://github.com/glyptodon/guacamole-client/commit/ebb483320d971ff4d9e947309668f5da1fcd3d23",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : Logger from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private logger : Logger from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NEW_PASSWORD_PARAMETER : String from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private NEW_PASSWORD_PARAMETER : String from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NEW_PASSWORD : Field from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private NEW_PASSWORD : Field from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private CONFIRM_NEW_PASSWORD_PARAMETER : String from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private CONFIRM_NEW_PASSWORD_PARAMETER : String from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private CONFIRM_NEW_PASSWORD : Field from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private CONFIRM_NEW_PASSWORD : Field from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private EXPIRED_PASSWORD : CredentialsInfo from class org.glyptodon.guacamole.auth.jdbc.user.UserContextService to private EXPIRED_PASSWORD : CredentialsInfo from class org.glyptodon.guacamole.auth.jdbc.user.UserService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/square/javapoet.git",
	"sha1": "5a37c2aa596377cb4c9b6f916614407fd0a7d3db",
	"url": "https://github.com/square/javapoet/commit/5a37c2aa596377cb4c9b6f916614407fd0a7d3db",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.squareup.javapoet.TypesTest.Parameterized moved to com.squareup.javapoet.AbstractTypesTest.Parameterized",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type TypeElement to Elements in method protected getElements() : Elements in class com.squareup.javapoet.TypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private getElement(clazz Class<?>) : TypeElement renamed to protected getElements() : Elements in class com.squareup.javapoet.TypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass com.squareup.javapoet.AbstractTypesTest from classes [com.squareup.javapoet.TypesTest]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private getMirror(clazz Class<?>) : TypeMirror from class com.squareup.javapoet.TypesTest to private getMirror(clazz Class<?>) : TypeMirror from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getBasicTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getBasicTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getParameterizedTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getParameterizedTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getTypeVariableTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getTypeVariableTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getPrimitiveTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getPrimitiveTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getArrayTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getArrayTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getVoidTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getVoidTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getNullTypeMirror() : void from class com.squareup.javapoet.TypesTest to public getNullTypeMirror() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public parameterizedType() : void from class com.squareup.javapoet.TypesTest to public parameterizedType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public arrayType() : void from class com.squareup.javapoet.TypesTest to public arrayType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardExtendsType() : void from class com.squareup.javapoet.TypesTest to public wildcardExtendsType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardExtendsObject() : void from class com.squareup.javapoet.TypesTest to public wildcardExtendsObject() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardSuperType() : void from class com.squareup.javapoet.TypesTest to public wildcardSuperType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardMirrorNoBounds() : void from class com.squareup.javapoet.TypesTest to public wildcardMirrorNoBounds() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardMirrorExtendsType() : void from class com.squareup.javapoet.TypesTest to public wildcardMirrorExtendsType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public wildcardMirrorSuperType() : void from class com.squareup.javapoet.TypesTest to public wildcardMirrorSuperType() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public typeVariable() : void from class com.squareup.javapoet.TypesTest to public typeVariable() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public box() : void from class com.squareup.javapoet.TypesTest to public box() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public unbox() : void from class com.squareup.javapoet.TypesTest to public unbox() : void from class com.squareup.javapoet.AbstractTypesTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/elastic/elasticsearch.git",
	"sha1": "f77804dad35c13d9ff96456e85737883cf7ddd99",
	"url": "https://github.com/elastic/elasticsearch/commit/f77804dad35c13d9ff96456e85737883cf7ddd99",
	"refactorings": [{
	"type": "Change Package",
	"description": "Change Package org.elasticsearch.index.merge.policy to org.elasticsearch.index.shard",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.elasticsearch.index.merge.policy.ElasticsearchMergePolicy moved to org.elasticsearch.index.shard.ElasticsearchMergePolicy",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.elasticsearch.index.merge.policy.FilterDocValuesProducer moved to org.elasticsearch.index.shard.FilterDocValuesProducer",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.elasticsearch.index.merge.policy.VersionFieldUpgrader moved to org.elasticsearch.index.shard.VersionFieldUpgrader",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.elasticsearch.index.merge.policy.VersionFieldUpgraderTest moved to org.elasticsearch.index.shard.VersionFieldUpgraderTest",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.elasticsearch.index.merge.policy.MergePolicySettingsTest moved to org.elasticsearch.index.shard.MergePolicySettingsTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move And Rename Class",
	"description": "Move And Rename Class org.elasticsearch.index.merge.policy.TieredMergePolicyProvider moved and renamed to org.elasticsearch.index.shard.MergePolicyConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter mergePolicyProvider : MergePolicyProvider to mergePolicy : MergePolicy in method public EngineConfig(shardId ShardId, threadPool ThreadPool, indexingService ShardIndexingService, indexSettingsService IndexSettingsService, warmer IndicesWarmer, store Store, deletionPolicy SnapshotDeletionPolicy, mergePolicy MergePolicy, mergeScheduler MergeSchedulerProvider, analyzer Analyzer, similarity Similarity, codecService CodecService, failedEngineListener Engine.FailedEngineListener, translogRecoveryPerformer TranslogRecoveryPerformer, filterCache QueryCache, filterCachingPolicy QueryCachingPolicy, translogConfig TranslogConfig) in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type mergePolicyProvider : MergePolicyProvider to mergePolicy : MergePolicy in method public EngineConfig(shardId ShardId, threadPool ThreadPool, indexingService ShardIndexingService, indexSettingsService IndexSettingsService, warmer IndicesWarmer, store Store, deletionPolicy SnapshotDeletionPolicy, mergePolicy MergePolicy, mergeScheduler MergeSchedulerProvider, analyzer Analyzer, similarity Similarity, codecService CodecService, failedEngineListener Engine.FailedEngineListener, translogRecoveryPerformer TranslogRecoveryPerformer, filterCache QueryCache, filterCachingPolicy QueryCachingPolicy, translogConfig TranslogConfig) in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type MergePolicyProvider to MergePolicy in method public getMergePolicy() : MergePolicy in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getMergePolicyProvider() : MergePolicyProvider renamed to public getMergePolicy() : MergePolicy in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute mergePolicyProvider : MergePolicyProvider to mergePolicy : MergePolicy in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type mergePolicyProvider : MergePolicyProvider to mergePolicy : MergePolicy in class org.elasticsearch.index.engine.EngineConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type TieredMergePolicy to MergePolicy in method public getMergePolicy() : MergePolicy in class org.elasticsearch.index.shard.MergePolicyConfig",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/rackerlabs/blueflood.git",
	"sha1": "c76e6e1f27a6697b3b88ad4ed710441b801afb3b",
	"url": "https://github.com/rackerlabs/blueflood/commit/c76e6e1f27a6697b3b88ad4ed710441b801afb3b",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private sendResponseTimer : Timer from class com.rackspacecloud.blueflood.inputs.handlers.HttpMetricsIngestionHandler to private sendResponseTimer : Timer from class com.rackspacecloud.blueflood.http.DefaultHandler",
	"motivations": [ 
	{ 
                "label": "MA: Remove duplication",
                "status": "add"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public sendResponse(channel ChannelHandlerContext, request HttpRequest, messageBody String, status HttpResponseStatus) : void from class com.rackspacecloud.blueflood.inputs.handlers.HttpMetricsIngestionHandler to public sendResponse(channel ChannelHandlerContext, request HttpRequest, messageBody String, status HttpResponseStatus) : void from class com.rackspacecloud.blueflood.http.DefaultHandler",
	"motivations": [ 
	{ 
                "label": "MM: Remove duplication",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/jersey/jersey.git",
	"sha1": "d94ca2b27c9e8a5fa9fe19483d58d2f2ef024606",
	"url": "https://github.com/jersey/jersey/commit/d94ca2b27c9e8a5fa9fe19483d58d2f2ef024606",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.client.HttpUrlConnector moved to org.glassfish.jersey.client.internal.HttpUrlConnector",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected createHttpUrlConnector(client Client, connectionFactory ConnectionFactory, chunkSize int, fixLengthStreaming boolean, setMethodWorkaround boolean) : Connector extracted from public getConnector(client Client, config Configuration) : Connector in class org.glassfish.jersey.client.HttpUrlConnectorProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable computedChunkSize : int to chunkSize : int in method protected createHttpUrlConnector(client Client, connectionFactory ConnectionFactory, chunkSize int, fixLengthStreaming boolean, setMethodWorkaround boolean) : Connector in class org.glassfish.jersey.client.HttpUrlConnectorProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable computedUseFixedLengthStreaming : boolean to fixLengthStreaming : boolean in method protected createHttpUrlConnector(client Client, connectionFactory ConnectionFactory, chunkSize int, fixLengthStreaming boolean, setMethodWorkaround boolean) : Connector in class org.glassfish.jersey.client.HttpUrlConnectorProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable computedUseSetMethodWorkaround : boolean to setMethodWorkaround : boolean in method protected createHttpUrlConnector(client Client, connectionFactory ConnectionFactory, chunkSize int, fixLengthStreaming boolean, setMethodWorkaround boolean) : Connector in class org.glassfish.jersey.client.HttpUrlConnectorProvider",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected secureConnection(client Client, uc HttpURLConnection) : void extracted from private _apply(request ClientRequest) : ClientResponse in class org.glassfish.jersey.client.internal.HttpUrlConnector",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/jersey/jersey.git",
	"sha1": "ee5aa50af6b4586fbe92cab718abfae8113a81aa",
	"url": "https://github.com/jersey/jersey/commit/ee5aa50af6b4586fbe92cab718abfae8113a81aa",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.EnglishGoodbyeService moved to org.glassfish.jersey.examples.hello.spring.annotations.EnglishGoodbyeService",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.GoodbyeService moved to org.glassfish.jersey.examples.hello.spring.annotations.GoodbyeService",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.GreetingService moved to org.glassfish.jersey.examples.hello.spring.annotations.GreetingService",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.JerseyConfig moved to org.glassfish.jersey.examples.hello.spring.annotations.JerseyConfig",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.NorwegianGoodbyeService moved to org.glassfish.jersey.examples.hello.spring.annotations.NorwegianGoodbyeService",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.SpringAnnotationConfig moved to org.glassfish.jersey.examples.hello.spring.annotations.SpringAnnotationConfig",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.SpringRequestResource moved to org.glassfish.jersey.examples.hello.spring.annotations.SpringRequestResource",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.glassfish.jersey.examples.hello.spring.annotations.annotations.SpringRequestResourceTest moved to org.glassfish.jersey.examples.hello.spring.annotations.SpringRequestResourceTest",
	"motivations": [ 
	{ 
                "label": "MC: Eliminate redundant sub-package",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-data-rest.git",
	"sha1": "b7cba6a700d8c5e456cdeffe9c5bf54563eab7d3",
	"url": "https://github.com/spring-projects/spring-data-rest/commit/b7cba6a700d8c5e456cdeffe9c5bf54563eab7d3",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected setupMockMvc() : void extracted from public setUp() : void in class org.springframework.data.rest.webmvc.AbstractWebIntegrationTests",
	"motivations": [ 
	{ 
                "label": "EM: Enable overriding",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/apache/camel.git",
	"sha1": "14a7dd79148f9306dcd2f748b56fd6550e9406ab",
	"url": "https://github.com/apache/camel/commit/14a7dd79148f9306dcd2f748b56fd6550e9406ab",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private readClassFromCamelResource(file File, buffer StringBuilder, buildContext BuildContext) : String extracted from public prepareDataFormat(log Log, project MavenProject, projectHelper MavenProjectHelper, dataFormatOutDir File, schemaOutDir File, buildContext BuildContext) : void in class org.apache.camel.maven.packaging.PackageDataFormatMojo",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable name : String in method public prepareDataFormat(log Log, project MavenProject, projectHelper MavenProjectHelper, dataFormatOutDir File, schemaOutDir File, buildContext BuildContext) : void from class org.apache.camel.maven.packaging.PackageDataFormatMojo",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable name : String in method public prepareDataFormat(log Log, project MavenProject, projectHelper MavenProjectHelper, dataFormatOutDir File, schemaOutDir File, buildContext BuildContext) : void from class org.apache.camel.maven.packaging.PackageDataFormatMojo",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private readClassFromCamelResource(file File, buffer StringBuilder, buildContext BuildContext) : String extracted from public prepareLanguage(log Log, project MavenProject, projectHelper MavenProjectHelper, languageOutDir File, schemaOutDir File, buildContext BuildContext) : void in class org.apache.camel.maven.packaging.PackageLanguageMojo",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable name : String in method public prepareLanguage(log Log, project MavenProject, projectHelper MavenProjectHelper, languageOutDir File, schemaOutDir File, buildContext BuildContext) : void from class org.apache.camel.maven.packaging.PackageLanguageMojo",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable name : String in method public prepareLanguage(log Log, project MavenProject, projectHelper MavenProjectHelper, languageOutDir File, schemaOutDir File, buildContext BuildContext) : void from class org.apache.camel.maven.packaging.PackageLanguageMojo",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/droolsjbpm/drools.git",
	"sha1": "1bf2875e9d73e2d1cd3b58200d5300485f890ff5",
	"url": "https://github.com/droolsjbpm/drools/commit/1bf2875e9d73e2d1cd3b58200d5300485f890ff5",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected initPriorityQueue(kBase InternalKnowledgeBase) : BinaryHeapQueue extracted from public AgendaGroupQueueImpl(name String, kBase InternalKnowledgeBase) in class org.drools.core.common.AgendaGroupQueueImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queries : ConcurrentMap<QueryImpl,RuleAgendaItem> to queries : Map<QueryImpl,RuleAgendaItem> in class org.drools.core.common.DefaultAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public requiresImmediateFlushingIfNotFiring() : boolean renamed to public requiresImmediateFlushing() : boolean in class org.drools.core.phreak.PhreakTimerNode.TimerAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public requiresImmediateFlushingIfNotFiring() : boolean renamed to public requiresImmediateFlushing() : boolean in class org.drools.core.phreak.PropagationEntry.AbstractPropagationEntry",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public isHighestSalience(nextRule RuleAgendaItem) : boolean renamed to private isHigherSalience(nextRule RuleAgendaItem) : boolean in class org.drools.core.phreak.RuleExecutor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private haltRuleFiring(fireCount int, fireLimit int, localFireCount int, agenda InternalAgenda) : boolean extracted from private fire(wm InternalWorkingMemory, filter AgendaFilter, fireCount int, fireLimit int, outerStack LinkedList<StackEntry>, agenda InternalAgenda) : int in class org.drools.core.phreak.RuleExecutor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private internalAddEntry(entry PropagationEntry) : void extracted from public addEntry(entry PropagationEntry) : void in class org.drools.core.phreak.SynchronizedPropagationList",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type comparator : Comparator to comparator : Comparator<Activation> in class org.drools.core.util.BinaryHeapQueue",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter arg0 : Activation to existing : Activation in method public compare(existing Activation, adding Activation) : int in class org.drools.core.util.BinaryHeapQueueTest.ItemConflictResolver",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter arg1 : Activation to adding : Activation in method public compare(existing Activation, adding Activation) : int in class org.drools.core.util.BinaryHeapQueueTest.ItemConflictResolver",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type a : Object to a : T in method public compare(a T, b T) : int in class org.drools.core.util.NaturalComparator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type b : Object to b : T in method public compare(a T, b T) : int in class org.drools.core.util.NaturalComparator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to void in method public executeTask(executable ExecutableEntry) : void in class org.drools.reteoo.common.ReteAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter task : Runnable to executable : ExecutableEntry in method public executeTask(executable ExecutableEntry) : void in class org.drools.reteoo.common.ReteAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type task : Runnable to executable : ExecutableEntry in method public executeTask(executable ExecutableEntry) : void in class org.drools.reteoo.common.ReteAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public executeIfNotFiring(task Runnable) : boolean renamed to public executeTask(executable ExecutableEntry) : void in class org.drools.reteoo.common.ReteAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute protected evaluatingActionQueue : AtomicBoolean from class org.drools.core.impl.StatefulKnowledgeSessionImpl to private evaluatingActionQueue : AtomicBoolean from class org.drools.reteoo.common.ReteWorkingMemory",
	"motivations": [ 
	{ 
                "label": "DA: Isolate dependencies",
                "status": "match1"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public notifyHalt() : void from class org.drools.core.common.DefaultAgenda to public notifyHalt() : void from class org.drools.core.phreak.SynchronizedBypassPropagationList",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match1"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public notifyHalt() : void from class org.drools.reteoo.common.ReteAgenda to public notifyHalt() : void from class org.drools.core.phreak.SynchronizedBypassPropagationList",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public notifyHalt() : void extracted from public queueWorkingMemoryAction(action WorkingMemoryAction) : void in class org.drools.reteoo.common.ReteWorkingMemory & moved to class org.drools.core.impl.StatefulKnowledgeSessionImpl",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public setExpiringHandle(expiringHandle EventFactHandle) : void extracted from public expireFacts(context Object, pctx PropagationContext, workingMemory InternalWorkingMemory) : void in class org.drools.core.rule.SlidingTimeWindow & moved to class org.drools.core.rule.SlidingTimeWindow.SlidingTimeWindowContext",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public add(handle EventFactHandle) : void extracted from public assertFact(context Object, fact InternalFactHandle, pctx PropagationContext, workingMemory InternalWorkingMemory) : boolean in class org.drools.core.rule.SlidingTimeWindow & moved to class org.drools.core.rule.SlidingTimeWindow.SlidingTimeWindowContext",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public remove(handle EventFactHandle) : void extracted from public retractFact(context Object, fact InternalFactHandle, pctx PropagationContext, workingMemory InternalWorkingMemory) : void in class org.drools.core.rule.SlidingTimeWindow & moved to class org.drools.core.rule.SlidingTimeWindow.SlidingTimeWindowContext",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public peek() : EventFactHandle extracted from public expireFacts(context Object, pctx PropagationContext, workingMemory InternalWorkingMemory) : void in class org.drools.core.rule.SlidingTimeWindow & moved to class org.drools.core.rule.SlidingTimeWindow.SlidingTimeWindowContext",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public executeIfNotFiring(task Runnable) : boolean renamed to public executeTask(executable ExecutableEntry) : void in class org.drools.core.common.InternalAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to void in method public executeTask(executable ExecutableEntry) : void in class org.drools.core.common.InternalAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter task : Runnable to executable : ExecutableEntry in method public executeTask(executable ExecutableEntry) : void in class org.drools.core.common.InternalAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type task : Runnable to executable : ExecutableEntry in method public executeTask(executable ExecutableEntry) : void in class org.drools.core.common.InternalAgenda",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public requiresImmediateFlushingIfNotFiring() : boolean renamed to public requiresImmediateFlushing() : boolean in class org.drools.core.phreak.PropagationEntry",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/droolsjbpm/drools.git",
	"sha1": "7ffc62aa554f5884064b81ee80078e35e3833006",
	"url": "https://github.com/droolsjbpm/drools/commit/7ffc62aa554f5884064b81ee80078e35e3833006",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected addInterceptor(interceptor Interceptor, store boolean) : void extracted from public addInterceptor(interceptor Interceptor) : void in class org.drools.persistence.SingleSessionCommandService",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/bitcoinj/bitcoinj.git",
	"sha1": "2fd96c777164dd812e8b5a4294b162889601df1d",
	"url": "https://github.com/bitcoinj/bitcoinj/commit/2fd96c777164dd812e8b5a4294b162889601df1d",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public newSha256Digest() : MessageDigest extracted from public sha256hash160(input byte[]) : byte[] in class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public newSha256Digest() : MessageDigest extracted from private readBinary(inputStream InputStream) : Sha256Hash in class org.bitcoinj.core.CheckpointManager & moved to class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public newSha256Digest() : MessageDigest extracted from public hash(contents byte[]) : Sha256Hash in class org.bitcoinj.core.Sha256Hash & moved to class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public newSha256Digest() : MessageDigest extracted from public MnemonicCode(wordstream InputStream, wordListDigest String) in class org.bitcoinj.crypto.MnemonicCode & moved to class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public newSha256Digest() : MessageDigest extracted from public executeScript(txContainingThis Transaction, index long, script Script, stack LinkedList<byte[]>, enforceNullDummy boolean) : void in class org.bitcoinj.script.Script & moved to class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public newSha256Digest() : MessageDigest extracted from private writeBinaryCheckpoints(checkpoints TreeMap<Integer,StoredBlock>, file File) : void in class org.bitcoinj.tools.BuildCheckpoints & moved to class org.bitcoinj.core.Utils",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/bitcoinj/bitcoinj.git",
	"sha1": "12602650ce99f34cb530fc24266c23e39733b0bb",
	"url": "https://github.com/bitcoinj/bitcoinj/commit/12602650ce99f34cb530fc24266c23e39733b0bb",
	"refactorings": [{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to setSerializer : MessageSerializer in method package AddressMessage(params NetworkParameters, payload byte[], offset int, setSerializer MessageSerializer, length int) in class org.bitcoinj.core.AddressMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method package AddressMessage(params NetworkParameters, payload byte[], serializer MessageSerializer, length int) in class org.bitcoinj.core.AddressMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeAddressMessage(payloadBytes byte[], length int) : AddressMessage extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeAlertMessage(payloadBytes byte[]) : Message extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeBlock(payloadBytes byte[], length int) : Block extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeBloomFilter(payloadBytes byte[]) : Message extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeFilteredBlock(payloadBytes byte[]) : FilteredBlock extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeInventoryMessage(payloadBytes byte[], length int) : InventoryMessage extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public makeTransaction(payloadBytes byte[], offset int, length int, hash byte[]) : Transaction extracted from private makeMessage(command String, length int, payloadBytes byte[], hash byte[], checksum byte[]) : Message in class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected parseTransactions(transactionsOffset int) : void extracted from protected parseTransactions() : void in class org.bitcoinj.core.Block",
	"motivations": [ 
	{ 
                "label": "EM: Enable overriding",
                "status": "match1"
	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public Block(params NetworkParameters, payloadBytes byte[], serializer MessageSerializer, length int) in class org.bitcoinj.core.Block",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to setSerializer : MessageSerializer in method public ChildMessage(params NetworkParameters, payload byte[], offset int, protocolVersion int, parent Message, setSerializer MessageSerializer, length int) in class org.bitcoinj.core.ChildMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to setSerializer : MessageSerializer in method public ChildMessage(params NetworkParameters, payload byte[], offset int, parent Message, setSerializer MessageSerializer, length int) in class org.bitcoinj.core.ChildMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public GetDataMessage(params NetworkParameters, payload byte[], serializer MessageSerializer, length int) in class org.bitcoinj.core.GetDataMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public InventoryMessage(params NetworkParameters, payload byte[], serializer MessageSerializer, length int) in class org.bitcoinj.core.InventoryMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public ListMessage(params NetworkParameters, payload byte[], serializer MessageSerializer, length int) in class org.bitcoinj.core.ListMessage",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method package Message(params NetworkParameters, payload byte[], offset int, protocolVersion int, serializer MessageSerializer, length int) in class org.bitcoinj.core.Message",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method package Message(params NetworkParameters, payload byte[], offset int, serializer MessageSerializer, length int) in class org.bitcoinj.core.Message",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Attribute",
	"description": "Merge Attribute [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in class org.bitcoinj.core.Message",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public PeerAddress(params NetworkParameters, payload byte[], offset int, protocolVersion int, parent Message, serializer MessageSerializer) in class org.bitcoinj.core.PeerAddress",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type serializer : BitcoinSerializer to serializer : MessageSerializer in class org.bitcoinj.core.PeerSocketHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to setSerializer : MessageSerializer in method public Transaction(params NetworkParameters, payload byte[], offset int, parent Message, setSerializer MessageSerializer, length int) in class org.bitcoinj.core.Transaction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to setSerializer : MessageSerializer in method public Transaction(params NetworkParameters, payload byte[], parent Message, setSerializer MessageSerializer, length int) in class org.bitcoinj.core.Transaction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public TransactionInput(params NetworkParameters, parentTransaction Transaction, payload byte[], offset int, serializer MessageSerializer) in class org.bitcoinj.core.TransactionInput",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public TransactionOutPoint(params NetworkParameters, payload byte[], offset int, parent Message, serializer MessageSerializer) in class org.bitcoinj.core.TransactionOutPoint",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [parseLazy : boolean, parseRetain : boolean] to serializer : MessageSerializer in method public TransactionOutput(params NetworkParameters, parent Transaction, payload byte[], offset int, serializer MessageSerializer) in class org.bitcoinj.core.TransactionOutput",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public roundTripTransaction(params NetworkParameters, tx Transaction) : Transaction in class org.bitcoinj.testing.FakeTxBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public testAddr() : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public testLazyParsing() : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method private testCachedParsing(lazy boolean) : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public testHeaders1() : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public testHeaders2() : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public testSerializeUnknownMessage() : void in class org.bitcoinj.core.BitcoinSerializerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type bs : BitcoinSerializer to bs : MessageSerializer in method private serDeser(bs MessageSerializer, message Message, sourceBytes byte[], containedBytes byte[], containingBytes byte[]) : void in class org.bitcoinj.core.LazyParseByteCacheTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bs : BitcoinSerializer to bs : MessageSerializer in method public setUp() : void in class org.bitcoinj.core.LazyParseByteCacheTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bsRef : BitcoinSerializer to bsRef : MessageSerializer in method public testBlock(blockBytes byte[], isChild boolean, lazy boolean, retain boolean) : void in class org.bitcoinj.core.LazyParseByteCacheTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type bsRef : BitcoinSerializer to bsRef : MessageSerializer in method public testTransaction(params NetworkParameters, txBytes byte[], isChild boolean, lazy boolean, retain boolean) : void in class org.bitcoinj.core.LazyParseByteCacheTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type serializer : BitcoinSerializer to serializer : MessageSerializer in method public badMessage() : void in class org.bitcoinj.core.PeerTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from package parse() : void in class org.bitcoinj.core.FilteredBlock & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public deserializeCompact(params NetworkParameters, buffer ByteBuffer) : StoredBlock in class org.bitcoinj.core.StoredBlock & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public get(hash Sha256Hash, wasUndoableOnly boolean) : StoredBlock in class org.bitcoinj.store.DatabaseFullPrunedBlockStore & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testBlockVerification() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testDate() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testProofOfWork() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testBadTransactions() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testHeaderParse() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testBitcoinSerialization() : void in class org.bitcoinj.core.BlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from private roundtrip(b2 Block) : Block in class org.bitcoinj.core.ChainSplitTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testReceiveCoinbaseTransaction() : void in class org.bitcoinj.core.CoinbaseBlockTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public getBlocksToTest(runBarelyExpensiveTests boolean, runExpensiveTests boolean, blockStorageFile File) : RuleList in class org.bitcoinj.core.FullBlockTestGenerator & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[]) : Block extracted from public testLastBlockSeenHash() : void in class org.bitcoinj.store.WalletProtobufSerializerTest & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[], length int) : Block extracted from package parse() : void in class org.bitcoinj.core.HeadersMessage & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public makeBlock(payloadBytes byte[], length int) : Block extracted from public getBlocksToTest(runBarelyExpensiveTests boolean, runExpensiveTests boolean, blockStorageFile File) : RuleList in class org.bitcoinj.core.FullBlockTestGenerator & moved to class org.bitcoinj.core.BitcoinSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public getSerializer(parseLazy boolean, parseRetain boolean) : BitcoinSerializer extracted from public testLazyParsing() : void in class org.bitcoinj.core.BitcoinSerializerTest & moved to class org.bitcoinj.params.AbstractBitcoinNetParams",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public getSerializer(parseLazy boolean, parseRetain boolean) : BitcoinSerializer extracted from private testCachedParsing(lazy boolean) : void in class org.bitcoinj.core.BitcoinSerializerTest & moved to class org.bitcoinj.params.AbstractBitcoinNetParams",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public getSerializer(parseLazy boolean, parseRetain boolean) : BitcoinSerializer extracted from public testBlock(blockBytes byte[], isChild boolean, lazy boolean, retain boolean) : void in class org.bitcoinj.core.LazyParseByteCacheTest & moved to class org.bitcoinj.params.AbstractBitcoinNetParams",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public getSerializer(parseLazy boolean, parseRetain boolean) : BitcoinSerializer extracted from public testTransaction(params NetworkParameters, txBytes byte[], isChild boolean, lazy boolean, retain boolean) : void in class org.bitcoinj.core.LazyParseByteCacheTest & moved to class org.bitcoinj.params.AbstractBitcoinNetParams",
	"motivations": [ 
	{ 
                "label": "EM: Introduce factory method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/bitcoinj/bitcoinj.git",
	"sha1": "a6601066ddc72ef8e71c46c5a51e1252ea0a1af5",
	"url": "https://github.com/bitcoinj/bitcoinj/commit/a6601066ddc72ef8e71c46c5a51e1252ea0a1af5",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private digest : MessageDigest from class org.bitcoinj.core.Utils to private digest : MessageDigest from class org.bitcoinj.core.Sha256Hash",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/robovm/robovm.git",
	"sha1": "7837d0baf1aef45340eec699516a8c3a22aeb553",
	"url": "https://github.com/robovm/robovm/commit/7837d0baf1aef45340eec699516a8c3a22aeb553",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private signFrameworks(appDir File, getTaskAllow boolean) : void extracted from protected prepareLaunch(appDir File) : void in class org.robovm.compiler.target.ios.IOSTarget",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/deeplearning4j/deeplearning4j.git",
	"sha1": "3325f5ccd23f8016fa28a24f878b54f1918546ed",
	"url": "https://github.com/deeplearning4j/deeplearning4j/commit/3325f5ccd23f8016fa28a24f878b54f1918546ed",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public loadGoogleModel(modelFile File, binary boolean, lineBreaks boolean) : Word2Vec extracted from public loadGoogleModel(modelFile File, binary boolean) : Word2Vec in class org.deeplearning4j.models.embeddings.loader.WordVectorSerializer",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/deeplearning4j/deeplearning4j.git",
	"sha1": "91cdfa1ffd937a4cb01cdc0052874ef7831955e2",
	"url": "https://github.com/deeplearning4j/deeplearning4j/commit/91cdfa1ffd937a4cb01cdc0052874ef7831955e2",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter function : Model to layer : Model in method public BackTrackLineSearch(layer Model, stepFunction StepFunction, optimizer ConvexOptimizer) in class org.deeplearning4j.optimize.solvers.BackTrackLineSearch",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getNewScore(oldParameters INDArray) : double extracted from public optimize(initialStep double, parameters INDArray, gradients INDArray) : double in class org.deeplearning4j.optimize.solvers.BackTrackLineSearch",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getNewScore(oldParameters INDArray) : double extracted from public optimize(initialStep double, parameters INDArray, gradients INDArray) : double in class org.deeplearning4j.optimize.solvers.BackTrackLineSearch",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getNewScore(oldParameters INDArray) : double extracted from public optimize(initialStep double, parameters INDArray, gradients INDArray) : double in class org.deeplearning4j.optimize.solvers.BackTrackLineSearch",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getIrisLogisticLayerConfig(activationFunction String, iterations int) : OutputLayer extracted from public testLineSearch() : void in class org.deeplearning4j.optimize.solver.BackTrackLineSearchTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable d : DataSet to data : DataSet in method public testLineSearch() : void in class org.deeplearning4j.optimize.solver.BackTrackLineSearchTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable l : OutputLayer to layer : OutputLayer in method public testLineSearch() : void in class org.deeplearning4j.optimize.solver.BackTrackLineSearchTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testBackTrackLine() : void from class org.deeplearning4j.plot.ListenerTest to public testBackTrackLine() : void from class org.deeplearning4j.optimize.solver.BackTrackLineSearchTest",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/facebook/presto.git",
	"sha1": "484b7cb0d20ec8f7c3b0d9eaf9e3f93468cec88c",
	"url": "https://github.com/facebook/presto/commit/484b7cb0d20ec8f7c3b0d9eaf9e3f93468cec88c",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.facebook.presto.split.TestJmxSplitManager moved to com.facebook.presto.connector.jmx.TestJmxSplitManager",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Source Folder",
	"description": "Move Source Folder presto-main to presto-jmx",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type splits : ImmutableList<ConnectorSplit> to splits : List<ConnectorSplit> in method public getPartitionSplits(table ConnectorTableHandle, partitions List<ConnectorPartition>) : ConnectorSplitSource in class com.facebook.presto.connector.jmx.JmxSplitManager",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/facebook/presto.git",
	"sha1": "8b1f5ce432bd6f579c646705d79ff0c4690495ae",
	"url": "https://github.com/facebook/presto/commit/8b1f5ce432bd6f579c646705d79ff0c4690495ae",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public checkArrayIndex(index long) : void extracted from public readBlockAndCheckIndex(array Slice, index long) : Block in class com.facebook.presto.operator.scalar.ArraySubscriptOperator",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/crate/crate.git",
	"sha1": "72b5348307d86b1a118e546c24d97f1ac1895bdb",
	"url": "https://github.com/crate/crate/commit/72b5348307d86b1a118e546c24d97f1ac1895bdb",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter countNode : CountNode to node : CountNode in method public visitCountNode(node CountNode, context PreparerContext) : Void in class io.crate.action.job.ContextPreparer.InnerPreparer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type tasks : Collection<Task> to tasks : Collection<? extends Task> in method public addTasks(tasks Collection<? extends Task>) : void in class io.crate.executor.Job",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute mergeNodes : List<MergeNode> to finalMergeNodes : List<MergeNode> in class io.crate.executor.transport.ExecutionNodesTask",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type tasks : List<Task> to tasks : List<? extends Task> in method public newJob(plan Plan) : Job in class io.crate.executor.transport.TransportExecutor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<Task> to List<? extends Task> in method public visitUpsert(plan Upsert, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<Task> to List<? extends Task> in method public visitInsertByQuery(node InsertFromSubQuery, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<Task> to List<? extends Task> in method protected visitPlan(plan Plan, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type plan : GlobalAggregate to plan : Plan in method protected visitPlan(plan Plan, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public visitGlobalAggregate(plan GlobalAggregate, job Job) : List<Task> renamed to protected visitPlan(plan Plan, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type tasks : List<Task> to tasks : List<? extends Task> in method public visitInsertByQuery(node InsertFromSubQuery, job Job) : List<? extends Task> in class io.crate.executor.transport.TransportExecutor.TaskCollectingVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : QueryAndFetch to plan : QueryAndFetch in method public visitQueryAndFetch(plan QueryAndFetch, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : QueryThenFetch to plan : QueryThenFetch in method public visitQueryThenFetch(plan QueryThenFetch, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : NonDistributedGroupBy to plan : NonDistributedGroupBy in method public visitNonDistributedGroupBy(plan NonDistributedGroupBy, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : Upsert to plan : Upsert in method public visitUpsert(plan Upsert, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : DistributedGroupBy to plan : DistributedGroupBy in method public visitDistributedGroupBy(plan DistributedGroupBy, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter node : InsertFromSubQuery to plan : InsertFromSubQuery in method public visitInsertByQuery(plan InsertFromSubQuery, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter countPlan : CountPlan to plan : CountPlan in method public visitCountPlan(plan CountPlan, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter killPlan : KillPlan to plan : KillPlan in method public visitKillPlan(plan KillPlan, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nestedLoop : NestedLoop to plan : NestedLoop in method public visitNestedLoop(plan NestedLoop, context C) : R in class io.crate.planner.PlanVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter countNode : CountNode to node : CountNode in method public visitCountNode(node CountNode, context C) : R in class io.crate.planner.node.ExecutionNodeVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nestedLoopNode : NestedLoopNode to node : NestedLoopNode in method public visitNestedLoopNode(node NestedLoopNode, context C) : R in class io.crate.planner.node.ExecutionNodeVisitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamNodes : List<String> from class io.crate.planner.node.dql.CollectNode to private downstreamNodes : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamNodes : List<String> from class io.crate.planner.node.dql.MergeNode to private downstreamNodes : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamNodes : List<String> from class io.crate.planner.node.dql.join.NestedLoopNode to private downstreamNodes : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.MergeNode to private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.join.NestedLoopNode to private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private leftMergeNode : MergeNode from class io.crate.planner.node.dql.join.NestedLoop to private leftMergeNode : MergeNode from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private rightMergeNode : MergeNode from class io.crate.planner.node.dql.join.NestedLoop to private rightMergeNode : MergeNode from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.CollectNode to private downstreamExecutionNodeId : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes() : List<String> from class io.crate.planner.node.dql.CollectNode to public downstreamNodes() : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes() : List<String> from class io.crate.planner.node.dql.MergeNode to public downstreamNodes() : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes() : List<String> from class io.crate.planner.node.dql.join.NestedLoopNode to public downstreamNodes() : List<String> from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes(downStreamNodes List<String>) : void from class io.crate.planner.node.dql.CollectNode to public downstreamNodes(downStreamNodes List<String>) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nodes : Set<String> to downStreamNodes : Set<String> in method public downstreamNodes(downStreamNodes Set<String>) : void in class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes(nodes Set<String>) : void from class io.crate.planner.node.dql.MergeNode to public downstreamNodes(downStreamNodes Set<String>) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter nodes : Set<String> to downStreamNodes : Set<String> in method public downstreamNodes(downStreamNodes Set<String>) : void in class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamNodes(nodes Set<String>) : void from class io.crate.planner.node.dql.join.NestedLoopNode to public downstreamNodes(downStreamNodes Set<String>) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.CollectNode to public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.MergeNode to public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.join.NestedLoopNode to public downstreamExecutionNodeId() : int from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void from class io.crate.planner.node.dql.MergeNode to public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void from class io.crate.planner.node.dql.join.NestedLoopNode to public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter executionNodeId : int to downstreamExecutionNodeId : int in method public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void in class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public downstreamExecutionNodeId(executionNodeId int) : void from class io.crate.planner.node.dql.CollectNode to public downstreamExecutionNodeId(downstreamExecutionNodeId int) : void from class io.crate.planner.node.dql.AbstractDQLPlanNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public leftMergeNode(leftMergeNode MergeNode) : void from class io.crate.planner.node.dql.join.NestedLoop to public leftMergeNode(leftMergeNode MergeNode) : void from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public leftMergeNode() : MergeNode from class io.crate.planner.node.dql.join.NestedLoop to public leftMergeNode() : MergeNode from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public rightMergeNode(rightMergeNode MergeNode) : void from class io.crate.planner.node.dql.join.NestedLoop to public rightMergeNode(rightMergeNode MergeNode) : void from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public rightMergeNode() : MergeNode from class io.crate.planner.node.dql.join.NestedLoop to public rightMergeNode() : MergeNode from class io.crate.planner.node.dql.join.NestedLoopNode",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/crate/crate.git",
	"sha1": "563d281b61e9f8748858e911eaa810e981f1e953",
	"url": "https://github.com/crate/crate/commit/563d281b61e9f8748858e911eaa810e981f1e953",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type String to Function in method private rewriteAndValidateFields(function Function, context Context) : Function in class io.crate.lucene.LuceneQueryBuilder.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private validateNoUnsupportedFields(function Function, context Context) : String renamed to private rewriteAndValidateFields(function Function, context Context) : Function in class io.crate.lucene.LuceneQueryBuilder.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable columnName : String in method private validateNoUnsupportedFields(function Function, context Context) : String from class io.crate.lucene.LuceneQueryBuilder.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getCustomRoutingCol() : ColumnIdent extracted from private getRoutingCol() : ColumnIdent in class io.crate.metadata.doc.DocIndexMetaData",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testSelectById() : void renamed to public testSelectByIdWithCustomRouting() : void in class io.crate.analyze.where.WhereClauseAnalyzerTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/crate/crate.git",
	"sha1": "c7b6a7aa878aabd6400d2df0490e1eb2b810c8f9",
	"url": "https://github.com/crate/crate/commit/c7b6a7aa878aabd6400d2df0490e1eb2b810c8f9",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.Consumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.Consumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public plan(relation AnalyzedRelation, consumerContext ConsumerContext) : PlannedAnalyzedRelation extracted from public plan(rootRelation AnalyzedRelation, plannerContext Planner.Context) : Plan in class io.crate.planner.consumer.ConsumingPlanner",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable plannedAnalyzedRelation : PlannedAnalyzedRelation in method public plan(relation AnalyzedRelation, consumerContext ConsumerContext) : PlannedAnalyzedRelation from class io.crate.planner.consumer.ConsumingPlanner",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public plan(relation AnalyzedRelation, consumerContext ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ConsumingPlanner",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(rootRelation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.CountConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.DistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ESGetConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ESGetConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(rootRelation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.GlobalAggregateConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method public visitInsertFromQuery(statement InsertFromSubQueryAnalyzedStatement, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method public visitInsertFromQuery(statement InsertFromSubQueryAnalyzedStatement, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter insertFromSubQueryAnalyzedStatement : InsertFromSubQueryAnalyzedStatement to statement : InsertFromSubQueryAnalyzedStatement in method public visitInsertFromQuery(statement InsertFromSubQueryAnalyzedStatement, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable analyzedRelation : PlannedAnalyzedRelation to plannedSubQuery : PlannedAnalyzedRelation in method public visitInsertFromQuery(statement InsertFromSubQueryAnalyzedStatement, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.InsertFromSubQueryConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method private nonDistributedGroupBy(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method private nonDistributedGroupBy(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.NonDistributedGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method private normalSelect(table QueriedTable, whereClause WhereClause, tableRelation TableRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method private normalSelect(table QueriedTable, whereClause WhereClause, tableRelation TableRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryAndFetchConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryThenFetchConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.QueryThenFetchConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter rootRelation : AnalyzedRelation to relation : AnalyzedRelation in method public consume(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method private optimizedReduceOnCollectorGroupBy(table QueriedTable, tableRelation TableRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method public visitQueriedTable(table QueriedTable, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type AnalyzedRelation to PlannedAnalyzedRelation in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type context : Context to context : ConsumerContext in method protected visitAnalyzedRelation(relation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.ReduceOnCollectorGroupByConsumer.Visitor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to PlannedAnalyzedRelation in method public consume(rootRelation AnalyzedRelation, context ConsumerContext) : PlannedAnalyzedRelation in class io.crate.planner.consumer.UpdateConsumer",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/libgdx/libgdx.git",
	"sha1": "2bd1557bc293cb8c2348374771aad832befbe26f",
	"url": "https://github.com/libgdx/libgdx/commit/2bd1557bc293cb8c2348374771aad832befbe26f",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method public setCheckBoxRight(right boolean) : void inlined to public CheckBox(text String, style CheckBoxStyle) in class com.badlogic.gdx.scenes.scene2d.ui.CheckBox",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable label : Label in method public CheckBox(text String, style CheckBoxStyle) from class com.badlogic.gdx.scenes.scene2d.ui.CheckBox",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Netflix/zuul.git",
	"sha1": "b25d3f32ed2e2da86f5c746098686445c2e2a314",
	"url": "https://github.com/Netflix/zuul/commit/b25d3f32ed2e2da86f5c746098686445c2e2a314",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type BaseFilter to ZuulFilter in method public newInstance(clazz Class) : ZuulFilter in class com.netflix.zuul.DefaultFilterFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type BaseFilter to ZuulFilter in method public newInstance(clazz Class) : ZuulFilter in class com.netflix.zuul.FilterFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public getLocations() : String[] renamed to public getClassNames() : String[] in class com.netflix.zuul.FilterFileManager.FilterFileManagerConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Split Parameter",
	"description": "Split Parameter locations : String[] to [directories : String[], classNames : String[]] in method public FilterFileManagerConfig(directories String[], classNames String[], pollingIntervalSeconds int) in class com.netflix.zuul.FilterFileManager.FilterFileManagerConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Split Attribute",
	"description": "Split Attribute locations : String[] to [directories : String[], classNames : String[]] in class com.netflix.zuul.FilterFileManager.FilterFileManagerConfig",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private putFilter(sName String, filter ZuulFilter, lastModified long) : void extracted from public putFilter(file File) : boolean in class com.netflix.zuul.FilterLoader",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/hibernate/hibernate-orm.git",
	"sha1": "0b6ea757e34a63b1421b77ed5fbb61398377aab1",
	"url": "https://github.com/hibernate/hibernate-orm/commit/0b6ea757e34a63b1421b77ed5fbb61398377aab1",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.hibernate.jpa.test.callbacks.EntityWithLazyProperty moved to org.hibernate.jpa.test.instrument.domain.EntityWithLazyProperty",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private checkLazyField(entity EntityWithLazyProperty, em EntityManager, expected byte[]) : void from class org.hibernate.jpa.test.callbacks.CallbacksTest to private checkLazyField(entity EntityWithLazyProperty, em EntityManager, expected byte[]) : void from class org.hibernate.jpa.test.instrument.cases.TestLazyPropertyOnPreUpdateExecutable",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/hibernate/hibernate-orm.git",
	"sha1": "2f1b67b03f6c48aa189d7478e16ed0dcf8d50af8",
	"url": "https://github.com/hibernate/hibernate-orm/commit/2f1b67b03f6c48aa189d7478e16ed0dcf8d50af8",
	"refactorings": [{
	"type": "Split Parameter",
	"description": "Split Parameter persister : EntityPersister to [entityName : String, naturalIdPropertyIndexes : int[], propertyTypes : Type[]] in method public OldNaturalIdCacheKey(naturalIdValues Object[], propertyTypes Type[], naturalIdPropertyIndexes int[], entityName String, session SessionImplementor) in class org.hibernate.cache.internal.OldNaturalIdCacheKey",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private MUTABLE_NON_VERSIONED : CacheDataDescription from class org.hibernate.test.cache.infinispan.collection.CollectionRegionImplTestCase to protected MUTABLE_NON_VERSIONED : CacheDataDescription from class org.hibernate.test.cache.infinispan.AbstractEntityCollectionRegionTestCase",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private MUTABLE_NON_VERSIONED : CacheDataDescription from class org.hibernate.test.cache.infinispan.entity.EntityRegionImplTestCase to protected MUTABLE_NON_VERSIONED : CacheDataDescription from class org.hibernate.test.cache.infinispan.AbstractEntityCollectionRegionTestCase",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/ratpack/ratpack.git",
	"sha1": "2581441eda268c45306423dd4c515514d98a14a0",
	"url": "https://github.com/ratpack/ratpack/commit/2581441eda268c45306423dd4c515514d98a14a0",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class ratpack.jackson.JacksonModule moved to ratpack.jackson.guice.JacksonModule",
	"motivations": [ 
	{ 
                "label": "RP: Improve package name",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/ratpack/ratpack.git",
	"sha1": "da6167af3bdbf7663af6c20fb603aba27dd5e174",
	"url": "https://github.com/ratpack/ratpack/commit/da6167af3bdbf7663af6c20fb603aba27dd5e174",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private post(responseStatus HttpResponseStatus, lastContentFuture ChannelFuture) : void extracted from private post(responseStatus HttpResponseStatus) : void in class ratpack.server.internal.DefaultResponseTransmitter",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/apache/cassandra.git",
	"sha1": "b70f7ea0ce27b5defa0a7773d448732364e7aee0",
	"url": "https://github.com/apache/cassandra/commit/b70f7ea0ce27b5defa0a7773d448732364e7aee0",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private listSnapshots() : List<File> extracted from public getSnapshotDetails() : Map<String,Pair<Long,Long>> in class org.apache.cassandra.db.Directories",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/apache/cassandra.git",
	"sha1": "446e2537895c15b404a74107069a12f3fc404b15",
	"url": "https://github.com/apache/cassandra/commit/446e2537895c15b404a74107069a12f3fc404b15",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat.SplitCallable moved to org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable",
	"motivations": [ 
	{ 
                "label": "MC: Remove inner classes from deprecated container",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.apache.cassandra.hadoop.BulkRecordWriter.NullOutputHandler moved to org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler",
	"motivations": [ 
	{ 
                "label": "MC: Remove inner classes from deprecated container",
                "status": "match2"
	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Cassandra.Client to Session in method protected getClient() : Session in class org.apache.cassandra.pig.PigTestBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type client : Cassandra.Client to client : Session in method protected executeCQLStatements(statements String[]) : void in class org.apache.cassandra.pig.PigTestBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type column : Tuple to column : Object in method public testCassandraStorageDataType() : void in class org.apache.cassandra.pig.ThriftColumnFamilyDataTypeTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageSchema() : void renamed to public testCqlNativeStorageSchema() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageFullCopy() : void renamed to public testCqlNativeStorageFullCopy() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageSingleTupleCopy() : void renamed to public testCqlNativeStorageSingleTupleCopy() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageBagOnlyCopy() : void renamed to public testCqlNativeStorageBagOnlyCopy() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageFilter() : void renamed to public testCqlNativeStorageFilter() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageJoin() : void renamed to public testCqlNativeStorageJoin() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageCounterCF() : void renamed to public testCqlNativeStorageCounterCF() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageCompositeColumnCF() : void renamed to public testCqlNativeStorageCompositeColumnCF() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testCassandraStorageCompositeKeyCF() : void renamed to public testCqlNativeStorageCompositeKeyCF() : void in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type got : ColumnOrSuperColumn to row : Row in method private getColumnValue(ks String, cf String, colName String, key String, validator String) : String in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable got : ColumnOrSuperColumn to row : Row in method private getColumnValue(ks String, cf String, colName String, key String, validator String) : String in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type client : Cassandra.Client to client : Session in method private getColumnValue(ks String, cf String, colName String, key String, validator String) : String in class org.apache.cassandra.pig.ThriftColumnFamilyTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public MAPRED_TASK_ID : String from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to public MAPRED_TASK_ID : String from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private logger : Logger from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private logger : Logger from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private keyspace : String from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private keyspace : String from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private cfName : String from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private cfName : String from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private partitioner : IPartitioner from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private partitioner : IPartitioner from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private session : Session from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private session : Session from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public BATCH_THRESHOLD : String from class org.apache.cassandra.hadoop.ColumnFamilyOutputFormat to public BATCH_THRESHOLD : String from class org.apache.cassandra.hadoop.cql3.CqlOutputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public QUEUE_SIZE : String from class org.apache.cassandra.hadoop.ColumnFamilyOutputFormat to public QUEUE_SIZE : String from class org.apache.cassandra.hadoop.cql3.CqlOutputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method protected validateConfiguration(conf Configuration) : void from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to protected validateConfiguration(conf Configuration) : void from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public getSplits(context JobContext) : List<InputSplit> from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to public getSplits(context JobContext) : List<org.apache.hadoop.mapreduce.InputSplit> from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private rangeToTokenRange(metadata Metadata, range Range<Token>) : TokenRange from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private rangeToTokenRange(metadata Metadata, range Range<Token>) : TokenRange from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getSubSplits(keyspace String, cfName String, range TokenRange, conf Configuration) : Map<TokenRange,Long> from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private getSubSplits(keyspace String, cfName String, range TokenRange, conf Configuration) : Map<TokenRange,Long> from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getRangeMap(conf Configuration, keyspace String) : Map<TokenRange,Set<Host>> from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private getRangeMap(conf Configuration, keyspace String) : Map<TokenRange,Set<Host>> from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private describeSplits(keyspace String, table String, tokenRange TokenRange, splitSize int) : Map<TokenRange,Long> from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to private describeSplits(keyspace String, table String, tokenRange TokenRange, splitSize int) : Map<TokenRange,Long> from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type org.apache.hadoop.mapred.InputSplit[] to InputSplit[] in method public getSplits(jobConf JobConf, numSplits int) : InputSplit[] in class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public getSplits(jobConf JobConf, numSplits int) : InputSplit[] from class org.apache.cassandra.hadoop.AbstractColumnFamilyInputFormat to public getSplits(jobConf JobConf, numSplits int) : InputSplit[] from class org.apache.cassandra.hadoop.cql3.CqlInputFormat",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/cassandra.git",
	"sha1": "e37d577b6cfc2d3e11252cef87ab9ebba72e1d52",
	"url": "https://github.com/apache/cassandra/commit/e37d577b6cfc2d3e11252cef87ab9ebba72e1d52",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public assertUdfsEnabled(language String) : void extracted from public create(name FunctionName, argNames List<ColumnIdentifier>, argTypes List<AbstractType<?>>, returnType AbstractType<?>, calledOnNullInput boolean, language String, body String) : UDFunction in class org.apache.cassandra.cql3.functions.UDFunction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public assertUdfsEnabled(language String) : void extracted from public execute(protocolVersion int, parameters List<ByteBuffer>) : ByteBuffer in class org.apache.cassandra.cql3.functions.UDFunction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public assertUdfsEnabled(language String) : void extracted from public validate(state ClientState) : void in class org.apache.cassandra.cql3.statements.CreateFunctionStatement & moved to class org.apache.cassandra.cql3.functions.UDFunction",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/cassandra.git",
	"sha1": "4fcd7d4d366d001cf5f1f7d926c608c902e3f0af",
	"url": "https://github.com/apache/cassandra/commit/4fcd7d4d366d001cf5f1f7d926c608c902e3f0af",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.apache.cassandra.locator.DynamicEndpointSnitchTest.ScoreUpdater moved to org.apache.cassandra.locator.DynamicEndpointSnitchLongTest.ScoreUpdater",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testConcurrency() : void from class org.apache.cassandra.locator.DynamicEndpointSnitchTest to public testConcurrency() : void from class org.apache.cassandra.locator.DynamicEndpointSnitchLongTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/cassandra.git",
	"sha1": "9a3fa887cfa03c082f249d1d4003d87c14ba5d24",
	"url": "https://github.com/apache/cassandra/commit/9a3fa887cfa03c082f249d1d4003d87c14ba5d24",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getSpecifiedTokens(metadata TokenMetadata, initialTokens Collection<String>) : Collection<Token> extracted from public getBootstrapTokens(metadata TokenMetadata) : Collection<Token> in class org.apache.cassandra.dht.BootStrapper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	}	]
},
{
	"type": "Extract Method",
	"description": "Extract Method public getRandomToken(r Random) : LongToken extracted from public getRandomToken() : LongToken in class org.apache.cassandra.dht.Murmur3Partitioner",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	},
	{
			"label": "EM: Improve testability",
			"status": "match1"
	}
	]
},
{
	"type": "Extract Method",
	"description": "Extract Method private generateFakeEndpoints(tmd TokenMetadata, numOldNodes int, numVNodes int) : void extracted from private generateFakeEndpoints(numOldNodes int) : void in class org.apache.cassandra.dht.BootStrapperTest",
	"motivations": [ 
			{ 
						"label": "EM: Introduce alternative method signature",
						"status": "match2"
			}	]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable addr : InetAddress in method private generateFakeEndpoints(tmd TokenMetadata, numOldNodes int, numVNodes int) : void from class org.apache.cassandra.dht.BootStrapperTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/addthis/hydra.git",
	"sha1": "7fea4c9d5ee97d4a61ad985cadc9c5c0ab2db780",
	"url": "https://github.com/addthis/hydra/commit/7fea4c9d5ee97d4a61ad985cadc9c5c0ab2db780",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer.JobTaskItem moved to com.addthis.hydra.job.spawn.balancer.JobTaskItem",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer.HostAndScore moved to com.addthis.hydra.job.spawn.balancer.HostAndScore",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer.HostScore moved to com.addthis.hydra.job.spawn.balancer.HostScore",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match1"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancerConfig moved to com.addthis.hydra.job.spawn.balancer.SpawnBalancerConfig",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancerTaskSizer moved to com.addthis.hydra.job.spawn.balancer.SpawnBalancerTaskSizer",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancerTest moved to com.addthis.hydra.job.spawn.balancer.SpawnBalancerTest",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer moved to com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer.JobTaskItemByHostMap moved to com.addthis.hydra.job.spawn.balancer.JobTaskItemByHostMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.addthis.hydra.job.spawn.SpawnBalancer.AutobalanceTask moved to com.addthis.hydra.job.spawn.balancer.AutobalanceTask",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type type : SpawnBalancer.RebalanceType to type : RebalanceType in method protected autobalance(type RebalanceType, weight RebalanceWeight) : void in class com.addthis.hydra.job.spawn.Spawn",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type weight : SpawnBalancer.RebalanceWeight to weight : RebalanceWeight in method protected autobalance(type RebalanceType, weight RebalanceWeight) : void in class com.addthis.hydra.job.spawn.Spawn",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type job : Job to job : IJob in method private isWellFormedAndActiveJob(job IJob) : boolean in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Collection<HostState> in method public generateAssignedTasksForNewJob(jobID String, taskCount int, hosts Collection<HostState>) : List<JobTask> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type entry : Entry<JobTask,String> to entry : Map.Entry<JobTask,String> in method public generateAssignedTasksForNewJob(jobID String, taskCount int, hosts Collection<HostState>) : List<JobTask> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type host : HostState to hostStateDoubleEntry : Map.Entry<HostState,Double> in method private assignTasksFromSingleJobToHosts(tasks List<JobTask>, storedHostScores Map<HostState,Double>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable host : HostState to hostStateDoubleEntry : Map.Entry<HostState,Double> in method private assignTasksFromSingleJobToHosts(tasks List<JobTask>, storedHostScores Map<HostState,Double>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type hostsToAssign : List<String> to hostsToAssign : Collection<String> in method private assignTasksFromSingleJobToHosts(tasks List<JobTask>, storedHostScores Map<HostState,Double>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<String> to hosts : Collection<String> in method private pairTasksAndHosts(tasks List<JobTask>, hosts Collection<String>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type unassignedTasks : List<JobTask> to unassignedTasks : Collection<JobTask> in method private pairTasksAndHosts(tasks List<JobTask>, hosts Collection<String>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type tasks : List<JobTask> to tasks : Collection<JobTask> in method public assignTasksFromMultipleJobsToHosts(tasks Collection<JobTask>, hosts Collection<HostState>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Collection<HostState> in method public assignTasksFromMultipleJobsToHosts(tasks Collection<JobTask>, hosts Collection<HostState>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type tasksByJobID : HashMap<String,List<JobTask>> to tasksByJobID : Map<String,List<JobTask>> in method public assignTasksFromMultipleJobsToHosts(tasks Collection<JobTask>, hosts Collection<HostState>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type hostAssignments : HashMap<JobTask,String> to hostAssignments : Map<JobTask,String> in method public assignTasksFromMultipleJobsToHosts(tasks Collection<JobTask>, hosts Collection<HostState>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type entry : Entry<String,List<JobTask>> to entry : Map.Entry<String,List<JobTask>> in method public assignTasksFromMultipleJobsToHosts(tasks Collection<JobTask>, hosts Collection<HostState>) : Map<JobTask,String> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type candidateAssignments : List<JobTaskMoveAssignment> to candidateAssignments : Iterable<JobTaskMoveAssignment> in method private removeDuplicateAssignments(candidateAssignments Iterable<JobTaskMoveAssignment>) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type movedTasks : HashSet<JobKey> to movedTasks : Collection<JobKey> in method private removeDuplicateAssignments(candidateAssignments Iterable<JobTaskMoveAssignment>) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type alreadyMoved : Set<JobKey> to alreadyMoved : Collection<JobKey> in method private moveTasksOffHost(tasksByHost JobTaskItemByHostMap, maxPerHost int, numToMove int, maxBytesToMove long, pushHost String) : MoveAssignmentList in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type alreadyMoved : Set<JobKey> to alreadyMoved : Collection<JobKey> in method private moveTasksOntoHost(tasksByHost JobTaskItemByHostMap, maxPerHost int, numToMove int, maxBytesToMove long, pullHost String) : MoveAssignmentList in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type pushHostItems : List<JobTaskItem> to pushHostItems : Collection<JobTaskItem> in method private moveTasksOntoHost(tasksByHost JobTaskItemByHostMap, maxPerHost int, numToMove int, maxBytesToMove long, pullHost String) : MoveAssignmentList in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type tasks : List<JobTask> to tasks : Iterable<JobTask> in method private generateTaskCountByHost(hosts List<HostState>, tasks Iterable<JobTask>) : JobTaskItemByHostMap in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<JobTask> to Iterable<JobTask> in method private findTasksToMove(host HostState, obeyDontAutobalanceMe boolean) : Iterable<JobTask> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type rv : List<JobTask> to rv : Collection<JobTask> in method private findTasksToMove(host HostState, obeyDontAutobalanceMe boolean) : Iterable<JobTask> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type heavyHosts : List<HostState> to heavyHosts : Iterable<HostState> in method private pushTasksOntoDisk(host HostState, heavyHosts Iterable<HostState>) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type otherHosts : List<HostState> to otherHosts : Collection<HostState> in method private pushTasksOffHost(host HostState, otherHosts Collection<HostState>, limitBytes boolean, byteLimitFactor double, moveLimit int, obeyDontAutobalanceMe boolean) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type otherHosts : List<HostState> to otherHosts : Collection<HostState> in method private moveTask(task JobTask, fromHostId String, otherHosts Collection<HostState>) : JobTaskMoveAssignment in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type List<JobTaskMoveAssignment> to Collection<JobTaskMoveAssignment> in method private balanceActiveJobsOnHost(host HostState, hosts List<HostState>) : Collection<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type candidateAssignments : List<JobTaskMoveAssignment> to candidateAssignments : Iterable<JobTaskMoveAssignment> in method private pruneTaskReassignments(candidateAssignments Iterable<JobTaskMoveAssignment>) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type snapshot : HashMap<String,Boolean> to snapshot : Map<String,Boolean> in method private pruneTaskReassignments(candidateAssignments Iterable<JobTaskMoveAssignment>) : List<JobTaskMoveAssignment> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Iterable<HostState> in method private removeDownHosts(hosts Iterable<HostState>) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type job : Job to job : IJob in method private generateTaskCountHostScoreMap(job IJob) : Map<String,Double> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type hostsToCheck : List<HostState> to hostsToCheck : Collection<HostState> in method protected hasFullDiskHost(task JobTask) : boolean in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type job : Job to job : IJob in method public removeInvalidReplicas(job IJob) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type oldReplicas : List<JobTaskReplica> to oldReplicas : Iterable<JobTaskReplica> in method public removeInvalidReplicas(job IJob) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type replicasSeen : List<String> to replicasSeen : Collection<String> in method public removeInvalidReplicas(job IJob) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type job : Job to job : IJob in method public getAssignmentsForNewReplicas(job IJob, taskID int) : Map<Integer,List<String>> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type entry : Entry<String,Double> to entry : Map.Entry<String,Double> in method public getAssignmentsForNewReplicas(job IJob, taskID int) : Map<Integer,List<String>> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type job : Job to job : IJob in method public getAssignmentsForNewReplicas(job IJob) : Map<Integer,List<String>> in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Iterable<HostState> in method protected updateAggregateStatistics(hosts Iterable<HostState>) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type sortedTasks : ArrayList<JobTask> to sortedTasks : List<JobTask> in method public fixTasksForFailedHost(hosts List<HostState>, failedHost String) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type modifiedJobIds : HashSet<String> to modifiedJobIds : Collection<String> in method public fixTasksForFailedHost(hosts List<HostState>, failedHost String) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Collection<HostState> in method private attemptFixTaskForFailedHost(task JobTask, hosts Collection<HostState>, failedHostUuid String) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type newReplicaHost : HostState to newReplicaHost : CoreMessage in method private executeHostFailureRecovery(task JobTask, failedHostUuid String, newReplicaHost CoreMessage) : void in class com.addthis.hydra.job.spawn.balancer.SpawnBalancer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type hosts : List<HostState> to hosts : Iterable<HostState> in method public JobTaskItemByHostMap(spawnBalancer SpawnBalancer, hosts Iterable<HostState>, maxPulledFromHost int, maxPushedToHost int) in class com.addthis.hydra.job.spawn.balancer.JobTaskItemByHostMap",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type copy : ArrayList<String> to copy : List<String> in method public getHostIterator(smallFirst boolean) : Iterator<String> in class com.addthis.hydra.job.spawn.balancer.JobTaskItemByHostMap",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/hive.git",
	"sha1": "102b23b16bf26cbf439009b4b95542490a082710",
	"url": "https://github.com/apache/hive/commit/102b23b16bf26cbf439009b4b95542490a082710",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.apache.hadoop.hive.ql.parse.VariableSubstitution moved to org.apache.hadoop.hive.conf.VariableSubstitution",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private executeInternal(sql String, call boolean) : boolean extracted from private execute(line String, call boolean, entireLineAsCommand boolean) : boolean in class org.apache.hive.beeline.Commands",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "match1"
            },
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public handleMultiLineCmd(line String) : String extracted from private execute(line String, call boolean, entireLineAsCommand boolean) : boolean in class org.apache.hive.beeline.Commands",
	"motivations": [ 
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
},
{
	"type": "Move Method",
	"description": "Move Method private isSourceCMD(cmd String) : boolean from class org.apache.hive.beeline.BeeLine to private isSourceCMD(cmd String) : boolean from class org.apache.hive.beeline.Commands",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private sourceFile(cmd String) : boolean from class org.apache.hive.beeline.BeeLine to private sourceFile(cmd String) : boolean from class org.apache.hive.beeline.Commands",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getFirstCmd(cmd String, length int) : String from class org.apache.hive.beeline.BeeLine to private getFirstCmd(cmd String, length int) : String from class org.apache.hive.beeline.Commands",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private cliToBeelineCmd(cmd String) : String from class org.apache.hive.beeline.BeeLine to private cliToBeelineCmd(cmd String) : String from class org.apache.hive.beeline.Commands",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/hive.git",
	"sha1": "0fa45e4a562fc2586b1ef06a88e9c186a0835316",
	"url": "https://github.com/apache/hive/commit/0fa45e4a562fc2586b1ef06a88e9c186a0835316",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method public doImport() : void renamed to public importAll() : void in class org.apache.hadoop.hive.metastore.hbase.TestHBaseImport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private setupObjectStore(rdbms RawStore, roles String[], dbNames String[], tokenIds String[], tokens String[], masterKeys String[], now int) : void extracted from public doImport() : void in class org.apache.hadoop.hive.metastore.hbase.TestHBaseImport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type HBaseImport to void in method package setConnections(rdbms RawStore, hbase RawStore) : void in class org.apache.hadoop.hive.metastore.hbase.HBaseImport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type rdbmsStore : RawStore to rdbmsStore : ThreadLocal<RawStore> in class org.apache.hadoop.hive.metastore.hbase.HBaseImport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type hbaseStore : RawStore to hbaseStore : ThreadLocal<RawStore> in class org.apache.hadoop.hive.metastore.hbase.HBaseImport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private copyOneFunction(dbName String, funcName String) : void extracted from private copyFunctions() : void in class org.apache.hadoop.hive.metastore.hbase.HBaseImport",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/hive.git",
	"sha1": "e2dd54ab180b577b08cf6b0e69310ac81fc99fd3",
	"url": "https://github.com/apache/hive/commit/e2dd54ab180b577b08cf6b0e69310ac81fc99fd3",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private foldExprShortcut(desc ExprNodeDesc, constants Map<ColumnInfo,ExprNodeDesc>, cppCtx ConstantPropagateProcCtx, op Operator<? extends Serializable>, tag int, propagate boolean) : ExprNodeDesc extracted from private foldExpr(desc ExprNodeDesc, constants Map<ColumnInfo,ExprNodeDesc>, cppCtx ConstantPropagateProcCtx, op Operator<? extends Serializable>, tag int, propagate boolean) : ExprNodeDesc in class org.apache.hadoop.hive.ql.optimizer.ConstantPropagateProcFactory",
	"motivations": [ 
	            {
                "label": "EM: Decompose method to improve readability",
                "status": "add"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            }
	]
},
{
	"type": "Extract Method",
	"description": "Extract Method private foldExprFull(desc ExprNodeDesc, constants Map<ColumnInfo,ExprNodeDesc>, cppCtx ConstantPropagateProcCtx, op Operator<? extends Serializable>, tag int, propagate boolean) : ExprNodeDesc extracted from private foldExpr(desc ExprNodeDesc, constants Map<ColumnInfo,ExprNodeDesc>, cppCtx ConstantPropagateProcCtx, op Operator<? extends Serializable>, tag int, propagate boolean) : ExprNodeDesc in class org.apache.hadoop.hive.ql.optimizer.ConstantPropagateProcFactory",
	"motivations": [ 
            {
                "label": "EM: Decompose method to improve readability",
                "status": "add"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/apache/hive.git",
	"sha1": "d69e5cb21c04d9eede314aaa9ad059fc603fb025",
	"url": "https://github.com/apache/hive/commit/d69e5cb21c04d9eede314aaa9ad059fc603fb025",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute private tag : byte from class org.apache.hadoop.hive.ql.exec.SparkHashTableSinkOperator to private tag : byte from class org.apache.hadoop.hive.ql.plan.SparkHashTableSinkDesc",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public setTag(tag byte) : void from class org.apache.hadoop.hive.ql.exec.SparkHashTableSinkOperator to public setTag(tag byte) : void from class org.apache.hadoop.hive.ql.plan.SparkHashTableSinkDesc",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/apache/hive.git",
	"sha1": "5f78f9ef1e6c798849d34cc66721e6c1d9709b6f",
	"url": "https://github.com/apache/hive/commit/5f78f9ef1e6c798849d34cc66721e6c1d9709b6f",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method package generateSplitsInfo(conf Configuration, numSplits int) : List<OrcSplit> extracted from package generateSplitsInfo(conf Configuration) : List<OrcSplit> in class org.apache.hadoop.hive.ql.io.orc.OrcInputFormat",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/google/closure-compiler.git",
	"sha1": "ea96643364e91125f560e9508a5cbcdb776bde64",
	"url": "https://github.com/google/closure-compiler/commit/ea96643364e91125f560e9508a5cbcdb776bde64",
	"refactorings": [{
	"type": "Extract Variable",
	"description": "Extract Variable type : TypeDeclarationNode in method package processFunctionType(tree FunctionTypeTree) : Node from class com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Split Variable",
	"description": "Split Variable parameters : LinkedHashMap<String,TypeDeclarationNode> to [optionalParams : LinkedHashMap<String,TypeDeclarationNode>, requiredParams : LinkedHashMap<String,TypeDeclarationNode>] in method public convertTypeNodeAST(n Node) : TypeDeclarationNode in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactory",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private peekParameter(inTypeExpression boolean) : boolean extracted from private parseFormalParameterList() : FormalParameterListTree in class com.google.javascript.jscomp.parsing.parser.Parser",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private parseParameter(inTypeExpression boolean) : ParseTree extracted from private parseFormalParameterList() : FormalParameterListTree in class com.google.javascript.jscomp.parsing.parser.Parser",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private parseFormalParameterList(inTypeExpression boolean) : FormalParameterListTree extracted from private parseFormalParameterList() : FormalParameterListTree in class com.google.javascript.jscomp.parsing.parser.Parser",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey : Node to p1 : Node in method public testConvertFunctionType() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey1 : Node to p2 : Node in method public testConvertFunctionType() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey1 : Node to p1 : Node in method public testConvertFunctionThisType() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey1 : Node to p1 : Node in method public testConvertFunctionNewType() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey1 : Node to p1 : Node in method public testConvertVariableParameters() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable stringKey2 : Node to p2 : Node in method public testConvertVariableParameters() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable parameters : LinkedHashMap<String,TypeDeclarationNode> to requiredParams : LinkedHashMap<String,TypeDeclarationNode> in method public testConvertOptionalFunctionParameters() : void in class com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactoryTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/closure-compiler.git",
	"sha1": "b9a17665b158955ad28ef7f50cc0a8585460f053",
	"url": "https://github.com/google/closure-compiler/commit/b9a17665b158955ad28ef7f50cc0a8585460f053",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private createTaggedTemplateLiteral(t NodeTraversal, n Node) : void renamed to package visitTaggedTemplateLiteral(t NodeTraversal, n Node) : void in class com.google.javascript.jscomp.Es6TemplateLiterals",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private createUntaggedTemplateLiteral(n Node) : void inlined to package visitTemplateLiteral(t NodeTraversal, n Node) : void in class com.google.javascript.jscomp.Es6TemplateLiterals",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable templateLitNode : Node in method package processTemplateLiteral(tree TemplateLiteralExpressionTree) : Node from class com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/closure-compiler.git",
	"sha1": "ba5e6d44526a2491a7004423ca2ad780c6992c46",
	"url": "https://github.com/google/closure-compiler/commit/ba5e6d44526a2491a7004423ca2ad780c6992c46",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method private getRawTypeFromJSType(t JSType) : RawNominalType inlined to private visitOtherPropertyDeclaration(getProp Node) : void in class com.google.javascript.jscomp.GlobalTypeInfo.ProcessScope",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/go-lang-plugin-org/go-lang-idea-plugin.git",
	"sha1": "0b93231025f51c7ec62fd8588985c5dc807854e4",
	"url": "https://github.com/go-lang-plugin-org/go-lang-idea-plugin/commit/0b93231025f51c7ec62fd8588985c5dc807854e4",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected doSomething(virtualFile VirtualFile, module Module, project Project, title String, withProgress boolean) : boolean extracted from protected doSomething(virtualFile VirtualFile, module Module, project Project, title String) : boolean in class com.goide.actions.fmt.GoExternalToolsAction",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-framework.git",
	"sha1": "ece12f9d370108549fffac105e4bcb7faeaaf124",
	"url": "https://github.com/spring-projects/spring-framework/commit/ece12f9d370108549fffac105e4bcb7faeaaf124",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type void to Map<String,Object> in method private enrichAndValidateAttributes(attributes Map<String,Object>, annotationType Class<? extends Annotation>) : Map<String,Object> in class org.springframework.core.annotation.MapAnnotationAttributeExtractor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method private validateAttributes(attributes Map<String,Object>, annotationType Class<? extends Annotation>) : void renamed to private enrichAndValidateAttributes(attributes Map<String,Object>, annotationType Class<? extends Annotation>) : Map<String,Object> in class org.springframework.core.annotation.MapAnnotationAttributeExtractor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private assertMissingTextAttribute(attributes Map<String,Object>) : void extracted from public synthesizeAnnotationFromMapWithMissingAttributeValue() : void in class org.springframework.core.annotation.AnnotationUtilsTests",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private assertMissingTextAttribute(attributes Map<String,Object>) : void extracted from public synthesizeAnnotationFromMapWithNullAttributeValue() : void in class org.springframework.core.annotation.AnnotationUtilsTests",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable map : Map<String,Object> to attributes : Map<String,Object> in method private assertMissingTextAttribute(attributes Map<String,Object>) : void in class org.springframework.core.annotation.AnnotationUtilsTests",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable transactionManagerName : String in method package retrieveConfigurationAttributes(testContext TestContext) : TransactionConfigurationAttributes from class org.springframework.test.context.transaction.TransactionalTestExecutionListener",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable defaultRollback : boolean in method package retrieveConfigurationAttributes(testContext TestContext) : TransactionConfigurationAttributes from class org.springframework.test.context.transaction.TransactionalTestExecutionListener",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-framework.git",
	"sha1": "e083683f4fe9206609201bb39a60bbd8ee0c8a0f",
	"url": "https://github.com/spring-projects/spring-framework/commit/e083683f4fe9206609201bb39a60bbd8ee0c8a0f",
	"refactorings": [{
	"type": "Change Variable Type",
	"description": "Change Variable Type hm : SimpleUrlHandlerMapping to hm : WebSocketHandlerMapping in method public getHandlerMapping() : AbstractHandlerMapping in class org.springframework.web.socket.config.annotation.ServletWebSocketHandlerRegistry",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Superclass",
	"description": "Extract Superclass org.springframework.web.socket.server.support.AbstractHandshakeHandler from classes [org.springframework.web.socket.server.support.DefaultHandshakeHandler]",
	"motivations": [ 
	{ 
			"label": "ES: Isolate dependencies",
			"status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method private initRequestUpgradeStrategy() : RequestUpgradeStrategy from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private initRequestUpgradeStrategy() : RequestUpgradeStrategy from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setSupportedProtocols(protocols String...) : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public setSupportedProtocols(protocols String...) : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getSupportedProtocols() : String[] from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public getSupportedProtocols() : String[] from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public isRunning() : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public isRunning() : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public start() : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public start() : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected doStart() : void extracted from public start() : void in class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public stop() : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public stop() : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected doStop() : void extracted from public stop() : void in class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public doHandshake(request ServerHttpRequest, response ServerHttpResponse, wsHandler WebSocketHandler, attributes Map<String,Object>) : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to public doHandshake(request ServerHttpRequest, response ServerHttpResponse, wsHandler WebSocketHandler, attributes Map<String,Object>) : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected handleInvalidUpgradeHeader(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected handleInvalidUpgradeHeader(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected handleInvalidConnectHeader(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected handleInvalidConnectHeader(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected isWebSocketVersionSupported(httpHeaders WebSocketHttpHeaders) : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected isWebSocketVersionSupported(httpHeaders WebSocketHttpHeaders) : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected getSupportedVersions() : String[] from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected getSupportedVersions() : String[] from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected handleWebSocketVersionNotSupported(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected handleWebSocketVersionNotSupported(request ServerHttpRequest, response ServerHttpResponse) : void from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected isValidOrigin(request ServerHttpRequest) : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected isValidOrigin(request ServerHttpRequest) : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected selectProtocol(requestedProtocols List<String>, webSocketHandler WebSocketHandler) : String from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected selectProtocol(requestedProtocols List<String>, webSocketHandler WebSocketHandler) : String from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected determineHandlerSupportedProtocols(handler WebSocketHandler) : List<String> from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected determineHandlerSupportedProtocols(handler WebSocketHandler) : List<String> from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected filterRequestedExtensions(request ServerHttpRequest, requestedExtensions List<WebSocketExtension>, supportedExtensions List<WebSocketExtension>) : List<WebSocketExtension> from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected filterRequestedExtensions(request ServerHttpRequest, requestedExtensions List<WebSocketExtension>, supportedExtensions List<WebSocketExtension>) : List<WebSocketExtension> from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method protected determineUser(request ServerHttpRequest, wsHandler WebSocketHandler, attributes Map<String,Object>) : Principal from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected determineUser(request ServerHttpRequest, wsHandler WebSocketHandler, attributes Map<String,Object>) : Principal from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private UTF8_CHARSET : Charset from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private UTF8_CHARSET : Charset from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private jettyWsPresent : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private jettyWsPresent : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private tomcatWsPresent : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private tomcatWsPresent : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private undertowWsPresent : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private undertowWsPresent : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private glassFishWsPresent : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private glassFishWsPresent : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private webLogicWsPresent : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private webLogicWsPresent : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected logger : Log from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected logger : Log from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private requestUpgradeStrategy : RequestUpgradeStrategy from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private requestUpgradeStrategy : RequestUpgradeStrategy from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private supportedProtocols : List<String> from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private supportedProtocols : List<String> from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private running : boolean from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to private running : boolean from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public DefaultHandshakeHandler() from class org.springframework.web.socket.server.support.DefaultHandshakeHandler to protected AbstractHandshakeHandler() from class org.springframework.web.socket.server.support.AbstractHandshakeHandler",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/processing/processing.git",
	"sha1": "8707194f003444a9fb8e00bffa2893ef0c2492c6",
	"url": "https://github.com/processing/processing/commit/8707194f003444a9fb8e00bffa2893ef0c2492c6",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method private setFrameCentered() : void inlined to public placeWindow(location int[], editorLocation int[]) : void in class processing.opengl.PSurfaceJOGL",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable w : int in method private setFrameCentered() : void from class processing.opengl.PSurfaceJOGL",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Variable",
	"description": "Inline Variable h : int in method private setFrameCentered() : void from class processing.opengl.PSurfaceJOGL",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/processing/processing.git",
	"sha1": "d403a0b2322a74dde824094d67b7997c1c371883",
	"url": "https://github.com/processing/processing/commit/d403a0b2322a74dde824094d67b7997c1c371883",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class processing.app.contrib.UpdateContribListingPanel moved to processing.app.contrib.UpdateContributionTab.UpdateContribListingPanel",
	"motivations": [ 
	{ 
                "label": "MC: Convert to inner class",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class processing.app.contrib.UpdateStatusPanel moved to processing.app.contrib.UpdateContributionTab.UpdateStatusPanel",
	"motivations": [ 
	{ 
                "label": "MC: Convert to inner class",
                "status": "match2"
	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type updatesContributionTab : ContributionTab to updatesContributionTab : UpdateContributionTab in class processing.app.contrib.ContributionManagerDialog",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/processing/processing.git",
	"sha1": "d7f781da42e54824c17875a6036d3448672637f5",
	"url": "https://github.com/processing/processing/commit/d7f781da42e54824c17875a6036d3448672637f5",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute public ERROR_TEXTFONT_NULL_PFONT : String from class processing.core.PConstants to protected ERROR_TEXTFONT_NULL_PFONT : String from class processing.core.PGraphics",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public ERROR_BACKGROUND_IMAGE_SIZE : String from class processing.core.PConstants to protected ERROR_BACKGROUND_IMAGE_SIZE : String from class processing.core.PGraphics",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public ERROR_BACKGROUND_IMAGE_FORMAT : String from class processing.core.PConstants to protected ERROR_BACKGROUND_IMAGE_FORMAT : String from class processing.core.PGraphics",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public ERROR_PUSHMATRIX_OVERFLOW : String from class processing.core.PConstants to protected ERROR_PUSHMATRIX_OVERFLOW : String from class processing.core.PGraphics",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public ERROR_PUSHMATRIX_UNDERFLOW : String from class processing.core.PConstants to protected ERROR_PUSHMATRIX_UNDERFLOW : String from class processing.core.PGraphics",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/spring-projects/spring-roo.git",
	"sha1": "0bb4cca1105fc6eb86e7c4b75bfff3dbbd55f0c8",
	"url": "https://github.com/spring-projects/spring-roo/commit/0bb4cca1105fc6eb86e7c4b75bfff3dbbd55f0c8",
	"refactorings": [{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private genericDefinition : String from class org.springframework.roo.classpath.details.MethodMetadataBuilder to private genericDefinition : String from class org.springframework.roo.classpath.details.AbstractInvocableMemberMetadataBuilder",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getGenericDefinition() : String from class org.springframework.roo.classpath.details.MethodMetadataBuilder to public getGenericDefinition() : String from class org.springframework.roo.classpath.details.AbstractInvocableMemberMetadataBuilder",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter definition : String to genericDefinition : String in method public setGenericDefinition(genericDefinition String) : void in class org.springframework.roo.classpath.details.AbstractInvocableMemberMetadataBuilder",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setGenericDefinition(definition String) : void from class org.springframework.roo.classpath.details.MethodMetadataBuilder to public setGenericDefinition(genericDefinition String) : void from class org.springframework.roo.classpath.details.AbstractInvocableMemberMetadataBuilder",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/cgeo/cgeo.git",
	"sha1": "7e7e4f54801af4e49ebddb934d0c6ff33a2c2160",
	"url": "https://github.com/cgeo/cgeo/commit/7e7e4f54801af4e49ebddb934d0c6ff33a2c2160",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class cgeo.geocaching.connector.TerraCachingConnector moved to cgeo.geocaching.connector.tc.TerraCachingConnector",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/checkstyle/checkstyle.git",
	"sha1": "2f7481ee4e20ae785298c31ec2f979752dd7eb03",
	"url": "https://github.com/checkstyle/checkstyle/commit/2f7481ee4e20ae785298c31ec2f979752dd7eb03",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private checkInterfaceModifiers(ast DetailAST) : void extracted from public visitToken(ast DetailAST) : void in class com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/checkstyle/checkstyle.git",
	"sha1": "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20",
	"url": "https://github.com/checkstyle/checkstyle/commit/5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private isDeclarationToken(parentType int) : boolean extracted from private processIDENT(ast DetailAST) : void in class com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private processField(ast DetailAST, parentType int) : void extracted from private processIDENT(ast DetailAST) : void in class com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/k9mail/k-9.git",
	"sha1": "23c49d834d3859fc76a604da32d1789d2e863303",
	"url": "https://github.com/k9mail/k-9/commit/23c49d834d3859fc76a604da32d1789d2e863303",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private addWearActions(builder NotificationCompat.Builder, totalMsgCount int, msgCount int, account Account, allRefs ArrayList<MessageReference>, messages List<? extends Message>, notificationID int) : void extracted from private notifyAccountWithDataLocked(context Context, account Account, message LocalMessage, data NotificationData) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private buildNotificationNavigationStack(context Context, account Account, message LocalMessage, newMessages int, unreadCount int, allRefs ArrayList<MessageReference>) : TaskStackBuilder extracted from private notifyAccountWithDataLocked(context Context, account Account, message LocalMessage, data NotificationData) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private setNotificationContent(context Context, message Message, sender CharSequence, subject CharSequence, builder NotificationCompat.Builder, accountDescr String) : NotificationCompat.Builder extracted from private notifyAccountWithDataLocked(context Context, account Account, message LocalMessage, data NotificationData) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
            },
            {
                "label": "EM: Extract reusable method",
                "status": "match1"
            } ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable notifMgr : NotificationManager to notificationManager : NotificationManager in method public notifyAccountCancel(context Context, account Account) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type messages : LinkedList<LocalMessage> to messages : List<? extends Message> in method public isArchiveAllMessagesWearAvaliable(context Context, account Account, messages List<? extends Message>) : boolean in class com.fsck.k9.service.NotificationActionService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type messages : LinkedList<LocalMessage> to messages : List<? extends Message> in method public isSpamAllMessagesWearAvaliable(context Context, account Account, messages List<? extends Message>) : boolean in class com.fsck.k9.service.NotificationActionService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Parameter Type",
	"description": "Change Parameter Type messages : List<LocalMessage> to messages : List<? extends Message> in method private isMovePossible(controller MessagingController, account Account, dstFolder String, messages List<? extends Message>) : boolean in class com.fsck.k9.service.NotificationActionService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type messageToMove : LocalMessage to messageToMove : Message in method private isMovePossible(controller MessagingController, account Account, dstFolder String, messages List<? extends Message>) : boolean in class com.fsck.k9.service.NotificationActionService",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/k9mail/k-9.git",
	"sha1": "9d44f0e06232661259681d64002dd53c7c43099d",
	"url": "https://github.com/k9mail/k-9/commit/9d44f0e06232661259681d64002dd53c7c43099d",
	"refactorings": [{
	"type": "Rename Variable",
	"description": "Rename Variable possibleSend : boolean to entireMessageSent : boolean in method private sendMessageTo(addresses List<String>, message Message) : void in class com.fsck.k9.mail.transport.SmtpTransport",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private handleSendFailure(account Account, localStore Store, localFolder Folder, message Message, exception Exception, permanentFailure boolean) : void extracted from public sendPendingMessagesSynchronous(account Account) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private notifySynchronizeMailboxFailed(account Account, localFolder Folder, exception Exception) : void extracted from public sendPendingMessagesSynchronous(account Account) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable folderName : String in method private notifySynchronizeMailboxFailed(account Account, localFolder Folder, exception Exception) : void from class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable errorMessage : String in method private notifySynchronizeMailboxFailed(account Account, localFolder Folder, exception Exception) : void from class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable l : MessagingListener to listener : MessagingListener in method private notifySynchronizeMailboxFailed(account Account, localFolder Folder, exception Exception) : void in class com.fsck.k9.controller.MessagingController",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/jMonkeyEngine/jmonkeyengine.git",
	"sha1": "5989711f7315abe4c3da0f1516a3eb3a81da6716",
	"url": "https://github.com/jMonkeyEngine/jmonkeyengine/commit/5989711f7315abe4c3da0f1516a3eb3a81da6716",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected saveLocation() : void extracted from public mousePressed(e MouseEvent) : void in class com.jme3.gde.materialdefinition.editor.DraggablePanel",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "add"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            }]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected movePanel(xoffset int, yoffset int) : void extracted from public mouseDragged(e MouseEvent) : void in class com.jme3.gde.materialdefinition.editor.DraggablePanel",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "add"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/AntennaPod/AntennaPod.git",
	"sha1": "c64217e2b485f3c6b997a55b1ef910c8b72779d3",
	"url": "https://github.com/AntennaPod/AntennaPod/commit/c64217e2b485f3c6b997a55b1ef910c8b72779d3",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public addQueueItem(context Context, performAutoDownload boolean, itemIds long...) : Future<?> extracted from public addQueueItem(context Context, itemIds long...) : Future<?> in class de.danoeh.antennapod.core.storage.DBWriter",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/amplab/tachyon.git",
	"sha1": "ed966510ccf8441115614e2258aea61df0ea55f5",
	"url": "https://github.com/amplab/tachyon/commit/ed966510ccf8441115614e2258aea61df0ea55f5https://github.com/amplab/tachyon/commit/ed966510ccf8441115614e2258aea61df0ea55f5",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private reserveSpace(size long) : void extracted from public addBlockMeta(block BlockMeta) : Optional<BlockMeta> in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable blockSize : long to size : long in method private reserveSpace(size long) : void in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private reserveSpace(size long) : void extracted from public addTempBlockMeta(tempBlockMeta TempBlockMeta) : boolean in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable blockSize : long to size : long in method private reserveSpace(size long) : void in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private reclaimSpace(size long) : void extracted from public removeBlockMeta(block BlockMeta) : boolean in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private reclaimSpace(size long) : void extracted from public removeTempBlockMeta(tempBlockMeta TempBlockMeta) : boolean in class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method public resizeTempBlockMeta(tempBlockMeta TempBlockMeta, newSize long) : void extracted from private requestSpaceNoLock(userId long, blockId long, moreBytes long) : boolean in class tachyon.worker.block.TieredBlockStore & moved to class tachyon.worker.block.meta.StorageDir",
	"motivations": [ 
	{ 
                "label": "EM: Facilitate extension",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/amplab/tachyon.git",
	"sha1": "6d10621465c0e6ae81ad8d240d70a55c72caeea6",
	"url": "https://github.com/amplab/tachyon/commit/6d10621465c0e6ae81ad8d240d70a55c72caeea6",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter blockSize : long to initialBlockSize : long in method public TempBlockMeta(userId long, blockId long, initialBlockSize long, dir StorageDir) in class tachyon.worker.block.meta.TempBlockMeta",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Push Down Attribute",
	"description": "Push Down Attribute protected mBlockSize : long from class tachyon.worker.block.meta.BlockMetaBase to private mBlockSize : long from class tachyon.worker.block.meta.BlockMeta",
	"motivations": [ 
	{ 
                "label": "DA: Specialized implementation",
                "status": "add"
	} ]
},
{
	"type": "Push Down Method",
	"description": "Push Down Method public getBlockSize() : long from class tachyon.worker.block.meta.BlockMetaBase to public getBlockSize() : long from class tachyon.worker.block.meta.BlockMeta",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/amplab/tachyon.git",
	"sha1": "0ba343846f21649e29ffc600f30a7f3e463fb24c",
	"url": "https://github.com/amplab/tachyon/commit/0ba343846f21649e29ffc600f30a7f3e463fb24c",
	"refactorings": [{
	"type": "Extract Superclass",
	"description": "Extract Superclass tachyon.worker.block.meta.BlockMetaBase from classes [tachyon.worker.block.meta.BlockMeta, tachyon.worker.block.meta.TempBlockMeta]",
	"motivations": [ 
	{ 
                "label": "ES: Extract common state/behavior",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getBlockId() : long from class tachyon.worker.block.meta.BlockMeta to public getBlockId() : long from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getBlockSize() : long from class tachyon.worker.block.meta.BlockMeta to public getBlockSize() : long from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getParentDir() : StorageDir from class tachyon.worker.block.meta.BlockMeta to public getParentDir() : StorageDir from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private mBlockId : long from class tachyon.worker.block.meta.BlockMeta to protected mBlockId : long from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private mBlockSize : long from class tachyon.worker.block.meta.BlockMeta to protected mBlockSize : long from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute private mDir : StorageDir from class tachyon.worker.block.meta.BlockMeta to protected mDir : StorageDir from class tachyon.worker.block.meta.BlockMetaBase",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/amplab/tachyon.git",
	"sha1": "b0938501f1014cf663e33b44ed5bb9b24d19a358",
	"url": "https://github.com/amplab/tachyon/commit/b0938501f1014cf663e33b44ed5bb9b24d19a358",
	"refactorings": [{
	"type": "Inline Variable",
	"description": "Inline Variable allocateBytes : long in method package RemoteBlockOutStream(file TachyonFile, opType WriteType, blockIndex int, initialBytes long, tachyonConf TachyonConf) from class tachyon.client.RemoteBlockOutStream",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getBlockOutStream(filename String, isLocalWrite boolean) : BlockOutStream extracted from public disableLocalWriteTest() : void in class tachyon.client.BlockOutStreamIntegrationTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getBlockOutStream(filename String, isLocalWrite boolean) : BlockOutStream extracted from public enableLocalWriteTest() : void in class tachyon.client.BlockOutStreamIntegrationTest",
	"motivations": [ 
	{ 
                "label": "EM: Remove duplication",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/MovingBlocks/Terasology.git",
	"sha1": "543a9808a85619dbe5acc2373cb4fe5344442de7",
	"url": "https://github.com/MovingBlocks/Terasology/commit/543a9808a85619dbe5acc2373cb4fe5344442de7",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.terasology.engine.subsystem.ThreadManager moved to org.terasology.engine.subsystem.common.ThreadManager",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.terasology.engine.subsystem.ThreadManagerSubsystem moved to org.terasology.engine.subsystem.common.ThreadManagerSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Class",
	"description": "Rename Class org.terasology.engine.subsystem.lwjgl.LwjglCustomViewPort renamed to org.terasology.engine.subsystem.lwjgl.LwjglPortlet",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type lwjglCustomViewPort : LwjglCustomViewPort to lwjglPortlet : LwjglPortlet in method public run() : void in class org.terasology.editor.TeraEd",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable lwjglCustomViewPort : LwjglCustomViewPort to lwjglPortlet : LwjglPortlet in method public run() : void in class org.terasology.editor.TeraEd",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable disposeIter : Iterator<EngineSubsystem> to preshutdownIter : Iterator<EngineSubsystem> in method private cleanup() : void in class org.terasology.engine.TerasologyEngine",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute context : Context to rootContext : Context in class org.terasology.engine.TerasologyEngine",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute subsystems : Deque<EngineSubsystem> to allSubsystems : Deque<EngineSubsystem> in class org.terasology.engine.TerasologyEngine",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter context : Context to rootContext : Context in method public preInitialise(rootContext Context) : void in class org.terasology.engine.subsystem.EngineSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter context : Context to rootContext : Context in method public initialise(rootContext Context) : void in class org.terasology.engine.subsystem.EngineSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.headless.HeadlessAudio",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter context : Context to rootContext : Context in method public initialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglAudio",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.lwjgl.LwjglAudio",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private initOpenAL(context Context) : void inlined to public initialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglAudio",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter context : Context to rootContext : Context in method public initialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglAudio",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute context : Context to config : RenderingConfig in class org.terasology.engine.subsystem.lwjgl.LwjglDisplayDevice",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type context : Context to config : RenderingConfig in class org.terasology.engine.subsystem.lwjgl.LwjglDisplayDevice",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter newContext : Context to rootContext : Context in method public initialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglGraphics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter newContext : Context to rootContext : Context in method public postInitialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglGraphics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shutdown(config Config) : void renamed to public preShutdown() : void in class org.terasology.engine.subsystem.lwjgl.LwjglGraphics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.lwjgl.LwjglGraphics",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter context : Context to rootContext : Context in method public postInitialise(rootContext Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglInput",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.lwjgl.LwjglInput",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private initTimer(context Context) : void inlined to public preInitialise(context Context) : void in class org.terasology.engine.subsystem.lwjgl.LwjglTimer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type te : TerasologyEngine to display : DisplayDevice in method public fullscreen() : String in class org.terasology.logic.console.commands.CoreCommands",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable te : TerasologyEngine to display : DisplayDevice in method public fullscreen() : String in class org.terasology.logic.console.commands.CoreCommands",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.common.ThreadManagerSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private time : EngineTime from class org.terasology.engine.TerasologyEngine to private time : EngineTime from class org.terasology.engine.subsystem.headless.HeadlessTimer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private time : EngineTime from class org.terasology.engine.TerasologyEngine to private time : EngineTime from class org.terasology.engine.subsystem.lwjgl.LwjglTimer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private config : Config from class org.terasology.engine.TerasologyEngine to private config : Config from class org.terasology.engine.subsystem.common.ConfigurationSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private validateServerIdentity() : boolean from class org.terasology.engine.TerasologyEngine to private validateServerIdentity() : boolean from class org.terasology.engine.subsystem.common.ConfigurationSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public shutdown(config Config) : void renamed to public preShutdown() : void in class org.terasology.engine.subsystem.EngineSubsystem",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public dispose() : void renamed to public shutdown() : void in class org.terasology.engine.subsystem.EngineSubsystem",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/GoClipse/goclipse.git",
	"sha1": "851ab757698304e9d8d4ae24ab75be619ddae31a",
	"url": "https://github.com/GoClipse/goclipse/commit/851ab757698304e9d8d4ae24ab75be619ddae31a",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method public getInvocationOffest() : int renamed to public getInvocationOffset() : int in class melnorme.lang.ide.ui.editor.actions.AbstractOpenElementOperation",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public contains(other SourceRange) : boolean extracted from public inclusiveContains(other SourceRange) : boolean in class melnorme.lang.tooling.ast.SourceRange",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public contains(otherOffset int) : boolean extracted from public inclusiveContains(otherOffset int) : boolean in class melnorme.lang.tooling.ast.SourceRange",
	"motivations": [ 
	{ 
                "label": "EM: Replace method keeping backward compatibility",
                "status": "match2"
	} ]
},
{
	"type": "Rename Attribute",
	"description": "Rename Attribute UKKNOWN : ImageHandle to UNKNOWN : ImageHandle in class melnorme.lang.ide.ui.LangElementImages",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/j2objc.git",
	"sha1": "fa3e6fa02dadc675f0d487a15cd842b3ac4a0c11",
	"url": "https://github.com/google/j2objc/commit/fa3e6fa02dadc675f0d487a15cd842b3ac4a0c11",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getOperatorFunctionModifier(expr Expression) : String extracted from private rewriteBoxedAssignment(node Assignment) : void in class com.google.devtools.j2objc.translate.Autoboxer",
	"motivations": [ 
	{ 
               "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable lhs : Expression to expr : Expression in method private getOperatorFunctionModifier(expr Expression) : String in class com.google.devtools.j2objc.translate.Autoboxer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getOperatorFunctionModifier(expr Expression) : String extracted from private rewriteBoxedPrefixOrPostfix(node TreeNode, operand Expression, funcName String) : void in class com.google.devtools.j2objc.translate.Autoboxer",
	"motivations": [ 
	{ 
               "label": "EM: Remove duplication",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter operand : Expression to expr : Expression in method private getOperatorFunctionModifier(expr Expression) : String in class com.google.devtools.j2objc.translate.Autoboxer",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/google/j2objc.git",
	"sha1": "d05d92de40542e85f9f26712d976e710be82914e",
	"url": "https://github.com/google/j2objc/commit/d05d92de40542e85f9f26712d976e710be82914e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.google.devtools.j2objc.translate.LambdaExpressionTest moved to com.google.devtools.j2objc.ast.LambdaExpressionTest",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public printLambdaCallWithoutBlocks(functionalInterface IMethodBinding, functionalClassName String, newClassName String, methodBinding IMethodBinding, isCapturing boolean) : void extracted from public visit(node LambdaExpression) : boolean in class com.google.devtools.j2objc.gen.StatementGenerator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public printLambdaCallBlocks(functionalInterface IMethodBinding, parameters List<VariableDeclaration>, isCapturing boolean) : void extracted from public visit(node LambdaExpression) : boolean in class com.google.devtools.j2objc.gen.StatementGenerator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Split Parameter",
	"description": "Split Parameter node : LambdaExpression to [isCapturing : boolean, parameters : List<VariableDeclaration>] in method public printLambdaCallBlocks(functionalInterface IMethodBinding, parameters List<VariableDeclaration>, isCapturing boolean) : void in class com.google.devtools.j2objc.gen.StatementGenerator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public printLambdaCall(functionalInterface IMethodBinding, functionalTypeBinding ITypeBinding, methodBinding IMethodBinding, parameters List<VariableDeclaration>, isCapturing boolean) : void extracted from public visit(node LambdaExpression) : boolean in class com.google.devtools.j2objc.gen.StatementGenerator",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/SonarSource/sonarqube.git",
	"sha1": "5ff305abb3068e420d8e54a796591d75acc8b8be",
	"url": "https://github.com/SonarSource/sonarqube/commit/5ff305abb3068e420d8e54a796591d75acc8b8be",
	"refactorings": [{
	"type": "Extract Interface",
	"description": "Extract Interface org.sonar.api.utils.ProjectTempFolder from classes [org.sonar.api.utils.internal.DefaultTempFolder, org.sonar.api.utils.internal.JUnitTempFolder]",
	"motivations": [ 
	{ 
                "label": "EI: Enable dependency injection",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/SonarSource/sonarqube.git",
	"sha1": "0eaa5217883cfeca688aad1d462192c194741827",
	"url": "https://github.com/SonarSource/sonarqube/commit/0eaa5217883cfeca688aad1d462192c194741827",
	"refactorings": [{
	"type": "Extract Variable",
	"description": "Extract Variable assignee : String in method private getIssueUsersByLogin(issue Issue) : Map<String,User> from class org.sonar.server.issue.InternalRubyIssueService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable reporter : String in method private getIssueUsersByLogin(issue Issue) : Map<String,User> from class org.sonar.server.issue.InternalRubyIssueService",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private userWriter : UserJsonWriter from class org.sonar.server.issue.ws.IssueJsonWriter to private userWriter : UserJsonWriter from class org.sonar.server.issue.InternalRubyIssueService",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private userWriter : UserJsonWriter from class org.sonar.server.issue.ws.IssueJsonWriter to package userWriter : UserJsonWriter from class org.sonar.server.issue.InternalRubyIssueServiceTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/opentripplanner/OpenTripPlanner.git",
	"sha1": "334dbc7cf3432e7c17b0ed98801e61b0b591b408",
	"url": "https://github.com/opentripplanner/OpenTripPlanner/commit/334dbc7cf3432e7c17b0ed98801e61b0b591b408",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.opentripplanner.analyst.cluster.AnalystWorker.WorkerIdDefiner moved to org.opentripplanner.analyst.cluster.WorkerIdDefiner",
	"motivations": [ 
	{ 
                "label": "MC: Convert to top-level container",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/languagetool-org/languagetool.git",
	"sha1": "01cddc5afb590b4d36cb784637a8ea8aa31d3561",
	"url": "https://github.com/languagetool-org/languagetool/commit/01cddc5afb590b4d36cb784637a8ea8aa31d3561",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private createNonOfficeElements(cons GridBagConstraints, portPanel JPanel) : void extracted from public show(rules List<Rule>) : void in class org.languagetool.gui.ConfigurationDialog",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getTreeModel(rootNode DefaultMutableTreeNode) : DefaultTreeModel extracted from public show(rules List<Rule>) : void in class org.languagetool.gui.ConfigurationDialog",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getMouseAdapter() : MouseAdapter extracted from public show(rules List<Rule>) : void in class org.languagetool.gui.ConfigurationDialog",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getTreeButtonPanel() : JPanel extracted from public show(rules List<Rule>) : void in class org.languagetool.gui.ConfigurationDialog",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getMotherTonguePanel(cons GridBagConstraints) : JPanel extracted from public show(rules List<Rule>) : void in class org.languagetool.gui.ConfigurationDialog",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/languagetool-org/languagetool.git",
	"sha1": "bec15926deb49d2b3f7b979d4cfc819947a434ec",
	"url": "https://github.com/languagetool-org/languagetool/commit/bec15926deb49d2b3f7b979d4cfc819947a434ec",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private hasRequiredPosTag(posTagsToFind Collection<String>, tokenReadings AnalyzedTokenReadings) : boolean renamed to private getReadingWithVidmPosTag(posTagsToFind Collection<String>, tokenReadings AnalyzedTokenReadings) : boolean in class org.languagetool.rules.uk.TokenAgreementRule",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Class",
	"description": "Extract Class org.languagetool.tagging.uk.CompoundTagger from class org.languagetool.tagging.uk.UkrainianTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute public VIDMINKY_MAP : Map<String,String> from class org.languagetool.tagging.uk.UkrainianTagger to public VIDMINKY_MAP : Map<String,String> from class org.languagetool.tagging.uk.PosTagHelper",
	"motivations": [ 
	{ 
                "label": "MA: Remove duplication",
                "status": "add"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private guessCompoundTag(word String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to public guessCompoundTag(word String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private doGuessCompoundTag(word String) : List<AnalyzedToken> extracted from private guessCompoundTag(word String) : List<AnalyzedToken> in class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private cityAvenueMatch(word String, leftAnalyzedTokens List<AnalyzedToken>) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to private cityAvenueMatch(word String, leftAnalyzedTokens List<AnalyzedToken>) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private tagMatch(word String, leftAnalyzedTokens List<AnalyzedToken>, rightAnalyzedTokens List<AnalyzedToken>) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to private tagMatch(word String, leftAnalyzedTokens List<AnalyzedToken>, rightAnalyzedTokens List<AnalyzedToken>) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getNumAgreedPosTag(leftPosTag String, rightPosTag String, leftNv boolean) : String from class org.languagetool.tagging.uk.UkrainianTagger to private getNumAgreedPosTag(leftPosTag String, rightPosTag String, leftNv boolean) : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getAgreedPosTag(leftPosTag String, rightPosTag String, leftNv boolean) : String from class org.languagetool.tagging.uk.UkrainianTagger to private getAgreedPosTag(leftPosTag String, rightPosTag String, leftNv boolean) : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private isMinMax(rightToken String) : boolean from class org.languagetool.tagging.uk.UkrainianTagger to private isMinMax(rightToken String) : boolean from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private tryAnimInanim(leftPosTag String, rightPosTag String, leftLemma String, rightLemma String, leftNv boolean, rightNv boolean) : String from class org.languagetool.tagging.uk.UkrainianTagger to private tryAnimInanim(leftPosTag String, rightPosTag String, leftLemma String, rightLemma String, leftNv boolean, rightNv boolean) : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private isSameAnimStatus(leftPosTag String, rightPosTag String) : boolean from class org.languagetool.tagging.uk.UkrainianTagger to private isSameAnimStatus(leftPosTag String, rightPosTag String) : boolean from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private isPlural(posTag String) : boolean from class org.languagetool.tagging.uk.UkrainianTagger to private isPlural(posTag String) : boolean from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private oAdjMatch(word String, analyzedTokens List<AnalyzedToken>, leftWord String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to private oAdjMatch(word String, analyzedTokens List<AnalyzedToken>, leftWord String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private oToYj(leftWord String) : String from class org.languagetool.tagging.uk.UkrainianTagger to private oToYj(leftWord String) : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getNvPrefixNounMatch(word String, analyzedTokens List<AnalyzedToken>, leftWord String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to private getNvPrefixNounMatch(word String, analyzedTokens List<AnalyzedToken>, leftWord String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private poAdvMatch(word String, analyzedTokens List<AnalyzedToken>, adjTag String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.UkrainianTagger to private poAdvMatch(word String, analyzedTokens List<AnalyzedToken>, adjTag String) : List<AnalyzedToken> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private capitalize(word String) : String from class org.languagetool.tagging.uk.UkrainianTagger to private capitalize(word String) : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private tagBothCases(leftWord String) : List<TaggedWord> from class org.languagetool.tagging.uk.UkrainianTagger to private tagBothCases(leftWord String) : List<TaggedWord> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private loadSet(path String) : Set<String> from class org.languagetool.tagging.uk.UkrainianTagger to private loadSet(path String) : Set<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private debugCompounds() : void from class org.languagetool.tagging.uk.UkrainianTagger to private debugCompounds() : void from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private debug_compound_tagged_write(guessedCompoundTags List<AnalyzedToken>) : void from class org.languagetool.tagging.uk.UkrainianTagger to private debug_compound_tagged_write(guessedCompoundTags List<AnalyzedToken>) : void from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private debug_compound_unknown_write(word String) : void from class org.languagetool.tagging.uk.UkrainianTagger to private debug_compound_unknown_write(word String) : void from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private debug_tagged_write(analyzedTokens List<AnalyzedToken>, writer BufferedWriter) : void from class org.languagetool.tagging.uk.UkrainianTagger to private debug_tagged_write(analyzedTokens List<AnalyzedToken>, writer BufferedWriter) : void from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private DEBUG_COMPOUNDS_PROPERTY : String from class org.languagetool.tagging.uk.UkrainianTagger to private DEBUG_COMPOUNDS_PROPERTY : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private TAG_ANIM : String from class org.languagetool.tagging.uk.UkrainianTagger to private TAG_ANIM : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NV_TAG : String from class org.languagetool.tagging.uk.UkrainianTagger to private NV_TAG : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private COMPB_TAG : String from class org.languagetool.tagging.uk.UkrainianTagger to private COMPB_TAG : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private EXTRA_TAGS : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private EXTRA_TAGS : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NOUN_SING_V_ROD_REGEX : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private NOUN_SING_V_ROD_REGEX : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NOUN_V_NAZ_REGEX : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private NOUN_V_NAZ_REGEX : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private SING_REGEX_F : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private SING_REGEX_F : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private O_ADJ_PATTERN : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private O_ADJ_PATTERN : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private MNP_NAZ_REGEX : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private MNP_NAZ_REGEX : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private MNP_ZNA_REGEX : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private MNP_ZNA_REGEX : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private MNP_ROD_REGEX : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private MNP_ROD_REGEX : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private stdNounTag : String from class org.languagetool.tagging.uk.UkrainianTagger to private stdNounTag : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private stdNounTagLen : int from class org.languagetool.tagging.uk.UkrainianTagger to private stdNounTagLen : int from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private stdNounTagRegex : Pattern from class org.languagetool.tagging.uk.UkrainianTagger to private stdNounTagRegex : Pattern from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private dashPrefixes : Set<String> from class org.languagetool.tagging.uk.UkrainianTagger to private dashPrefixes : Set<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private leftMasterSet : Set<String> from class org.languagetool.tagging.uk.UkrainianTagger to private leftMasterSet : Set<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private cityAvenue : Set<String> from class org.languagetool.tagging.uk.UkrainianTagger to private cityAvenue : Set<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private rightPartsWithLeftTagMap : Map<String,Pattern> from class org.languagetool.tagging.uk.UkrainianTagger to private rightPartsWithLeftTagMap : Map<String,Pattern> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private slaveSet : Set<String> from class org.languagetool.tagging.uk.UkrainianTagger to private slaveSet : Set<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private NUMR_ENDING_MAP : Map<String,List<String>> from class org.languagetool.tagging.uk.UkrainianTagger to private NUMR_ENDING_MAP : Map<String,List<String>> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private ADJ_TAG_FOR_PO_ADV_MIS : String from class org.languagetool.tagging.uk.UkrainianTagger to private ADJ_TAG_FOR_PO_ADV_MIS : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private ADJ_TAG_FOR_PO_ADV_NAZ : String from class org.languagetool.tagging.uk.UkrainianTagger to private ADJ_TAG_FOR_PO_ADV_NAZ : String from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private LEFT_O_ADJ : List<String> from class org.languagetool.tagging.uk.UkrainianTagger to private LEFT_O_ADJ : List<String> from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private compoundUnknownDebugWriter : BufferedWriter from class org.languagetool.tagging.uk.UkrainianTagger to private compoundUnknownDebugWriter : BufferedWriter from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private compoundTaggedDebugWriter : BufferedWriter from class org.languagetool.tagging.uk.UkrainianTagger to private compoundTaggedDebugWriter : BufferedWriter from class org.languagetool.tagging.uk.CompoundTagger",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/puniverse/quasar.git",
	"sha1": "56d4b999e8be70be237049708f019c278c356e71",
	"url": "https://github.com/puniverse/quasar/commit/56d4b999e8be70be237049708f019c278c356e71",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private isNonSuspendable(clazz Class, methodName String) : boolean renamed to private isSuspendable(clazz Class, methodName String) : boolean in class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method package verifySuspend(current Fiber, exc boolean) : Fiber inlined to package verifySuspend(current Fiber) : Fiber in class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public checkInstrumentation(exc boolean) : boolean inlined to public checkInstrumentation() : boolean in class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable classInstrumented : boolean in method public checkInstrumentation() : boolean from class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable methodInstrumented : boolean in method public checkInstrumentation() : boolean from class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Variable",
	"description": "Rename Variable notInstrumented : boolean to ok : boolean in method public checkInstrumentation() : boolean in class co.paralleluniverse.fibers.Fiber",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public pushMethod(entry int, numSlots int, method String, sourceLine int) : void inlined to public pushMethod(entry int, numSlots int) : void in class co.paralleluniverse.fibers.Stack",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method public popMethod(catchAll boolean) : void inlined to public popMethod() : void in class co.paralleluniverse.fibers.Stack",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private emitInstrumentedAnn(mv MethodVisitor) : void extracted from public accept(mv MethodVisitor, hasAnnotation boolean) : void in class co.paralleluniverse.fibers.instrument.InstrumentMethod",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type susp : Boolean to susp : boolean in method public collectCodeBlocks() : boolean in class co.paralleluniverse.fibers.instrument.InstrumentMethod",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/puniverse/quasar.git",
	"sha1": "c22d40fab8dfe4c5cad9ba582caf0855ff64b324",
	"url": "https://github.com/puniverse/quasar/commit/c22d40fab8dfe4c5cad9ba582caf0855ff64b324",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected failedSubscribe(s Subscriber<? super T>, t Throwable) : void extracted from public subscribe(s Subscriber<? super T>) : void in class co.paralleluniverse.strands.channels.reactivestreams.ChannelPublisher",
	"motivations": [ 
	{ 
	
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method protected failedSubscribe(s Subscription) : void extracted from public onSubscribe(s Subscription) : void in class co.paralleluniverse.strands.channels.reactivestreams.ChannelSubscriber",
	"motivations": [ 
	{ 
                "label": "EM: Enable overriding",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/rstudio/rstudio.git",
	"sha1": "229d1b60c03a3f8375451c68a6911660a3993777",
	"url": "https://github.com/rstudio/rstudio/commit/229d1b60c03a3f8375451c68a6911660a3993777",
	"refactorings": [{
	"type": "Change Return Type",
	"description": "Change Return Type boolean to void in method protected validateAsync(input T, onValidated OperationWithInput<Boolean>) : void in class org.rstudio.core.client.widget.Wizard",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method protected validate(input T) : boolean renamed to protected validateAsync(input T, onValidated OperationWithInput<Boolean>) : void in class org.rstudio.core.client.widget.Wizard",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Inline Method",
	"description": "Inline Method private fireValidatedRSconnectPublish(result RSConnectPublishResult, launchBrowser boolean) : void inlined to public fireRSConnectPublishEvent(result RSConnectPublishResult, launchBrowser boolean) : void in class org.rstudio.studio.client.rsconnect.RSConnect",
	"motivations": [ 
	{ 
                "label": "IM: Caller becomes trivial",
                "status": "add"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private isUpdate() : boolean extracted from public getResult() : RSConnectPublishResult in class org.rstudio.studio.client.rsconnect.ui.RSConnectDeploy",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private isUpdate() : boolean extracted from public getResult() : RSConnectPublishResult in class org.rstudio.studio.client.rsconnect.ui.RSConnectDeploy",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public checkForExistingApp(account RSConnectAccount, appName String, onValidated OperationWithInput<Boolean>) : void from class org.rstudio.studio.client.rsconnect.RSConnect to private checkForExistingApp(account RSConnectAccount, appName String, onValidated OperationWithInput<Boolean>) : void from class org.rstudio.studio.client.rsconnect.ui.RSConnectDeploy",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "match1"
	} ]
},
{
	"type": "Extract And Move Method",
	"description": "Extract And Move Method protected validateAsync(input T, onValidated OperationWithInput<Boolean>) : void extracted from protected validate(input T) : boolean in class org.rstudio.core.client.widget.Wizard & moved to class org.rstudio.core.client.widget.WizardPage",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Jasig/cas.git",
	"sha1": "7fb0d1ce3b6583013e81ac05eb9afb15d20eab7f",
	"url": "https://github.com/Jasig/cas/commit/7fb0d1ce3b6583013e81ac05eb9afb15d20eab7f",
	"refactorings": [{
	"type": "Move Attribute",
	"description": "Move Attribute public NTLMSSP_SIGNATURE : Byte[] from class org.jasig.cas.support.spnego.util.SpnegoConstants to private NTLMSSP_SIGNATURE : Byte[] from class org.jasig.cas.support.spnego.authentication.principal.SpnegoCredential",
	"motivations": [ 
	{ 
                "label": "MA: Move attribute to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "5f18bed8da4dda4fa516907ecbbe28f712e944f7",
	"url": "https://github.com/JetBrains/intellij-community/commit/5f18bed8da4dda4fa516907ecbbe28f712e944f7",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.intellij.util.ui.components.JBPanel moved to com.intellij.ui.components.JBPanel",
	"motivations": [ 
	{ 
                "label": "MC: Backward compatibility",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "ce5f9ff96e2718e4014655f819314ac2ac4bd8bf",
	"url": "https://github.com/JetBrains/intellij-community/commit/ce5f9ff96e2718e4014655f819314ac2ac4bd8bf",
	"refactorings": [{
	"type": "Rename Method",
	"description": "Rename Method private getConfiguration(project Project) : RunnerAndConfigurationSettings renamed to private getSelectedConfiguration(project Project) : RunnerAndConfigurationSettings in class com.intellij.execution.ExecutorRegistryImpl.ExecutorAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable icon : Icon in method private setConfigurationIcon(presentation Presentation, settings RunnerAndConfigurationSettings, project Project) : void from class com.intellij.execution.actions.RunConfigurationsComboBoxAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getLiveIndicator(base Icon) : Icon from class com.intellij.execution.ui.RunContentManagerImpl to public getLiveIndicator(base Icon) : Icon from class com.intellij.execution.runners.ExecutionUtil",
	"motivations": [ 
	{ 
                "label": "MM: Move method to enable reuse",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "a97341973c3b683d62d1422e5404ed5c7ccf45f8",
	"url": "https://github.com/JetBrains/intellij-community/commit/a97341973c3b683d62d1422e5404ed5c7ccf45f8",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private setNewName(newText String) : PsiElement extracted from public handleElementRename(newElementName String) : PsiElement in class org.jetbrains.plugins.javaFX.fxml.refs.FxmlReferencesContributor.MyJavaClassReferenceProvider.JavaClassReferenceWrapper",
	"motivations": [ 
		{
			"label": "EM: Extract reusable method",
			"status": "match1"
		},
		{
			"label": "EM: Facilitate extension",
			"status": "match1"
		} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private setNewName(newText String) : PsiElement extracted from public bindToElement(element PsiElement) : PsiElement in class org.jetbrains.plugins.javaFX.fxml.refs.FxmlReferencesContributor.MyJavaClassReferenceProvider.JavaClassReferenceWrapper",
	"motivations": [ 
	{ 
			"label": "EM: Facilitate extension",
			"status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getOldName() : String extracted from public handleElementRename(newElementName String) : PsiElement in class org.jetbrains.plugins.javaFX.fxml.refs.FxmlReferencesContributor.MyJavaClassReferenceProvider.JavaClassReferenceWrapper",
	"motivations": [ 
	{ 
			"label": "EM: Facilitate extension",
			"status": "match1"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private getOldName() : String extracted from public bindToElement(element PsiElement) : PsiElement in class org.jetbrains.plugins.javaFX.fxml.refs.FxmlReferencesContributor.MyJavaClassReferenceProvider.JavaClassReferenceWrapper",
	"motivations": [ 
	{ 
			"label": "EM: Facilitate extension",
			"status": "match1"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "3972b9b3d4e03bdb5e62dfa663e3e0a1871e3c9f",
	"url": "https://github.com/JetBrains/intellij-community/commit/3972b9b3d4e03bdb5e62dfa663e3e0a1871e3c9f",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.intellij.psi.codeStyle.autodetect.NewLineBlocksIterator moved to com.intellij.psi.formatter.common.NewLineBlocksIterator",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "d71154ed21e2d5c65bb0ddb000bcb04ca5735048",
	"url": "https://github.com/JetBrains/intellij-community/commit/d71154ed21e2d5c65bb0ddb000bcb04ca5735048",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public canonicalizePath(url String, baseUrl Url, baseUrlIsFile boolean) : String extracted from protected canonicalizeUrl(url String, baseUrl Url, trimFileScheme boolean, sourceIndex int, baseUrlIsFile boolean) : Url in class org.jetbrains.debugger.sourcemap.SourceResolver",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "e1625136ba12907696ef4c6e922ce073293f3a2c",
	"url": "https://github.com/JetBrains/intellij-community/commit/e1625136ba12907696ef4c6e922ce073293f3a2c",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private addAnnotationProcessorOption(compilerArg String, optionsMap Map<String,String>) : void extracted from private getAnnotationProcessorOptionsFromCompilerConfig(compilerConfig Element) : Map<String,String> in class org.jetbrains.idea.maven.project.MavenProject",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable param : String to compilerArg : String in method private addAnnotationProcessorOption(compilerArg String, optionsMap Map<String,String>) : void in class org.jetbrains.idea.maven.project.MavenProject",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Parameterize Variable",
	"description": "Parameterize Variable res : Map<String,String> to optionsMap : Map<String,String> in method private addAnnotationProcessorOption(compilerArg String, optionsMap Map<String,String>) : void in class org.jetbrains.idea.maven.project.MavenProject",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "7dd55014f9840ce03867bb175cf37a4c151dc806",
	"url": "https://github.com/JetBrains/intellij-community/commit/7dd55014f9840ce03867bb175cf37a4c151dc806",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private createConfigurable(ep ConfigurableEP<T>, log boolean) : T extracted from public wrapConfigurable(ep ConfigurableEP<T>) : T in class com.intellij.openapi.options.ex.ConfigurableWrapper",
	"motivations": [ 
	{ 
               "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "8d7a26edd1fedb9505b4f2b4fe57b2d2958b4dd9",
	"url": "https://github.com/JetBrains/intellij-community/commit/8d7a26edd1fedb9505b4f2b4fe57b2d2958b4dd9",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method private writeContentToFile(revision byte[]) : void inlined to private write(revision byte[]) : void in class com.intellij.openapi.vcs.history.FileHistoryPanelImpl.MyGetVersionAction",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable virtualFile : VirtualFile in method private write(revision byte[]) : void from class com.intellij.openapi.vcs.history.FileHistoryPanelImpl.MyGetVersionAction",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable virtualFile : VirtualFile in method protected executeAction(e AnActionEvent) : void from class com.intellij.openapi.vcs.history.FileHistoryPanelImpl.MyGetVersionAction",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "6ad1dcbfef36821a71cbffa301c58d1c3ffe8d62",
	"url": "https://github.com/JetBrains/intellij-community/commit/6ad1dcbfef36821a71cbffa301c58d1c3ffe8d62",
	"refactorings": [{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getModuleType() : ModuleType from class com.intellij.testFramework.LightProjectDescriptor.Empty to public getModuleType() : ModuleType from class com.intellij.testFramework.LightProjectDescriptor",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getSdk() : Sdk from class com.intellij.testFramework.LightProjectDescriptor.Empty to public getSdk() : Sdk from class com.intellij.testFramework.LightProjectDescriptor",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "cc0eaf7faa408a04b68e2b5820f3ebcc75420b5b",
	"url": "https://github.com/JetBrains/intellij-community/commit/cc0eaf7faa408a04b68e2b5820f3ebcc75420b5b",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private canBinaryExpressionBeUnboxed(lhs PsiExpression, rhs PsiExpression) : boolean extracted from private canBeUnboxed(expression PsiExpression) : boolean in class com.siyeh.ig.migration.UnnecessaryBoxingInspection.UnnecessaryBoxingVisitor",
	"motivations": [  ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private canBinaryExpressionBeUnboxed(lhs PsiExpression, rhs PsiExpression) : boolean extracted from private canBeUnboxed(expression PsiExpression) : boolean in class com.siyeh.ig.migration.UnnecessaryBoxingInspection.UnnecessaryBoxingVisitor",
	"motivations": [  ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "1b70adbfd49e00194c4c1170ef65e8114d7a2e46",
	"url": "https://github.com/JetBrains/intellij-community/commit/1b70adbfd49e00194c4c1170ef65e8114d7a2e46",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getFieldInitializerNullness(expression PsiExpression) : Nullness extracted from private calcInherentNullability() : Nullness in class com.intellij.codeInspection.dataFlow.value.DfaVariableValue",
	"motivations": [ 
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            },
            {
                "label": "EM: Decompose method to improve readability",
                "status": "match1"
            } ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "6b90205e9f7bbd1570f600d3812fd3efa1a0597e",
	"url": "https://github.com/JetBrains/intellij-community/commit/6b90205e9f7bbd1570f600d3812fd3efa1a0597e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.intellij.execution.console.RunIdeConsoleAction.IDE moved to com.intellij.ide.script.IDE",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "106d1d51754f454fa673976665e41f463316e084",
	"url": "https://github.com/JetBrains/intellij-community/commit/106d1d51754f454fa673976665e41f463316e084",
	"refactorings": [{
	"type": "Rename Variable",
	"description": "Rename Variable description : String to text : String in method package checkReferenceTypeUsedAsTypeArgument(typeElement PsiTypeElement, level LanguageLevel) : HighlightInfo in class com.intellij.codeInsight.daemon.impl.analysis.GenericsHighlightUtil",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private isKeywordAny(builder PsiBuilder) : boolean extracted from public parseTypeParameter(builder PsiBuilder) : PsiBuilder.Marker in class com.intellij.lang.java.parser.ReferenceParser",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private dummy(builder PsiBuilder) : void extracted from public parseTypeParameter(builder PsiBuilder) : PsiBuilder.Marker in class com.intellij.lang.java.parser.ReferenceParser",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public testAnyType() : void renamed to public testAnyTypeParams() : void in class com.intellij.lang.java.parser.partial.ReferenceParserTest",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "7ed3f273ab0caf0337c22f0b721d51829bb0c877",
	"url": "https://github.com/JetBrains/intellij-community/commit/7ed3f273ab0caf0337c22f0b721d51829bb0c877",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private addCoursesFromStepic(result List<CourseInfo>, pageNumber int) : boolean extracted from public getCourses() : List<CourseInfo> in class com.jetbrains.edu.stepic.EduStepicConnector",
	"motivations": [ 
            {
                "label": "EM: Extract reusable method",
                "status": "match1"
            },
            {
                "label": "EM: Facilitate extension",
                "status": "match1"
            }]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable coursesContainer : CoursesContainer in method private addCoursesFromStepic(result List<CourseInfo>, pageNumber int) : boolean from class com.jetbrains.edu.stepic.EduStepicConnector",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "10f769a60c7c7b73982e978959d381df487bbe2d",
	"url": "https://github.com/JetBrains/intellij-community/commit/10f769a60c7c7b73982e978959d381df487bbe2d",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public getLibraryPaths() : List<String> extracted from public getLibraryPath() : String in class com.intellij.execution.junit.JUnit4Framework",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match1"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method private getJUnit4JarPaths() : List<String> from class com.intellij.codeInsight.daemon.impl.quickfix.OrderEntryFix to public getJUnit4JarPaths() : List<String> from class com.intellij.openapi.projectRoots.ex.JavaSdkUtil",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/JetBrains/intellij-community.git",
	"sha1": "6540dde58190f642e59ca10516f84eb85f855373",
	"url": "https://github.com/JetBrains/intellij-community/commit/6540dde58190f642e59ca10516f84eb85f855373",
	"refactorings": [{
	"type": "Move Method",
	"description": "Move Method public averageAmongMedians(time long[], part int) : long from class com.intellij.testFramework.PlatformTestUtil to public averageAmongMedians(time long[], part int) : long from class com.intellij.util.ArrayUtil",
	"motivations": [ 
	{ 
                "label": "MM: Move method to appropriate class",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/orientechnologies/orientdb.git",
	"sha1": "1089957b645bde069d3864563bbf1f7c7da8045c",
	"url": "https://github.com/orientechnologies/orientdb/commit/1089957b645bde069d3864563bbf1f7c7da8045c",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected rewriteLinksInDocument(document ODocument, rewrite OIndex<OIdentifiable>) : void extracted from private rewriteLinksInDocument(document ODocument) : void in class com.orientechnologies.orient.core.db.tool.ODatabaseImport",
	"motivations": [ 
            {
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
            },
            {
                "label": "EM: Improve testability",
                "status": "match2"
            } ]
}
]},{	"repository": "https://github.com/orientechnologies/orientdb.git",
	"sha1": "0a1ff849ec7709be8553383fe9c2c7301980dde0",
	"url": "https://github.com/orientechnologies/orientdb/commit/0a1ff849ec7709be8553383fe9c2c7301980dde0",
	"refactorings": [{
	"type": "Rename Parameter",
	"description": "Rename Parameter left : Object to iLeft : Object in method public execute(iLeft Object, iRight Object) : boolean in class com.orientechnologies.orient.core.sql.parser.OEqualsCompareOperator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter right : Object to iRight : Object in method public execute(iLeft Object, iRight Object) : boolean in class com.orientechnologies.orient.core.sql.parser.OEqualsCompareOperator",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getDatabase() : ODatabaseDocumentInternal from class com.orientechnologies.orient.core.sql.parser.OStatement to public getDatabase() : ODatabaseDocumentInternal from class com.orientechnologies.orient.core.sql.parser.SimpleNode",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/spotify/helios.git",
	"sha1": "dd8753cfb0f67db4dde6c5254e2df3104b635dae",
	"url": "https://github.com/spotify/helios/commit/dd8753cfb0f67db4dde6c5254e2df3104b635dae",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getDeploymentGroup(client ZooKeeperClient, name String) : DeploymentGroup extracted from public getDeploymentGroup(name String) : DeploymentGroup in class com.spotify.helios.master.ZooKeeperMasterModel",
	"motivations": [ 
	{ 
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method public configDeploymentGroups(name String) : String renamed to public configDeploymentGroup(name String) : String in class com.spotify.helios.servicescommon.coordination.Paths",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/spotify/helios.git",
	"sha1": "cc02c00b8a92ef34d1a8bcdf44a45fb01a8dea6c",
	"url": "https://github.com/spotify/helios/commit/cc02c00b8a92ef34d1a8bcdf44a45fb01a8dea6c",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method protected createJobRawOutput(job Job) : String extracted from protected createJob(job Job) : JobId in class com.spotify.helios.system.SystemTestBase",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/SlimeKnights/TinkersConstruct.git",
	"sha1": "71820e573134be3fad3935035249cd77c4412f4e",
	"url": "https://github.com/SlimeKnights/TinkersConstruct/commit/71820e573134be3fad3935035249cd77c4412f4e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class tconstruct.library.modifiers.RecipeMatch moved to tconstruct.library.mantle.RecipeMatch",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type modifierItems : List<RecipeMatch> to modifierItems : RecipeMatchRegistry in class tconstruct.library.modifiers.Modifier",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public addItem(oredictItem String, count int) : void from class tconstruct.library.modifiers.Modifier to public addItem(oredictItem String, amountNeeded int, amountMatched int) : void from class tconstruct.library.mantle.RecipeMatchRegistry",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/Graylog2/graylog2-server.git",
	"sha1": "767171c90110c4c5781e8f6d19ece1fba0d492e9",
	"url": "https://github.com/Graylog2/graylog2-server/commit/767171c90110c4c5781e8f6d19ece1fba0d492e9",
	"refactorings": [{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type indexRangeService : IndexRangeService to indexRangeService : EsIndexRangeService in class org.graylog2.indexer.ranges.EsIndexRangeServiceTest",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public timestampStatsOfIndex(index String) : TimestampStats from class org.graylog2.indexer.searches.Searches to protected timestampStatsOfIndex(index String) : TimestampStats from class org.graylog2.indexer.ranges.EsIndexRangeService",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testTimestampStatsOfIndex() : void from class org.graylog2.indexer.searches.SearchesTest to public testTimestampStatsOfIndex() : void from class org.graylog2.indexer.ranges.EsIndexRangeServiceTest",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testTimestampStatsOfIndexWithEmptyIndex() : void from class org.graylog2.indexer.searches.SearchesTest to public testTimestampStatsOfIndexWithEmptyIndex() : void from class org.graylog2.indexer.ranges.EsIndexRangeServiceTest",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match2"
	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public testTimestampStatsOfIndexWithNonExistingIndex() : void from class org.graylog2.indexer.searches.SearchesTest to public testTimestampStatsOfIndexWithNonExistingIndex() : void from class org.graylog2.indexer.ranges.EsIndexRangeServiceTest",
	"motivations": [ 
	{ 
                "label": "MM: Isolate dependencies",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/SecUpwN/Android-IMSI-Catcher-Detector.git",
	"sha1": "e235f884f2e0bc258da77b9c80492ad33386fa86",
	"url": "https://github.com/SecUpwN/Android-IMSI-Catcher-Detector/commit/e235f884f2e0bc258da77b9c80492ad33386fa86",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private createCellSignalTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createSilentSmsTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createLocationTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createCellTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createOpenCellIDTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createDefaultMCCTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private createEventLogTable(database SQLiteDatabase) : void extracted from public onCreate(database SQLiteDatabase) : void in class com.SecUpwN.AIMSICD.adapters.AIMSICDDbAdapter.DbHelper",
	"motivations": [ 
	{ 
                "label": "EM: Decompose method to improve readability",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/VoltDB/voltdb.git",
	"sha1": "7527cfc746dc20ddb78002c7b3a65d55026a334e",
	"url": "https://github.com/VoltDB/voltdb/commit/7527cfc746dc20ddb78002c7b3a65d55026a334e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.voltdb.importer.ChannelChangeNotifier.CallbacksRef moved to org.voltdb.importer.ChannelDistributer.CallbacksRef",
	"motivations": [ 
	{ 
                "label": "MC: Remove inner classes from deprecated container",
                "status": "match1"
	} ]
},
{
	"type": "Merge Parameter",
	"description": "Merge Parameter [added : Set<URI>, removed : Set<URI>] to assignment : ImporterChannelAssignment in method public onChange(assignment ImporterChannelAssignment) : void in class org.voltdb.importclient.kafka.KafkaStreamImporter",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Set<ChannelSpec> to Set<URI> in method package getRemoved(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Return Type",
	"description": "Change Return Type Set<ChannelSpec> to Set<URI> in method package getAdded(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Attribute Type",
	"description": "Change Attribute Type queue : BlockingDeque<ChannelAssignment> to queue : BlockingDeque<ImporterChannelAssignment> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Rename Method",
	"description": "Rename Method package fromURIs(uris Set<URI>) : Set<ChannelSpec> renamed to package asSpecs(uris Set<URI>) : Set<ChannelSpec> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type actual : Set<ChannelSpec> to actual : Set<URI> in method public testRegistration() : void in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type actual : Set<ChannelSpec> to actual : Set<URI> in method public testHostFailure() : void in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type sbldr : ImmutableSet.Builder<ChannelSpec> to sbldr : ImmutableSet.Builder<URI> in method package getRemoved(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type assignment : ChannelAssignment to assignment : ImporterChannelAssignment in method package getRemoved(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type sbldr : ImmutableSet.Builder<ChannelSpec> to sbldr : ImmutableSet.Builder<URI> in method package getAdded(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Change Variable Type",
	"description": "Change Variable Type assignment : ChannelAssignment to assignment : ImporterChannelAssignment in method package getAdded(expected int) : Set<URI> in class org.voltdb.importer.TestChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Attribute",
	"description": "Move Attribute private m_callbacks : CallbacksRef from class org.voltdb.importer.ChannelChangeNotifier to package m_callbacks : CallbacksRef from class org.voltdb.importer.ChannelDistributer",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method package mapByImporter(specs Set<ChannelSpec>) : SetMultimap<String,URI> from class org.voltdb.importer.ChannelChangeNotifier to private mapByImporter(specs Set<ChannelSpec>) : SetMultimap<String,URI> from class org.voltdb.importer.ChannelAssignment",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public registerCallback(importer String, callback ChannelChangeCallback) : void from class org.voltdb.importer.ChannelChangeNotifier to public registerCallback(importer String, callback ChannelChangeCallback) : void from class org.voltdb.importer.ChannelDistributer",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/VoltDB/voltdb.git",
	"sha1": "e9efc045fbc6fa893c66a03b72b7eedb388cf96c",
	"url": "https://github.com/VoltDB/voltdb/commit/e9efc045fbc6fa893c66a03b72b7eedb388cf96c",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public setMpUniqueIdListener(listener DurableMpUniqueIdListener) : void extracted from public setMpDRGateway(mpGateway PartitionDRGateway) : void in class org.voltdb.iv2.SpScheduler",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/VoltDB/voltdb.git",
	"sha1": "e58c9c3eef4c6e44b21a97cfbd2862bb2eb4627a",
	"url": "https://github.com/VoltDB/voltdb/commit/e58c9c3eef4c6e44b21a97cfbd2862bb2eb4627a",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public hasSize(size int) : SymbolTableAssert extracted from public isEmpty() : SymbolTableAssert in class org.voltdb.sqlparser.symtab.SymbolTableAssert",
	"motivations": [ 
            {
                "label": "EM: Improve testability",
                "status": "match1"
            },
            {
                "label": "EM: Introduce alternative method signature",
                "status": "match1"
            } ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter actual : Type to aActual : Type in method protected TypeAssert(aActual Type) in class org.voltdb.sqlparser.symtab.TypeAssert",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public definesType(aTypeName String) : TypeAssert from class org.voltdb.sqlparser.matchers.SymbolTableAssert to public definesType(aTypeName String) : TypeAssert from class org.voltdb.sqlparser.symtab.SymbolTableAssert",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public hasName(aTypeName String) : TypeAssert from class org.voltdb.sqlparser.matchers.TypeAssert to public hasName(aTypeName String) : TypeAssert from class org.voltdb.sqlparser.symtab.TypeAssert",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public hasMaxSize(aMaxSize int) : TypeAssert from class org.voltdb.sqlparser.matchers.TypeAssert to public hasMaxSize(aMaxSize int) : TypeAssert from class org.voltdb.sqlparser.symtab.TypeAssert",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Move Method",
	"description": "Move Method public hasNominalSize(aNominalSize int) : TypeAssert from class org.voltdb.sqlparser.matchers.TypeAssert to public hasNominalSize(aNominalSize int) : TypeAssert from class org.voltdb.sqlparser.symtab.TypeAssert",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/VoltDB/voltdb.git",
	"sha1": "deb8e5ca64fcf633edbd89523af472da813b6772",
	"url": "https://github.com/VoltDB/voltdb/commit/deb8e5ca64fcf633edbd89523af472da813b6772",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private getNormalValue(r Random, magnitude double, min long, max long) : long extracted from private fillTable(client Client, tbl String) : void in class org.voltdb.regressionsuites.TestApproxCountDistinctSuite",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/mongodb/morphia.git",
	"sha1": "70a25d4afdc435e9cad4460b2a20b7aabdd21e35",
	"url": "https://github.com/mongodb/morphia/commit/70a25d4afdc435e9cad4460b2a20b7aabdd21e35",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private performBasicMappingTest() : void extracted from public testBasicMapping() : void in class org.mongodb.morphia.TestMapping",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/zeromq/jeromq.git",
	"sha1": "02d3fa171d02c9d82c7bdcaeb739f47d0c0006a0",
	"url": "https://github.com/zeromq/jeromq/commit/02d3fa171d02c9d82c7bdcaeb739f47d0c0006a0",
	"refactorings": [{
	"type": "Inline Method",
	"description": "Inline Method private makeFdPair() : void inlined to public Signaler() in class zmq.Signaler",
	"motivations": [ 
	{ 
                "label": "IM: Eliminate unnecessary method",
                "status": "add"
	} ]
}
]},{	"repository": "https://github.com/mongodb/mongo-java-driver.git",
	"sha1": "8c5a20d786e66ee4c4b0d743f0f80bf681c419be",
	"url": "https://github.com/mongodb/mongo-java-driver/commit/8c5a20d786e66ee4c4b0d743f0f80bf681c419be",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.mongodb.JsonPoweredTestHelper moved to util.JsonPoweredTestHelper",
	"motivations": [ 
	{ 
                "label": "MC: Move class to appropriate container",
                "status": "match1"
	} ]
}
]},{	"repository": "https://github.com/openhab/openhab.git",
	"sha1": "a9b1e5d67421ed98b49ae25c3bbd6e27a0ab1590",
	"url": "https://github.com/openhab/openhab/commit/a9b1e5d67421ed98b49ae25c3bbd6e27a0ab1590",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private processBindingConfiguration() : void extracted from public updated(config Dictionary<String,?>) : void in class org.openhab.binding.insteonplm.InsteonPLMActiveBinding",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Variable",
	"description": "Extract Variable p : Port in method public addPort(name String, port String) : void from class org.openhab.binding.insteonplm.internal.driver.Driver",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Replace Variable With Attribute",
	"description": "Replace Variable With Attribute mdbb : ModemDBBuilder to m_mdbb : ModemDBBuilder in method public start() : void in class org.openhab.binding.insteonplm.internal.driver.Port",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private bail(txt String) : void extracted from public processData() : Msg in class org.openhab.binding.insteonplm.internal.message.MsgFactory",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private bail(txt String) : void extracted from public processData() : Msg in class org.openhab.binding.insteonplm.internal.message.MsgFactory",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/osmandapp/Osmand.git",
	"sha1": "e95aa8ab32a0334b9c941799060fd601297d05e4",
	"url": "https://github.com/osmandapp/Osmand/commit/e95aa8ab32a0334b9c941799060fd601297d05e4",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method public showItemPopupOptionsMenu(point FavouritePoint, activity Activity, view View) : void extracted from public onListItemClick(l ListView, v View, position int, id long) : void in class net.osmand.plus.activities.FavoritesListFragment",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method public showItemPopupOptionsMenu(point FavouritePoint, view View) : void extracted from public onChildClick(parent ExpandableListView, v View, groupPosition int, childPosition int, id long) : boolean in class net.osmand.plus.activities.FavoritesTreeFragment",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
},
{
	"type": "Rename Parameter",
	"description": "Rename Parameter v : View to view : View in method public showItemPopupOptionsMenu(point FavouritePoint, view View) : void in class net.osmand.plus.activities.FavoritesTreeFragment",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/BroadleafCommerce/BroadleafCommerce.git",
	"sha1": "4ef35268bb96bb78b2dc698fa68e7ce763cde32e",
	"url": "https://github.com/BroadleafCommerce/BroadleafCommerce/commit/4ef35268bb96bb78b2dc698fa68e7ce763cde32e",
	"refactorings": [{
	"type": "Pull Up Attribute",
	"description": "Pull Up Attribute protected column : Integer from class org.broadleafcommerce.openadmin.dto.BasicFieldMetadata to private column : Integer from class org.broadleafcommerce.openadmin.dto.FieldMetadata",
	"motivations": [ 
	{ 
                "label": "UA: Move up common attributes",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public getColumn() : Integer from class org.broadleafcommerce.openadmin.dto.BasicFieldMetadata to public getColumn() : Integer from class org.broadleafcommerce.openadmin.dto.FieldMetadata",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
},
{
	"type": "Pull Up Method",
	"description": "Pull Up Method public setColumn(column Integer) : void from class org.broadleafcommerce.openadmin.dto.BasicFieldMetadata to public setColumn(column Integer) : void from class org.broadleafcommerce.openadmin.dto.FieldMetadata",
	"motivations": [ 
	{ 
                "label": "UM: Move up common methods",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/novoda/android-demos.git",
	"sha1": "5cdabae35f0642e9fe243afe12e4c16b3378a150",
	"url": "https://github.com/novoda/android-demos/commit/5cdabae35f0642e9fe243afe12e4c16b3378a150",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class com.novoda.Base64 moved to com.novoda.demo.encryption.Base64",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class com.novoda.Base64DecoderException moved to com.novoda.demo.encryption.Base64DecoderException",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move And Rename Class",
	"description": "Move And Rename Class com.novoda.Encrypt moved and renamed to com.novoda.demo.encryption.EncryptionActivity",
	"motivations": [ 
	{ 

	} ]
},
{
	"type": "Extract Method",
	"description": "Extract Method private updateTextViews() : void extracted from public onCreate(savedInstanceState Bundle) : void in class com.novoda.demo.encryption.EncryptionActivity",
	"motivations": [ 
	{ 

	} ]
}
]},{	"repository": "https://github.com/wordpress-mobile/WordPress-Android.git",
	"sha1": "4bfe164cc8b4556b98df18098b162e0a84038b32",
	"url": "https://github.com/wordpress-mobile/WordPress-Android/commit/4bfe164cc8b4556b98df18098b162e0a84038b32",
	"refactorings": [{
	"type": "Extract Method",
	"description": "Extract Method private trackLastVisibleTab(position int) : void extracted from protected onResume() : void in class org.wordpress.android.ui.main.WPMainActivity",
	"motivations": [ 
	{ 
                "label": "EM: Extract reusable method",
                "status": "match2"
	} ]
}
]},{	"repository": "https://github.com/wordpress-mobile/WordPress-Android.git",
	"sha1": "9dc3cbd59a20f03406f295a4a8f3b8676dbc939e",
	"url": "https://github.com/wordpress-mobile/WordPress-Android/commit/9dc3cbd59a20f03406f295a4a8f3b8676dbc939e",
	"refactorings": [{
	"type": "Move Class",
	"description": "Move Class org.wordpress.android.ui.prefs.NotificationsPreference moved to org.wordpress.android.ui.prefs.notifications.NotificationsPreference",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.wordpress.android.ui.prefs.NotificationsSettingsActivity moved to org.wordpress.android.ui.prefs.notifications.NotificationsSettingsActivity",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
},
{
	"type": "Move Class",
	"description": "Move Class org.wordpress.android.ui.prefs.NotificationsSettingsFragment moved to org.wordpress.android.ui.prefs.notifications.NotificationsSettingsFragment",
	"motivations": [ 
	{ 
                "label": "MC: Introduce sub-package",
                "status": "match2"
	} ]
}
]}]
